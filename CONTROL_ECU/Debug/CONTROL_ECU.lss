
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000645a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  0000645a  000064ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  008001c2  008001c2  00006650  2**0
                  ALLOC
  3 .stab         00004a88  00000000  00000000  00006650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c91  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000cd69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000cf09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ce6  00000000  00000000  0000d0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001354  00000000  00000000  0000fddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001308  00000000  00000000  00011133  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001243c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  000125fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021ec  00000000  00000000  0001293c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00014b28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e1 29 	jmp	0x53c2	; 0x53c2 <__vector_4>
      14:	0c 94 ae 29 	jmp	0x535c	; 0x535c <__vector_5>
      18:	0c 94 7b 29 	jmp	0x52f6	; 0x52f6 <__vector_6>
      1c:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__vector_7>
      20:	0c 94 15 29 	jmp	0x522a	; 0x522a <__vector_8>
      24:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__vector_9>
      28:	0c 94 af 28 	jmp	0x515e	; 0x515e <__vector_10>
      2c:	0c 94 7c 28 	jmp	0x50f8	; 0x50f8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 7a 2c 	jmp	0x58f4	; 0x58f4 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3e       	cpi	r26, 0xEE	; 238
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <main>
      8a:	0c 94 2b 32 	jmp	0x6456	; 0x6456 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 ad 10 	call	0x215a	; 0x215a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__subsf3>
     1bc:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 f4 31 	jmp	0x63e8	; 0x63e8 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	88 59       	subi	r24, 0x98	; 152
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	88 59       	subi	r24, 0x98	; 152
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	88 59       	subi	r24, 0x98	; 152
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__epilogue_restores__>

00000ed2 <__umoddi3>:
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 f4 31 	jmp	0x63e8	; 0x63e8 <__prologue_saves__>
     ede:	a8 e0       	ldi	r26, 0x08	; 8
     ee0:	4e 01       	movw	r8, r28
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
     ee8:	f4 01       	movw	r30, r8
     eea:	6a 2e       	mov	r6, r26
     eec:	11 92       	st	Z+, r1
     eee:	6a 94       	dec	r6
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__umoddi3+0x1a>
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	3a 83       	std	Y+2, r19	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	98 87       	std	Y+8, r25	; 0x08
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	fc 01       	movw	r30, r24
     f08:	11 92       	st	Z+, r1
     f0a:	aa 95       	dec	r26
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <__umoddi3+0x36>
     f0e:	a9 86       	std	Y+9, r10	; 0x09
     f10:	ba 86       	std	Y+10, r11	; 0x0a
     f12:	cb 86       	std	Y+11, r12	; 0x0b
     f14:	dc 86       	std	Y+12, r13	; 0x0c
     f16:	ed 86       	std	Y+13, r14	; 0x0d
     f18:	fe 86       	std	Y+14, r15	; 0x0e
     f1a:	0f 87       	std	Y+15, r16	; 0x0f
     f1c:	18 8b       	std	Y+16, r17	; 0x10
     f1e:	29 84       	ldd	r2, Y+9	; 0x09
     f20:	3a 84       	ldd	r3, Y+10	; 0x0a
     f22:	4b 84       	ldd	r4, Y+11	; 0x0b
     f24:	5c 84       	ldd	r5, Y+12	; 0x0c
     f26:	ad 84       	ldd	r10, Y+13	; 0x0d
     f28:	be 84       	ldd	r11, Y+14	; 0x0e
     f2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f2c:	d8 88       	ldd	r13, Y+16	; 0x10
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	69 96       	adiw	r28, 0x19	; 25
     f38:	2f af       	std	Y+63, r18	; 0x3f
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	6a 96       	adiw	r28, 0x1a	; 26
     f3e:	3f af       	std	Y+63, r19	; 0x3f
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	6b 96       	adiw	r28, 0x1b	; 27
     f44:	4f af       	std	Y+63, r20	; 0x3f
     f46:	6b 97       	sbiw	r28, 0x1b	; 27
     f48:	6c 96       	adiw	r28, 0x1c	; 28
     f4a:	5f af       	std	Y+63, r21	; 0x3f
     f4c:	6c 97       	sbiw	r28, 0x1c	; 28
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	6c ac       	ldd	r6, Y+60	; 0x3c
     f52:	7d ac       	ldd	r7, Y+61	; 0x3d
     f54:	8e ac       	ldd	r8, Y+62	; 0x3e
     f56:	9f ac       	ldd	r9, Y+63	; 0x3f
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	69 aa       	std	Y+49, r6	; 0x31
     f5c:	7a aa       	std	Y+50, r7	; 0x32
     f5e:	8b aa       	std	Y+51, r8	; 0x33
     f60:	9c aa       	std	Y+52, r9	; 0x34
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	3b 01       	movw	r6, r22
     f6c:	4c 01       	movw	r8, r24
     f6e:	6d aa       	std	Y+53, r6	; 0x35
     f70:	7e aa       	std	Y+54, r7	; 0x36
     f72:	8f aa       	std	Y+55, r8	; 0x37
     f74:	98 ae       	std	Y+56, r9	; 0x38
     f76:	a1 14       	cp	r10, r1
     f78:	b1 04       	cpc	r11, r1
     f7a:	c1 04       	cpc	r12, r1
     f7c:	d1 04       	cpc	r13, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__umoddi3+0xb0>
     f80:	04 c3       	rjmp	.+1544   	; 0x158a <__umoddi3+0x6b8>
     f82:	62 14       	cp	r6, r2
     f84:	73 04       	cpc	r7, r3
     f86:	84 04       	cpc	r8, r4
     f88:	95 04       	cpc	r9, r5
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__umoddi3+0xbc>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__umoddi3+0x2bc>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	20 16       	cp	r2, r16
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	30 06       	cpc	r3, r16
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	40 06       	cpc	r4, r16
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	50 06       	cpc	r5, r16
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <__umoddi3+0xf0>
     fa0:	1f ef       	ldi	r17, 0xFF	; 255
     fa2:	21 16       	cp	r2, r17
     fa4:	31 04       	cpc	r3, r1
     fa6:	41 04       	cpc	r4, r1
     fa8:	51 04       	cpc	r5, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <__umoddi3+0xe8>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__umoddi3+0xe8>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	e8 2e       	mov	r14, r24
     fb2:	f1 2c       	mov	r15, r1
     fb4:	01 2d       	mov	r16, r1
     fb6:	11 2d       	mov	r17, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__umoddi3+0x118>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__umoddi3+0x118>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	24 16       	cp	r2, r20
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	34 06       	cpc	r3, r20
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	44 06       	cpc	r4, r20
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	54 06       	cpc	r5, r20
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__umoddi3+0x10e>
     fd4:	b8 e1       	ldi	r27, 0x18	; 24
     fd6:	eb 2e       	mov	r14, r27
     fd8:	f1 2c       	mov	r15, r1
     fda:	01 2d       	mov	r16, r1
     fdc:	11 2d       	mov	r17, r1
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__umoddi3+0x118>
     fe0:	a0 e1       	ldi	r26, 0x10	; 16
     fe2:	ea 2e       	mov	r14, r26
     fe4:	f1 2c       	mov	r15, r1
     fe6:	01 2d       	mov	r16, r1
     fe8:	11 2d       	mov	r17, r1
     fea:	d2 01       	movw	r26, r4
     fec:	c1 01       	movw	r24, r2
     fee:	0e 2c       	mov	r0, r14
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__umoddi3+0x128>
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__umoddi3+0x120>
     ffe:	88 59       	subi	r24, 0x98	; 152
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	dc 01       	movw	r26, r24
    1004:	2c 91       	ld	r18, X
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8e 19       	sub	r24, r14
    1010:	9f 09       	sbc	r25, r15
    1012:	a0 0b       	sbc	r26, r16
    1014:	b1 0b       	sbc	r27, r17
    1016:	5c 01       	movw	r10, r24
    1018:	6d 01       	movw	r12, r26
    101a:	a2 1a       	sub	r10, r18
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	a9 ae       	std	Y+57, r10	; 0x39
    1024:	ba ae       	std	Y+58, r11	; 0x3a
    1026:	cb ae       	std	Y+59, r12	; 0x3b
    1028:	dc ae       	std	Y+60, r13	; 0x3c
    102a:	a1 14       	cp	r10, r1
    102c:	b1 04       	cpc	r11, r1
    102e:	c1 04       	cpc	r12, r1
    1030:	d1 04       	cpc	r13, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__umoddi3+0x164>
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <__umoddi3+0x1e2>
    1036:	69 ad       	ldd	r22, Y+57	; 0x39
    1038:	06 2e       	mov	r0, r22
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__umoddi3+0x172>
    103c:	22 0c       	add	r2, r2
    103e:	33 1c       	adc	r3, r3
    1040:	44 1c       	adc	r4, r4
    1042:	55 1c       	adc	r5, r5
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <__umoddi3+0x16a>
    1048:	a4 01       	movw	r20, r8
    104a:	93 01       	movw	r18, r6
    104c:	06 2e       	mov	r0, r22
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__umoddi3+0x186>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <__umoddi3+0x17e>
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8a 19       	sub	r24, r10
    1062:	9b 09       	sbc	r25, r11
    1064:	6c 96       	adiw	r28, 0x1c	; 28
    1066:	cc ac       	ldd	r12, Y+60	; 0x3c
    1068:	dd ac       	ldd	r13, Y+61	; 0x3d
    106a:	ee ac       	ldd	r14, Y+62	; 0x3e
    106c:	ff ac       	ldd	r15, Y+63	; 0x3f
    106e:	6c 97       	sbiw	r28, 0x1c	; 28
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__umoddi3+0x1a8>
    1072:	f6 94       	lsr	r15
    1074:	e7 94       	ror	r14
    1076:	d7 94       	ror	r13
    1078:	c7 94       	ror	r12
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <__umoddi3+0x1a0>
    107e:	87 01       	movw	r16, r14
    1080:	76 01       	movw	r14, r12
    1082:	e2 2a       	or	r14, r18
    1084:	f3 2a       	or	r15, r19
    1086:	04 2b       	or	r16, r20
    1088:	15 2b       	or	r17, r21
    108a:	ed aa       	std	Y+53, r14	; 0x35
    108c:	fe aa       	std	Y+54, r15	; 0x36
    108e:	0f ab       	std	Y+55, r16	; 0x37
    1090:	18 af       	std	Y+56, r17	; 0x38
    1092:	6c 96       	adiw	r28, 0x1c	; 28
    1094:	8c ad       	ldd	r24, Y+60	; 0x3c
    1096:	9d ad       	ldd	r25, Y+61	; 0x3d
    1098:	ae ad       	ldd	r26, Y+62	; 0x3e
    109a:	bf ad       	ldd	r27, Y+63	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__umoddi3+0x1d6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	6a 95       	dec	r22
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__umoddi3+0x1ce>
    10ac:	89 ab       	std	Y+49, r24	; 0x31
    10ae:	9a ab       	std	Y+50, r25	; 0x32
    10b0:	ab ab       	std	Y+51, r26	; 0x33
    10b2:	bc ab       	std	Y+52, r27	; 0x34
    10b4:	32 01       	movw	r6, r4
    10b6:	88 24       	eor	r8, r8
    10b8:	99 24       	eor	r9, r9
    10ba:	b2 01       	movw	r22, r4
    10bc:	a1 01       	movw	r20, r2
    10be:	60 70       	andi	r22, 0x00	; 0
    10c0:	70 70       	andi	r23, 0x00	; 0
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	4c af       	std	Y+60, r20	; 0x3c
    10c6:	5d af       	std	Y+61, r21	; 0x3d
    10c8:	6e af       	std	Y+62, r22	; 0x3e
    10ca:	7f af       	std	Y+63, r23	; 0x3f
    10cc:	21 97       	sbiw	r28, 0x01	; 1
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	a4 01       	movw	r20, r8
    10d8:	93 01       	movw	r18, r6
    10da:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    10de:	7b 01       	movw	r14, r22
    10e0:	8c 01       	movw	r16, r24
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	21 97       	sbiw	r28, 0x01	; 1
    1102:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	87 01       	movw	r16, r14
    110c:	ff 24       	eor	r15, r15
    110e:	ee 24       	eor	r14, r14
    1110:	a9 a8       	ldd	r10, Y+49	; 0x31
    1112:	ba a8       	ldd	r11, Y+50	; 0x32
    1114:	cb a8       	ldd	r12, Y+51	; 0x33
    1116:	dc a8       	ldd	r13, Y+52	; 0x34
    1118:	c6 01       	movw	r24, r12
    111a:	aa 27       	eor	r26, r26
    111c:	bb 27       	eor	r27, r27
    111e:	57 01       	movw	r10, r14
    1120:	68 01       	movw	r12, r16
    1122:	a8 2a       	or	r10, r24
    1124:	b9 2a       	or	r11, r25
    1126:	ca 2a       	or	r12, r26
    1128:	db 2a       	or	r13, r27
    112a:	a2 16       	cp	r10, r18
    112c:	b3 06       	cpc	r11, r19
    112e:	c4 06       	cpc	r12, r20
    1130:	d5 06       	cpc	r13, r21
    1132:	90 f4       	brcc	.+36     	; 0x1158 <__umoddi3+0x286>
    1134:	a2 0c       	add	r10, r2
    1136:	b3 1c       	adc	r11, r3
    1138:	c4 1c       	adc	r12, r4
    113a:	d5 1c       	adc	r13, r5
    113c:	a2 14       	cp	r10, r2
    113e:	b3 04       	cpc	r11, r3
    1140:	c4 04       	cpc	r12, r4
    1142:	d5 04       	cpc	r13, r5
    1144:	48 f0       	brcs	.+18     	; 0x1158 <__umoddi3+0x286>
    1146:	a2 16       	cp	r10, r18
    1148:	b3 06       	cpc	r11, r19
    114a:	c4 06       	cpc	r12, r20
    114c:	d5 06       	cpc	r13, r21
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__umoddi3+0x286>
    1150:	a2 0c       	add	r10, r2
    1152:	b3 1c       	adc	r11, r3
    1154:	c4 1c       	adc	r12, r4
    1156:	d5 1c       	adc	r13, r5
    1158:	a2 1a       	sub	r10, r18
    115a:	b3 0a       	sbc	r11, r19
    115c:	c4 0a       	sbc	r12, r20
    115e:	d5 0a       	sbc	r13, r21
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    116c:	7b 01       	movw	r14, r22
    116e:	8c 01       	movw	r16, r24
    1170:	c6 01       	movw	r24, r12
    1172:	b5 01       	movw	r22, r10
    1174:	a4 01       	movw	r20, r8
    1176:	93 01       	movw	r18, r6
    1178:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	2c ad       	ldd	r18, Y+60	; 0x3c
    1184:	3d ad       	ldd	r19, Y+61	; 0x3d
    1186:	4e ad       	ldd	r20, Y+62	; 0x3e
    1188:	5f ad       	ldd	r21, Y+63	; 0x3f
    118a:	21 97       	sbiw	r28, 0x01	; 1
    118c:	ba c1       	rjmp	.+884    	; 0x1502 <__umoddi3+0x630>
    118e:	21 14       	cp	r2, r1
    1190:	31 04       	cpc	r3, r1
    1192:	41 04       	cpc	r4, r1
    1194:	51 04       	cpc	r5, r1
    1196:	71 f4       	brne	.+28     	; 0x11b4 <__umoddi3+0x2e2>
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    11ac:	c9 01       	movw	r24, r18
    11ae:	da 01       	movw	r26, r20
    11b0:	1c 01       	movw	r2, r24
    11b2:	2d 01       	movw	r4, r26
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 16       	cp	r2, r16
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	30 06       	cpc	r3, r16
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	40 06       	cpc	r4, r16
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	50 06       	cpc	r5, r16
    11c4:	88 f4       	brcc	.+34     	; 0x11e8 <__umoddi3+0x316>
    11c6:	1f ef       	ldi	r17, 0xFF	; 255
    11c8:	21 16       	cp	r2, r17
    11ca:	31 04       	cpc	r3, r1
    11cc:	41 04       	cpc	r4, r1
    11ce:	51 04       	cpc	r5, r1
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__umoddi3+0x30e>
    11d2:	30 f0       	brcs	.+12     	; 0x11e0 <__umoddi3+0x30e>
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	e6 2e       	mov	r14, r22
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <__umoddi3+0x33e>
    11e0:	ee 24       	eor	r14, r14
    11e2:	ff 24       	eor	r15, r15
    11e4:	87 01       	movw	r16, r14
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <__umoddi3+0x33e>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	24 16       	cp	r2, r20
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	34 06       	cpc	r3, r20
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	44 06       	cpc	r4, r20
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	54 06       	cpc	r5, r20
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__umoddi3+0x334>
    11fa:	58 e1       	ldi	r21, 0x18	; 24
    11fc:	e5 2e       	mov	r14, r21
    11fe:	f1 2c       	mov	r15, r1
    1200:	01 2d       	mov	r16, r1
    1202:	11 2d       	mov	r17, r1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <__umoddi3+0x33e>
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	e4 2e       	mov	r14, r20
    120a:	f1 2c       	mov	r15, r1
    120c:	01 2d       	mov	r16, r1
    120e:	11 2d       	mov	r17, r1
    1210:	d2 01       	movw	r26, r4
    1212:	c1 01       	movw	r24, r2
    1214:	0e 2c       	mov	r0, r14
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__umoddi3+0x34e>
    1218:	b6 95       	lsr	r27
    121a:	a7 95       	ror	r26
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__umoddi3+0x346>
    1224:	88 59       	subi	r24, 0x98	; 152
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	30 e2       	ldi	r19, 0x20	; 32
    122e:	a3 2e       	mov	r10, r19
    1230:	b1 2c       	mov	r11, r1
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	d6 01       	movw	r26, r12
    1238:	c5 01       	movw	r24, r10
    123a:	8e 19       	sub	r24, r14
    123c:	9f 09       	sbc	r25, r15
    123e:	a0 0b       	sbc	r26, r16
    1240:	b1 0b       	sbc	r27, r17
    1242:	7c 01       	movw	r14, r24
    1244:	8d 01       	movw	r16, r26
    1246:	e2 1a       	sub	r14, r18
    1248:	f1 08       	sbc	r15, r1
    124a:	01 09       	sbc	r16, r1
    124c:	11 09       	sbc	r17, r1
    124e:	e9 ae       	std	Y+57, r14	; 0x39
    1250:	fa ae       	std	Y+58, r15	; 0x3a
    1252:	0b af       	std	Y+59, r16	; 0x3b
    1254:	1c af       	std	Y+60, r17	; 0x3c
    1256:	e1 14       	cp	r14, r1
    1258:	f1 04       	cpc	r15, r1
    125a:	01 05       	cpc	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__umoddi3+0x39c>
    1260:	64 01       	movw	r12, r8
    1262:	53 01       	movw	r10, r6
    1264:	a2 18       	sub	r10, r2
    1266:	b3 08       	sbc	r11, r3
    1268:	c4 08       	sbc	r12, r4
    126a:	d5 08       	sbc	r13, r5
    126c:	e2 c0       	rjmp	.+452    	; 0x1432 <__umoddi3+0x560>
    126e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1270:	68 96       	adiw	r28, 0x18	; 24
    1272:	ff ae       	std	Y+63, r15	; 0x3f
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f 2c       	mov	r0, r15
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__umoddi3+0x3b0>
    127a:	22 0c       	add	r2, r2
    127c:	33 1c       	adc	r3, r3
    127e:	44 1c       	adc	r4, r4
    1280:	55 1c       	adc	r5, r5
    1282:	0a 94       	dec	r0
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__umoddi3+0x3a8>
    1286:	8a 2d       	mov	r24, r10
    1288:	8f 19       	sub	r24, r15
    128a:	64 01       	movw	r12, r8
    128c:	53 01       	movw	r10, r6
    128e:	08 2e       	mov	r0, r24
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__umoddi3+0x3c8>
    1292:	d6 94       	lsr	r13
    1294:	c7 94       	ror	r12
    1296:	b7 94       	ror	r11
    1298:	a7 94       	ror	r10
    129a:	0a 94       	dec	r0
    129c:	d2 f7       	brpl	.-12     	; 0x1292 <__umoddi3+0x3c0>
    129e:	a4 01       	movw	r20, r8
    12a0:	93 01       	movw	r18, r6
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__umoddi3+0x3da>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	fa 94       	dec	r15
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__umoddi3+0x3d2>
    12b0:	6c 96       	adiw	r28, 0x1c	; 28
    12b2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12b4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12b6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12b8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__umoddi3+0x3f4>
    12be:	96 94       	lsr	r9
    12c0:	87 94       	ror	r8
    12c2:	77 94       	ror	r7
    12c4:	67 94       	ror	r6
    12c6:	8a 95       	dec	r24
    12c8:	d2 f7       	brpl	.-12     	; 0x12be <__umoddi3+0x3ec>
    12ca:	84 01       	movw	r16, r8
    12cc:	73 01       	movw	r14, r6
    12ce:	e2 2a       	or	r14, r18
    12d0:	f3 2a       	or	r15, r19
    12d2:	04 2b       	or	r16, r20
    12d4:	15 2b       	or	r17, r21
    12d6:	ed a6       	std	Y+45, r14	; 0x2d
    12d8:	fe a6       	std	Y+46, r15	; 0x2e
    12da:	0f a7       	std	Y+47, r16	; 0x2f
    12dc:	18 ab       	std	Y+48, r17	; 0x30
    12de:	32 01       	movw	r6, r4
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	b2 01       	movw	r22, r4
    12e6:	a1 01       	movw	r20, r2
    12e8:	60 70       	andi	r22, 0x00	; 0
    12ea:	70 70       	andi	r23, 0x00	; 0
    12ec:	25 96       	adiw	r28, 0x05	; 5
    12ee:	4c af       	std	Y+60, r20	; 0x3c
    12f0:	5d af       	std	Y+61, r21	; 0x3d
    12f2:	6e af       	std	Y+62, r22	; 0x3e
    12f4:	7f af       	std	Y+63, r23	; 0x3f
    12f6:	25 97       	sbiw	r28, 0x05	; 5
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	c6 01       	movw	r24, r12
    130a:	b5 01       	movw	r22, r10
    130c:	a4 01       	movw	r20, r8
    130e:	93 01       	movw	r18, r6
    1310:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	25 96       	adiw	r28, 0x05	; 5
    131a:	2c ad       	ldd	r18, Y+60	; 0x3c
    131c:	3d ad       	ldd	r19, Y+61	; 0x3d
    131e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1320:	5f ad       	ldd	r21, Y+63	; 0x3f
    1322:	25 97       	sbiw	r28, 0x05	; 5
    1324:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	87 01       	movw	r16, r14
    132e:	ff 24       	eor	r15, r15
    1330:	ee 24       	eor	r14, r14
    1332:	ad a4       	ldd	r10, Y+45	; 0x2d
    1334:	be a4       	ldd	r11, Y+46	; 0x2e
    1336:	cf a4       	ldd	r12, Y+47	; 0x2f
    1338:	d8 a8       	ldd	r13, Y+48	; 0x30
    133a:	c6 01       	movw	r24, r12
    133c:	aa 27       	eor	r26, r26
    133e:	bb 27       	eor	r27, r27
    1340:	5c 01       	movw	r10, r24
    1342:	6d 01       	movw	r12, r26
    1344:	ae 28       	or	r10, r14
    1346:	bf 28       	or	r11, r15
    1348:	c0 2a       	or	r12, r16
    134a:	d1 2a       	or	r13, r17
    134c:	a2 16       	cp	r10, r18
    134e:	b3 06       	cpc	r11, r19
    1350:	c4 06       	cpc	r12, r20
    1352:	d5 06       	cpc	r13, r21
    1354:	90 f4       	brcc	.+36     	; 0x137a <__umoddi3+0x4a8>
    1356:	a2 0c       	add	r10, r2
    1358:	b3 1c       	adc	r11, r3
    135a:	c4 1c       	adc	r12, r4
    135c:	d5 1c       	adc	r13, r5
    135e:	a2 14       	cp	r10, r2
    1360:	b3 04       	cpc	r11, r3
    1362:	c4 04       	cpc	r12, r4
    1364:	d5 04       	cpc	r13, r5
    1366:	48 f0       	brcs	.+18     	; 0x137a <__umoddi3+0x4a8>
    1368:	a2 16       	cp	r10, r18
    136a:	b3 06       	cpc	r11, r19
    136c:	c4 06       	cpc	r12, r20
    136e:	d5 06       	cpc	r13, r21
    1370:	20 f4       	brcc	.+8      	; 0x137a <__umoddi3+0x4a8>
    1372:	a2 0c       	add	r10, r2
    1374:	b3 1c       	adc	r11, r3
    1376:	c4 1c       	adc	r12, r4
    1378:	d5 1c       	adc	r13, r5
    137a:	a2 1a       	sub	r10, r18
    137c:	b3 0a       	sbc	r11, r19
    137e:	c4 0a       	sbc	r12, r20
    1380:	d5 0a       	sbc	r13, r21
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    138e:	7b 01       	movw	r14, r22
    1390:	8c 01       	movw	r16, r24
    1392:	c6 01       	movw	r24, r12
    1394:	b5 01       	movw	r22, r10
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ac:	25 97       	sbiw	r28, 0x05	; 5
    13ae:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	87 01       	movw	r16, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	ee 24       	eor	r14, r14
    13bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13be:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c0:	af a5       	ldd	r26, Y+47	; 0x2f
    13c2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13c4:	a0 70       	andi	r26, 0x00	; 0
    13c6:	b0 70       	andi	r27, 0x00	; 0
    13c8:	57 01       	movw	r10, r14
    13ca:	68 01       	movw	r12, r16
    13cc:	a8 2a       	or	r10, r24
    13ce:	b9 2a       	or	r11, r25
    13d0:	ca 2a       	or	r12, r26
    13d2:	db 2a       	or	r13, r27
    13d4:	a2 16       	cp	r10, r18
    13d6:	b3 06       	cpc	r11, r19
    13d8:	c4 06       	cpc	r12, r20
    13da:	d5 06       	cpc	r13, r21
    13dc:	90 f4       	brcc	.+36     	; 0x1402 <__umoddi3+0x530>
    13de:	a2 0c       	add	r10, r2
    13e0:	b3 1c       	adc	r11, r3
    13e2:	c4 1c       	adc	r12, r4
    13e4:	d5 1c       	adc	r13, r5
    13e6:	a2 14       	cp	r10, r2
    13e8:	b3 04       	cpc	r11, r3
    13ea:	c4 04       	cpc	r12, r4
    13ec:	d5 04       	cpc	r13, r5
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <__umoddi3+0x530>
    13f0:	a2 16       	cp	r10, r18
    13f2:	b3 06       	cpc	r11, r19
    13f4:	c4 06       	cpc	r12, r20
    13f6:	d5 06       	cpc	r13, r21
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__umoddi3+0x530>
    13fa:	a2 0c       	add	r10, r2
    13fc:	b3 1c       	adc	r11, r3
    13fe:	c4 1c       	adc	r12, r4
    1400:	d5 1c       	adc	r13, r5
    1402:	6c 96       	adiw	r28, 0x1c	; 28
    1404:	ec ac       	ldd	r14, Y+60	; 0x3c
    1406:	fd ac       	ldd	r15, Y+61	; 0x3d
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	0f ac       	ldd	r0, Y+63	; 0x3f
    1412:	68 97       	sbiw	r28, 0x18	; 24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__umoddi3+0x54c>
    1416:	ee 0c       	add	r14, r14
    1418:	ff 1c       	adc	r15, r15
    141a:	00 1f       	adc	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <__umoddi3+0x544>
    1422:	e9 aa       	std	Y+49, r14	; 0x31
    1424:	fa aa       	std	Y+50, r15	; 0x32
    1426:	0b ab       	std	Y+51, r16	; 0x33
    1428:	1c ab       	std	Y+52, r17	; 0x34
    142a:	a2 1a       	sub	r10, r18
    142c:	b3 0a       	sbc	r11, r19
    142e:	c4 0a       	sbc	r12, r20
    1430:	d5 0a       	sbc	r13, r21
    1432:	32 01       	movw	r6, r4
    1434:	88 24       	eor	r8, r8
    1436:	99 24       	eor	r9, r9
    1438:	b2 01       	movw	r22, r4
    143a:	a1 01       	movw	r20, r2
    143c:	60 70       	andi	r22, 0x00	; 0
    143e:	70 70       	andi	r23, 0x00	; 0
    1440:	29 96       	adiw	r28, 0x09	; 9
    1442:	4c af       	std	Y+60, r20	; 0x3c
    1444:	5d af       	std	Y+61, r21	; 0x3d
    1446:	6e af       	std	Y+62, r22	; 0x3e
    1448:	7f af       	std	Y+63, r23	; 0x3f
    144a:	29 97       	sbiw	r28, 0x09	; 9
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	c6 01       	movw	r24, r12
    145e:	b5 01       	movw	r22, r10
    1460:	a4 01       	movw	r20, r8
    1462:	93 01       	movw	r18, r6
    1464:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	29 96       	adiw	r28, 0x09	; 9
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	29 97       	sbiw	r28, 0x09	; 9
    1478:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a8       	ldd	r10, Y+49	; 0x31
    1488:	ba a8       	ldd	r11, Y+50	; 0x32
    148a:	cb a8       	ldd	r12, Y+51	; 0x33
    148c:	dc a8       	ldd	r13, Y+52	; 0x34
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	57 01       	movw	r10, r14
    1496:	68 01       	movw	r12, r16
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	90 f4       	brcc	.+36     	; 0x14ce <__umoddi3+0x5fc>
    14aa:	a2 0c       	add	r10, r2
    14ac:	b3 1c       	adc	r11, r3
    14ae:	c4 1c       	adc	r12, r4
    14b0:	d5 1c       	adc	r13, r5
    14b2:	a2 14       	cp	r10, r2
    14b4:	b3 04       	cpc	r11, r3
    14b6:	c4 04       	cpc	r12, r4
    14b8:	d5 04       	cpc	r13, r5
    14ba:	48 f0       	brcs	.+18     	; 0x14ce <__umoddi3+0x5fc>
    14bc:	a2 16       	cp	r10, r18
    14be:	b3 06       	cpc	r11, r19
    14c0:	c4 06       	cpc	r12, r20
    14c2:	d5 06       	cpc	r13, r21
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__umoddi3+0x5fc>
    14c6:	a2 0c       	add	r10, r2
    14c8:	b3 1c       	adc	r11, r3
    14ca:	c4 1c       	adc	r12, r4
    14cc:	d5 1c       	adc	r13, r5
    14ce:	a2 1a       	sub	r10, r18
    14d0:	b3 0a       	sbc	r11, r19
    14d2:	c4 0a       	sbc	r12, r20
    14d4:	d5 0a       	sbc	r13, r21
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    14e2:	7b 01       	movw	r14, r22
    14e4:	8c 01       	movw	r16, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	a4 01       	movw	r20, r8
    14ec:	93 01       	movw	r18, r6
    14ee:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	87 01       	movw	r16, r14
    150c:	ff 24       	eor	r15, r15
    150e:	ee 24       	eor	r14, r14
    1510:	89 a9       	ldd	r24, Y+49	; 0x31
    1512:	9a a9       	ldd	r25, Y+50	; 0x32
    1514:	ab a9       	ldd	r26, Y+51	; 0x33
    1516:	bc a9       	ldd	r27, Y+52	; 0x34
    1518:	a0 70       	andi	r26, 0x00	; 0
    151a:	b0 70       	andi	r27, 0x00	; 0
    151c:	e8 2a       	or	r14, r24
    151e:	f9 2a       	or	r15, r25
    1520:	0a 2b       	or	r16, r26
    1522:	1b 2b       	or	r17, r27
    1524:	e2 16       	cp	r14, r18
    1526:	f3 06       	cpc	r15, r19
    1528:	04 07       	cpc	r16, r20
    152a:	15 07       	cpc	r17, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x680>
    152e:	e2 0c       	add	r14, r2
    1530:	f3 1c       	adc	r15, r3
    1532:	04 1d       	adc	r16, r4
    1534:	15 1d       	adc	r17, r5
    1536:	e2 14       	cp	r14, r2
    1538:	f3 04       	cpc	r15, r3
    153a:	04 05       	cpc	r16, r4
    153c:	15 05       	cpc	r17, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x680>
    1540:	e2 16       	cp	r14, r18
    1542:	f3 06       	cpc	r15, r19
    1544:	04 07       	cpc	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x680>
    154a:	e2 0c       	add	r14, r2
    154c:	f3 1c       	adc	r15, r3
    154e:	04 1d       	adc	r16, r4
    1550:	15 1d       	adc	r17, r5
    1552:	e2 1a       	sub	r14, r18
    1554:	f3 0a       	sbc	r15, r19
    1556:	04 0b       	sbc	r16, r20
    1558:	15 0b       	sbc	r17, r21
    155a:	d8 01       	movw	r26, r16
    155c:	c7 01       	movw	r24, r14
    155e:	09 ac       	ldd	r0, Y+57	; 0x39
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__umoddi3+0x698>
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__umoddi3+0x690>
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	ab 8b       	std	Y+19, r26	; 0x13
    1574:	bc 8b       	std	Y+20, r27	; 0x14
    1576:	1d 8a       	std	Y+21, r1	; 0x15
    1578:	1e 8a       	std	Y+22, r1	; 0x16
    157a:	1f 8a       	std	Y+23, r1	; 0x17
    157c:	18 8e       	std	Y+24, r1	; 0x18
    157e:	28 2f       	mov	r18, r24
    1580:	3a 89       	ldd	r19, Y+18	; 0x12
    1582:	4b 89       	ldd	r20, Y+19	; 0x13
    1584:	5c 89       	ldd	r21, Y+20	; 0x14
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	0c c3       	rjmp	.+1560   	; 0x1ba2 <__umoddi3+0xcd0>
    158a:	6a 14       	cp	r6, r10
    158c:	7b 04       	cpc	r7, r11
    158e:	8c 04       	cpc	r8, r12
    1590:	9d 04       	cpc	r9, r13
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__umoddi3+0x6c4>
    1594:	09 c3       	rjmp	.+1554   	; 0x1ba8 <__umoddi3+0xcd6>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	a0 16       	cp	r10, r16
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	b0 06       	cpc	r11, r16
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	c0 06       	cpc	r12, r16
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	d0 06       	cpc	r13, r16
    15a6:	88 f4       	brcc	.+34     	; 0x15ca <__umoddi3+0x6f8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	a1 16       	cp	r10, r17
    15ac:	b1 04       	cpc	r11, r1
    15ae:	c1 04       	cpc	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__umoddi3+0x6f0>
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <__umoddi3+0x6f0>
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	e2 2e       	mov	r14, r18
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <__umoddi3+0x720>
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <__umoddi3+0x720>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	a4 16       	cp	r10, r20
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	b4 06       	cpc	r11, r20
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	c4 06       	cpc	r12, r20
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	d4 06       	cpc	r13, r20
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__umoddi3+0x716>
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	e9 2e       	mov	r14, r25
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 2d       	mov	r16, r1
    15e4:	11 2d       	mov	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__umoddi3+0x720>
    15e8:	80 e1       	ldi	r24, 0x10	; 16
    15ea:	e8 2e       	mov	r14, r24
    15ec:	f1 2c       	mov	r15, r1
    15ee:	01 2d       	mov	r16, r1
    15f0:	11 2d       	mov	r17, r1
    15f2:	d6 01       	movw	r26, r12
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 2c       	mov	r0, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__umoddi3+0x730>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	0a 94       	dec	r0
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__umoddi3+0x728>
    1606:	88 59       	subi	r24, 0x98	; 152
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	a0 0b       	sbc	r26, r16
    161c:	b1 0b       	sbc	r27, r17
    161e:	82 1b       	sub	r24, r18
    1620:	91 09       	sbc	r25, r1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <__umoddi3+0x75e>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <__umoddi3+0x7fc>
    1630:	a6 14       	cp	r10, r6
    1632:	b7 04       	cpc	r11, r7
    1634:	c8 04       	cpc	r12, r8
    1636:	d9 04       	cpc	r13, r9
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__umoddi3+0x77e>
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	ec ac       	ldd	r14, Y+60	; 0x3c
    163e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	1f ad       	ldd	r17, Y+63	; 0x3f
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	e2 14       	cp	r14, r2
    1648:	f3 04       	cpc	r15, r3
    164a:	04 05       	cpc	r16, r4
    164c:	15 05       	cpc	r17, r5
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__umoddi3+0x7d8>
    1650:	6c 96       	adiw	r28, 0x1c	; 28
    1652:	ec ac       	ldd	r14, Y+60	; 0x3c
    1654:	fd ac       	ldd	r15, Y+61	; 0x3d
    1656:	0e ad       	ldd	r16, Y+62	; 0x3e
    1658:	1f ad       	ldd	r17, Y+63	; 0x3f
    165a:	6c 97       	sbiw	r28, 0x1c	; 28
    165c:	e2 18       	sub	r14, r2
    165e:	f3 08       	sbc	r15, r3
    1660:	04 09       	sbc	r16, r4
    1662:	15 09       	sbc	r17, r5
    1664:	a4 01       	movw	r20, r8
    1666:	93 01       	movw	r18, r6
    1668:	2a 19       	sub	r18, r10
    166a:	3b 09       	sbc	r19, r11
    166c:	4c 09       	sbc	r20, r12
    166e:	5d 09       	sbc	r21, r13
    1670:	aa 24       	eor	r10, r10
    1672:	bb 24       	eor	r11, r11
    1674:	65 01       	movw	r12, r10
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	6c ad       	ldd	r22, Y+60	; 0x3c
    167a:	7d ad       	ldd	r23, Y+61	; 0x3d
    167c:	8e ad       	ldd	r24, Y+62	; 0x3e
    167e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	6e 15       	cp	r22, r14
    1684:	7f 05       	cpc	r23, r15
    1686:	80 07       	cpc	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	28 f4       	brcc	.+10     	; 0x1696 <__umoddi3+0x7c4>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	ab 2e       	mov	r10, r27
    1690:	b1 2c       	mov	r11, r1
    1692:	c1 2c       	mov	r12, r1
    1694:	d1 2c       	mov	r13, r1
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	8a 19       	sub	r24, r10
    169c:	9b 09       	sbc	r25, r11
    169e:	ac 09       	sbc	r26, r12
    16a0:	bd 09       	sbc	r27, r13
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
    16aa:	e9 8a       	std	Y+17, r14	; 0x11
    16ac:	fa 8a       	std	Y+18, r15	; 0x12
    16ae:	0b 8b       	std	Y+19, r16	; 0x13
    16b0:	1c 8b       	std	Y+20, r17	; 0x14
    16b2:	6d a8       	ldd	r6, Y+53	; 0x35
    16b4:	7e a8       	ldd	r7, Y+54	; 0x36
    16b6:	8f a8       	ldd	r8, Y+55	; 0x37
    16b8:	98 ac       	ldd	r9, Y+56	; 0x38
    16ba:	6d 8a       	std	Y+21, r6	; 0x15
    16bc:	7e 8a       	std	Y+22, r7	; 0x16
    16be:	8f 8a       	std	Y+23, r8	; 0x17
    16c0:	98 8e       	std	Y+24, r9	; 0x18
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3a 89       	ldd	r19, Y+18	; 0x12
    16c6:	4b 89       	ldd	r20, Y+19	; 0x13
    16c8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	6a c2       	rjmp	.+1236   	; 0x1ba2 <__umoddi3+0xcd0>
    16ce:	67 96       	adiw	r28, 0x17	; 23
    16d0:	8f af       	std	Y+63, r24	; 0x3f
    16d2:	67 97       	sbiw	r28, 0x17	; 23
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	08 2e       	mov	r0, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__umoddi3+0x812>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	0a 94       	dec	r0
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__umoddi3+0x80a>
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	aa 2e       	mov	r10, r26
    16ec:	a8 1a       	sub	r10, r24
    16ee:	66 96       	adiw	r28, 0x16	; 22
    16f0:	af ae       	std	Y+63, r10	; 0x3f
    16f2:	66 97       	sbiw	r28, 0x16	; 22
    16f4:	d2 01       	movw	r26, r4
    16f6:	c1 01       	movw	r24, r2
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__umoddi3+0x830>
    16fa:	b6 95       	lsr	r27
    16fc:	a7 95       	ror	r26
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	aa 94       	dec	r10
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__umoddi3+0x828>
    1706:	6c 01       	movw	r12, r24
    1708:	7d 01       	movw	r14, r26
    170a:	c2 2a       	or	r12, r18
    170c:	d3 2a       	or	r13, r19
    170e:	e4 2a       	or	r14, r20
    1710:	f5 2a       	or	r15, r21
    1712:	c9 a6       	std	Y+41, r12	; 0x29
    1714:	da a6       	std	Y+42, r13	; 0x2a
    1716:	eb a6       	std	Y+43, r14	; 0x2b
    1718:	fc a6       	std	Y+44, r15	; 0x2c
    171a:	82 01       	movw	r16, r4
    171c:	71 01       	movw	r14, r2
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	67 97       	sbiw	r28, 0x17	; 23
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x85c>
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x854>
    1732:	ed a2       	std	Y+37, r14	; 0x25
    1734:	fe a2       	std	Y+38, r15	; 0x26
    1736:	0f a3       	std	Y+39, r16	; 0x27
    1738:	18 a7       	std	Y+40, r17	; 0x28
    173a:	64 01       	movw	r12, r8
    173c:	53 01       	movw	r10, r6
    173e:	66 96       	adiw	r28, 0x16	; 22
    1740:	0f ac       	ldd	r0, Y+63	; 0x3f
    1742:	66 97       	sbiw	r28, 0x16	; 22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__umoddi3+0x87c>
    1746:	d6 94       	lsr	r13
    1748:	c7 94       	ror	r12
    174a:	b7 94       	ror	r11
    174c:	a7 94       	ror	r10
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__umoddi3+0x874>
    1752:	a4 01       	movw	r20, r8
    1754:	93 01       	movw	r18, r6
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f ac       	ldd	r0, Y+63	; 0x3f
    175a:	67 97       	sbiw	r28, 0x17	; 23
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__umoddi3+0x894>
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	0a 94       	dec	r0
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__umoddi3+0x88c>
    176a:	6c 96       	adiw	r28, 0x1c	; 28
    176c:	8c ad       	ldd	r24, Y+60	; 0x3c
    176e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1770:	ae ad       	ldd	r26, Y+62	; 0x3e
    1772:	bf ad       	ldd	r27, Y+63	; 0x3f
    1774:	6c 97       	sbiw	r28, 0x1c	; 28
    1776:	66 96       	adiw	r28, 0x16	; 22
    1778:	0f ac       	ldd	r0, Y+63	; 0x3f
    177a:	66 97       	sbiw	r28, 0x16	; 22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <__umoddi3+0x8b4>
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	0a 94       	dec	r0
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__umoddi3+0x8ac>
    178a:	3c 01       	movw	r6, r24
    178c:	4d 01       	movw	r8, r26
    178e:	62 2a       	or	r6, r18
    1790:	73 2a       	or	r7, r19
    1792:	84 2a       	or	r8, r20
    1794:	95 2a       	or	r9, r21
    1796:	69 a2       	std	Y+33, r6	; 0x21
    1798:	7a a2       	std	Y+34, r7	; 0x22
    179a:	8b a2       	std	Y+35, r8	; 0x23
    179c:	9c a2       	std	Y+36, r9	; 0x24
    179e:	6c 96       	adiw	r28, 0x1c	; 28
    17a0:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a2:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	67 96       	adiw	r28, 0x17	; 23
    17ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ae:	67 97       	sbiw	r28, 0x17	; 23
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__umoddi3+0x8e8>
    17b2:	ee 0c       	add	r14, r14
    17b4:	ff 1c       	adc	r15, r15
    17b6:	00 1f       	adc	r16, r16
    17b8:	11 1f       	adc	r17, r17
    17ba:	0a 94       	dec	r0
    17bc:	d2 f7       	brpl	.-12     	; 0x17b2 <__umoddi3+0x8e0>
    17be:	ed 8e       	std	Y+29, r14	; 0x1d
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	0f 8f       	std	Y+31, r16	; 0x1f
    17c4:	18 a3       	std	Y+32, r17	; 0x20
    17c6:	49 a5       	ldd	r20, Y+41	; 0x29
    17c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    17cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ce:	3b 01       	movw	r6, r22
    17d0:	88 24       	eor	r8, r8
    17d2:	99 24       	eor	r9, r9
    17d4:	60 70       	andi	r22, 0x00	; 0
    17d6:	70 70       	andi	r23, 0x00	; 0
    17d8:	2d 96       	adiw	r28, 0x0d	; 13
    17da:	4c af       	std	Y+60, r20	; 0x3c
    17dc:	5d af       	std	Y+61, r21	; 0x3d
    17de:	6e af       	std	Y+62, r22	; 0x3e
    17e0:	7f af       	std	Y+63, r23	; 0x3f
    17e2:	2d 97       	sbiw	r28, 0x0d	; 13
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	c6 01       	movw	r24, r12
    17f6:	b5 01       	movw	r22, r10
    17f8:	a4 01       	movw	r20, r8
    17fa:	93 01       	movw	r18, r6
    17fc:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    1800:	c9 01       	movw	r24, r18
    1802:	da 01       	movw	r26, r20
    1804:	1c 01       	movw	r2, r24
    1806:	2d 01       	movw	r4, r26
    1808:	c2 01       	movw	r24, r4
    180a:	b1 01       	movw	r22, r2
    180c:	2d 96       	adiw	r28, 0x0d	; 13
    180e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1810:	3d ad       	ldd	r19, Y+61	; 0x3d
    1812:	4e ad       	ldd	r20, Y+62	; 0x3e
    1814:	5f ad       	ldd	r21, Y+63	; 0x3f
    1816:	2d 97       	sbiw	r28, 0x0d	; 13
    1818:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	87 01       	movw	r16, r14
    1822:	ff 24       	eor	r15, r15
    1824:	ee 24       	eor	r14, r14
    1826:	a9 a0       	ldd	r10, Y+33	; 0x21
    1828:	ba a0       	ldd	r11, Y+34	; 0x22
    182a:	cb a0       	ldd	r12, Y+35	; 0x23
    182c:	dc a0       	ldd	r13, Y+36	; 0x24
    182e:	c6 01       	movw	r24, r12
    1830:	aa 27       	eor	r26, r26
    1832:	bb 27       	eor	r27, r27
    1834:	57 01       	movw	r10, r14
    1836:	68 01       	movw	r12, r16
    1838:	a8 2a       	or	r10, r24
    183a:	b9 2a       	or	r11, r25
    183c:	ca 2a       	or	r12, r26
    183e:	db 2a       	or	r13, r27
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	00 f5       	brcc	.+64     	; 0x188a <__umoddi3+0x9b8>
    184a:	08 94       	sec
    184c:	21 08       	sbc	r2, r1
    184e:	31 08       	sbc	r3, r1
    1850:	41 08       	sbc	r4, r1
    1852:	51 08       	sbc	r5, r1
    1854:	e9 a4       	ldd	r14, Y+41	; 0x29
    1856:	fa a4       	ldd	r15, Y+42	; 0x2a
    1858:	0b a5       	ldd	r16, Y+43	; 0x2b
    185a:	1c a5       	ldd	r17, Y+44	; 0x2c
    185c:	ae 0c       	add	r10, r14
    185e:	bf 1c       	adc	r11, r15
    1860:	c0 1e       	adc	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	ae 14       	cp	r10, r14
    1866:	bf 04       	cpc	r11, r15
    1868:	c0 06       	cpc	r12, r16
    186a:	d1 06       	cpc	r13, r17
    186c:	70 f0       	brcs	.+28     	; 0x188a <__umoddi3+0x9b8>
    186e:	a2 16       	cp	r10, r18
    1870:	b3 06       	cpc	r11, r19
    1872:	c4 06       	cpc	r12, r20
    1874:	d5 06       	cpc	r13, r21
    1876:	48 f4       	brcc	.+18     	; 0x188a <__umoddi3+0x9b8>
    1878:	08 94       	sec
    187a:	21 08       	sbc	r2, r1
    187c:	31 08       	sbc	r3, r1
    187e:	41 08       	sbc	r4, r1
    1880:	51 08       	sbc	r5, r1
    1882:	ae 0c       	add	r10, r14
    1884:	bf 1c       	adc	r11, r15
    1886:	c0 1e       	adc	r12, r16
    1888:	d1 1e       	adc	r13, r17
    188a:	a2 1a       	sub	r10, r18
    188c:	b3 0a       	sbc	r11, r19
    188e:	c4 0a       	sbc	r12, r20
    1890:	d5 0a       	sbc	r13, r21
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	c6 01       	movw	r24, r12
    18a4:	b5 01       	movw	r22, r10
    18a6:	a4 01       	movw	r20, r8
    18a8:	93 01       	movw	r18, r6
    18aa:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <__udivmodsi4>
    18ae:	c9 01       	movw	r24, r18
    18b0:	da 01       	movw	r26, r20
    18b2:	3c 01       	movw	r6, r24
    18b4:	4d 01       	movw	r8, r26
    18b6:	c4 01       	movw	r24, r8
    18b8:	b3 01       	movw	r22, r6
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    18be:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c4:	2d 97       	sbiw	r28, 0x0d	; 13
    18c6:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	87 01       	movw	r16, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	ee 24       	eor	r14, r14
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	ab a1       	ldd	r26, Y+35	; 0x23
    18da:	bc a1       	ldd	r27, Y+36	; 0x24
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	57 01       	movw	r10, r14
    18e2:	68 01       	movw	r12, r16
    18e4:	a8 2a       	or	r10, r24
    18e6:	b9 2a       	or	r11, r25
    18e8:	ca 2a       	or	r12, r26
    18ea:	db 2a       	or	r13, r27
    18ec:	a2 16       	cp	r10, r18
    18ee:	b3 06       	cpc	r11, r19
    18f0:	c4 06       	cpc	r12, r20
    18f2:	d5 06       	cpc	r13, r21
    18f4:	00 f5       	brcc	.+64     	; 0x1936 <__umoddi3+0xa64>
    18f6:	08 94       	sec
    18f8:	61 08       	sbc	r6, r1
    18fa:	71 08       	sbc	r7, r1
    18fc:	81 08       	sbc	r8, r1
    18fe:	91 08       	sbc	r9, r1
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	a6 0e       	add	r10, r22
    190a:	b7 1e       	adc	r11, r23
    190c:	c8 1e       	adc	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	a6 16       	cp	r10, r22
    1912:	b7 06       	cpc	r11, r23
    1914:	c8 06       	cpc	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__umoddi3+0xa64>
    191a:	a2 16       	cp	r10, r18
    191c:	b3 06       	cpc	r11, r19
    191e:	c4 06       	cpc	r12, r20
    1920:	d5 06       	cpc	r13, r21
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__umoddi3+0xa64>
    1924:	08 94       	sec
    1926:	61 08       	sbc	r6, r1
    1928:	71 08       	sbc	r7, r1
    192a:	81 08       	sbc	r8, r1
    192c:	91 08       	sbc	r9, r1
    192e:	a6 0e       	add	r10, r22
    1930:	b7 1e       	adc	r11, r23
    1932:	c8 1e       	adc	r12, r24
    1934:	d9 1e       	adc	r13, r25
    1936:	d6 01       	movw	r26, r12
    1938:	c5 01       	movw	r24, r10
    193a:	82 1b       	sub	r24, r18
    193c:	93 0b       	sbc	r25, r19
    193e:	a4 0b       	sbc	r26, r20
    1940:	b5 0b       	sbc	r27, r21
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
    194a:	d1 01       	movw	r26, r2
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	84 01       	movw	r16, r8
    1952:	73 01       	movw	r14, r6
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	a4 2e       	mov	r10, r20
    1960:	4f ef       	ldi	r20, 0xFF	; 255
    1962:	b4 2e       	mov	r11, r20
    1964:	c1 2c       	mov	r12, r1
    1966:	d1 2c       	mov	r13, r1
    1968:	ae 20       	and	r10, r14
    196a:	bf 20       	and	r11, r15
    196c:	c0 22       	and	r12, r16
    196e:	d1 22       	and	r13, r17
    1970:	78 01       	movw	r14, r16
    1972:	00 27       	eor	r16, r16
    1974:	11 27       	eor	r17, r17
    1976:	6d a0       	ldd	r6, Y+37	; 0x25
    1978:	7e a0       	ldd	r7, Y+38	; 0x26
    197a:	8f a0       	ldd	r8, Y+39	; 0x27
    197c:	98 a4       	ldd	r9, Y+40	; 0x28
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	64 22       	and	r6, r20
    1988:	75 22       	and	r7, r21
    198a:	86 22       	and	r8, r22
    198c:	97 22       	and	r9, r23
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	af a1       	ldd	r26, Y+39	; 0x27
    1994:	b8 a5       	ldd	r27, Y+40	; 0x28
    1996:	bd 01       	movw	r22, r26
    1998:	88 27       	eor	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	65 96       	adiw	r28, 0x15	; 21
    199e:	6c af       	std	Y+60, r22	; 0x3c
    19a0:	7d af       	std	Y+61, r23	; 0x3d
    19a2:	8e af       	std	Y+62, r24	; 0x3e
    19a4:	9f af       	std	Y+63, r25	; 0x3f
    19a6:	65 97       	sbiw	r28, 0x15	; 21
    19a8:	c6 01       	movw	r24, r12
    19aa:	b5 01       	movw	r22, r10
    19ac:	a4 01       	movw	r20, r8
    19ae:	93 01       	movw	r18, r6
    19b0:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c af       	std	Y+60, r22	; 0x3c
    19b8:	7d af       	std	Y+61, r23	; 0x3d
    19ba:	8e af       	std	Y+62, r24	; 0x3e
    19bc:	9f af       	std	Y+63, r25	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c6 01       	movw	r24, r12
    19c2:	b5 01       	movw	r22, r10
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    19cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ce:	65 97       	sbiw	r28, 0x15	; 21
    19d0:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    19d4:	1b 01       	movw	r2, r22
    19d6:	2c 01       	movw	r4, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	a4 01       	movw	r20, r8
    19de:	93 01       	movw	r18, r6
    19e0:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    19e4:	5b 01       	movw	r10, r22
    19e6:	6c 01       	movw	r12, r24
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	65 96       	adiw	r28, 0x15	; 21
    19ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    19f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f6:	65 97       	sbiw	r28, 0x15	; 21
    19f8:	0e 94 b3 31 	call	0x6366	; 0x6366 <__mulsi3>
    19fc:	7b 01       	movw	r14, r22
    19fe:	8c 01       	movw	r16, r24
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	22 0d       	add	r18, r2
    1a06:	33 1d       	adc	r19, r3
    1a08:	44 1d       	adc	r20, r4
    1a0a:	55 1d       	adc	r21, r5
    1a0c:	61 96       	adiw	r28, 0x11	; 17
    1a0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	c4 01       	movw	r24, r8
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	28 0f       	add	r18, r24
    1a20:	39 1f       	adc	r19, r25
    1a22:	4a 1f       	adc	r20, r26
    1a24:	5b 1f       	adc	r21, r27
    1a26:	2a 15       	cp	r18, r10
    1a28:	3b 05       	cpc	r19, r11
    1a2a:	4c 05       	cpc	r20, r12
    1a2c:	5d 05       	cpc	r21, r13
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__umoddi3+0xb70>
    1a30:	81 2c       	mov	r8, r1
    1a32:	91 2c       	mov	r9, r1
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	ae 2e       	mov	r10, r30
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	e8 0c       	add	r14, r8
    1a3c:	f9 1c       	adc	r15, r9
    1a3e:	0a 1d       	adc	r16, r10
    1a40:	1b 1d       	adc	r17, r11
    1a42:	ca 01       	movw	r24, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
    1a48:	57 01       	movw	r10, r14
    1a4a:	68 01       	movw	r12, r16
    1a4c:	a8 0e       	add	r10, r24
    1a4e:	b9 1e       	adc	r11, r25
    1a50:	ca 1e       	adc	r12, r26
    1a52:	db 1e       	adc	r13, r27
    1a54:	a9 01       	movw	r20, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	22 27       	eor	r18, r18
    1a5a:	61 96       	adiw	r28, 0x11	; 17
    1a5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a64:	61 97       	sbiw	r28, 0x11	; 17
    1a66:	a0 70       	andi	r26, 0x00	; 0
    1a68:	b0 70       	andi	r27, 0x00	; 0
    1a6a:	28 0f       	add	r18, r24
    1a6c:	39 1f       	adc	r19, r25
    1a6e:	4a 1f       	adc	r20, r26
    1a70:	5b 1f       	adc	r21, r27
    1a72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a76:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a78:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	70 f0       	brcs	.+28     	; 0x1aa0 <__umoddi3+0xbce>
    1a84:	ae 14       	cp	r10, r14
    1a86:	bf 04       	cpc	r11, r15
    1a88:	c0 06       	cpc	r12, r16
    1a8a:	d1 06       	cpc	r13, r17
    1a8c:	69 f5       	brne	.+90     	; 0x1ae8 <__umoddi3+0xc16>
    1a8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	20 f5       	brcc	.+72     	; 0x1ae8 <__umoddi3+0xc16>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	6d a0       	ldd	r6, Y+37	; 0x25
    1aa6:	7e a0       	ldd	r7, Y+38	; 0x26
    1aa8:	8f a0       	ldd	r8, Y+39	; 0x27
    1aaa:	98 a4       	ldd	r9, Y+40	; 0x28
    1aac:	86 19       	sub	r24, r6
    1aae:	97 09       	sbc	r25, r7
    1ab0:	a8 09       	sbc	r26, r8
    1ab2:	b9 09       	sbc	r27, r9
    1ab4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ab6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1ab8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aba:	1c a5       	ldd	r17, Y+44	; 0x2c
    1abc:	ae 18       	sub	r10, r14
    1abe:	bf 08       	sbc	r11, r15
    1ac0:	c0 0a       	sbc	r12, r16
    1ac2:	d1 0a       	sbc	r13, r17
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	87 01       	movw	r16, r14
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	4a 07       	cpc	r20, r26
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__umoddi3+0xc0c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	e2 2e       	mov	r14, r18
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	01 2d       	mov	r16, r1
    1adc:	11 2d       	mov	r17, r1
    1ade:	ae 18       	sub	r10, r14
    1ae0:	bf 08       	sbc	r11, r15
    1ae2:	c0 0a       	sbc	r12, r16
    1ae4:	d1 0a       	sbc	r13, r17
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__umoddi3+0xc1a>
    1ae8:	da 01       	movw	r26, r20
    1aea:	c9 01       	movw	r24, r18
    1aec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1aee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1af0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1af2:	98 a0       	ldd	r9, Y+32	; 0x20
    1af4:	68 1a       	sub	r6, r24
    1af6:	79 0a       	sbc	r7, r25
    1af8:	8a 0a       	sbc	r8, r26
    1afa:	9b 0a       	sbc	r9, r27
    1afc:	49 8d       	ldd	r20, Y+25	; 0x19
    1afe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b04:	4a 19       	sub	r20, r10
    1b06:	5b 09       	sbc	r21, r11
    1b08:	6c 09       	sbc	r22, r12
    1b0a:	7d 09       	sbc	r23, r13
    1b0c:	5a 01       	movw	r10, r20
    1b0e:	6b 01       	movw	r12, r22
    1b10:	22 24       	eor	r2, r2
    1b12:	33 24       	eor	r3, r3
    1b14:	21 01       	movw	r4, r2
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	66 15       	cp	r22, r6
    1b20:	77 05       	cpc	r23, r7
    1b22:	88 05       	cpc	r24, r8
    1b24:	99 05       	cpc	r25, r9
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__umoddi3+0xc60>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	28 2e       	mov	r2, r24
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	41 2c       	mov	r4, r1
    1b30:	51 2c       	mov	r5, r1
    1b32:	86 01       	movw	r16, r12
    1b34:	75 01       	movw	r14, r10
    1b36:	e2 18       	sub	r14, r2
    1b38:	f3 08       	sbc	r15, r3
    1b3a:	04 09       	sbc	r16, r4
    1b3c:	15 09       	sbc	r17, r5
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__umoddi3+0xc80>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__umoddi3+0xc78>
    1b56:	d4 01       	movw	r26, r8
    1b58:	c3 01       	movw	r24, r6
    1b5a:	67 96       	adiw	r28, 0x17	; 23
    1b5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5e:	67 97       	sbiw	r28, 0x17	; 23
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__umoddi3+0xc98>
    1b62:	b6 95       	lsr	r27
    1b64:	a7 95       	ror	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	0a 94       	dec	r0
    1b6c:	d2 f7       	brpl	.-12     	; 0x1b62 <__umoddi3+0xc90>
    1b6e:	28 2b       	or	r18, r24
    1b70:	39 2b       	or	r19, r25
    1b72:	4a 2b       	or	r20, r26
    1b74:	5b 2b       	or	r21, r27
    1b76:	29 8b       	std	Y+17, r18	; 0x11
    1b78:	3a 8b       	std	Y+18, r19	; 0x12
    1b7a:	4b 8b       	std	Y+19, r20	; 0x13
    1b7c:	5c 8b       	std	Y+20, r21	; 0x14
    1b7e:	67 96       	adiw	r28, 0x17	; 23
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	67 97       	sbiw	r28, 0x17	; 23
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__umoddi3+0xcbc>
    1b86:	16 95       	lsr	r17
    1b88:	07 95       	ror	r16
    1b8a:	f7 94       	ror	r15
    1b8c:	e7 94       	ror	r14
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__umoddi3+0xcb4>
    1b92:	ed 8a       	std	Y+21, r14	; 0x15
    1b94:	fe 8a       	std	Y+22, r15	; 0x16
    1b96:	0f 8b       	std	Y+23, r16	; 0x17
    1b98:	18 8f       	std	Y+24, r17	; 0x18
    1b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba0:	6e 2d       	mov	r22, r14
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	c5 5a       	subi	r28, 0xA5	; 165
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	e2 e1       	ldi	r30, 0x12	; 18
    1bae:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__epilogue_restores__>

00001bb2 <_fpadd_parts>:
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ef ed       	ldi	r30, 0xDF	; 223
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	0c 94 f4 31 	jmp	0x63e8	; 0x63e8 <__prologue_saves__>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	fa 01       	movw	r30, r20
    1bc4:	9c 91       	ld	r25, X
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_fpadd_parts+0x1a>
    1bca:	39 c1       	rjmp	.+626    	; 0x1e3e <_fpadd_parts+0x28c>
    1bcc:	eb 01       	movw	r28, r22
    1bce:	88 81       	ld	r24, Y
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_fpadd_parts+0x24>
    1bd4:	33 c1       	rjmp	.+614    	; 0x1e3c <_fpadd_parts+0x28a>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <_fpadd_parts+0x42>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_fpadd_parts+0x2e>
    1bde:	2f c1       	rjmp	.+606    	; 0x1e3e <_fpadd_parts+0x28c>
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	9c 91       	ld	r25, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_fpadd_parts+0x3c>
    1bec:	28 c1       	rjmp	.+592    	; 0x1e3e <_fpadd_parts+0x28c>
    1bee:	a0 e6       	ldi	r26, 0x60	; 96
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	25 c1       	rjmp	.+586    	; 0x1e3e <_fpadd_parts+0x28c>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <_fpadd_parts+0x48>
    1bf8:	21 c1       	rjmp	.+578    	; 0x1e3c <_fpadd_parts+0x28a>
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	a9 f4       	brne	.+42     	; 0x1c28 <_fpadd_parts+0x76>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x52>
    1c02:	1d c1       	rjmp	.+570    	; 0x1e3e <_fpadd_parts+0x28c>
    1c04:	9a 01       	movw	r18, r20
    1c06:	ad 01       	movw	r20, r26
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	09 90       	ld	r0, Y+
    1c0e:	ae 01       	movw	r20, r28
    1c10:	e9 01       	movw	r28, r18
    1c12:	09 92       	st	Y+, r0
    1c14:	9e 01       	movw	r18, r28
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <_fpadd_parts+0x58>
    1c1a:	e2 01       	movw	r28, r4
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	9c 91       	ld	r25, X
    1c22:	89 23       	and	r24, r25
    1c24:	81 83       	std	Z+1, r24	; 0x01
    1c26:	08 c1       	rjmp	.+528    	; 0x1e38 <_fpadd_parts+0x286>
    1c28:	92 30       	cpi	r25, 0x02	; 2
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_fpadd_parts+0x7c>
    1c2c:	07 c1       	rjmp	.+526    	; 0x1e3c <_fpadd_parts+0x28a>
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	2d 90       	ld	r2, X+
    1c32:	3c 90       	ld	r3, X
    1c34:	13 97       	sbiw	r26, 0x03	; 3
    1c36:	eb 01       	movw	r28, r22
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	ad 90       	ld	r10, X+
    1c40:	bd 90       	ld	r11, X+
    1c42:	cd 90       	ld	r12, X+
    1c44:	dc 90       	ld	r13, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	ec 80       	ldd	r14, Y+4	; 0x04
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c50:	91 01       	movw	r18, r2
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	b9 01       	movw	r22, r18
    1c58:	37 ff       	sbrs	r19, 7
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <_fpadd_parts+0xb2>
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	60 32       	cpi	r22, 0x20	; 32
    1c66:	71 05       	cpc	r23, r1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_fpadd_parts+0xba>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_fpadd_parts+0x17c>
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	6c f5       	brge	.+90     	; 0x1ccc <_fpadd_parts+0x11a>
    1c72:	37 01       	movw	r6, r14
    1c74:	48 01       	movw	r8, r16
    1c76:	06 2e       	mov	r0, r22
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_fpadd_parts+0xd0>
    1c7a:	96 94       	lsr	r9
    1c7c:	87 94       	ror	r8
    1c7e:	77 94       	ror	r7
    1c80:	67 94       	ror	r6
    1c82:	0a 94       	dec	r0
    1c84:	d2 f7       	brpl	.-12     	; 0x1c7a <_fpadd_parts+0xc8>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_fpadd_parts+0xe6>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	6a 95       	dec	r22
    1c9a:	d2 f7       	brpl	.-12     	; 0x1c90 <_fpadd_parts+0xde>
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	30 40       	sbci	r19, 0x00	; 0
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	2e 21       	and	r18, r14
    1ca6:	3f 21       	and	r19, r15
    1ca8:	40 23       	and	r20, r16
    1caa:	51 23       	and	r21, r17
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <_fpadd_parts+0x10c>
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	79 01       	movw	r14, r18
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e6 28       	or	r14, r6
    1cc4:	f7 28       	or	r15, r7
    1cc6:	08 29       	or	r16, r8
    1cc8:	19 29       	or	r17, r9
    1cca:	3c c0       	rjmp	.+120    	; 0x1d44 <_fpadd_parts+0x192>
    1ccc:	23 2b       	or	r18, r19
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <_fpadd_parts+0x192>
    1cd0:	26 0e       	add	r2, r22
    1cd2:	37 1e       	adc	r3, r23
    1cd4:	35 01       	movw	r6, r10
    1cd6:	46 01       	movw	r8, r12
    1cd8:	06 2e       	mov	r0, r22
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_fpadd_parts+0x132>
    1cdc:	96 94       	lsr	r9
    1cde:	87 94       	ror	r8
    1ce0:	77 94       	ror	r7
    1ce2:	67 94       	ror	r6
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <_fpadd_parts+0x12a>
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_fpadd_parts+0x148>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <_fpadd_parts+0x140>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	2a 21       	and	r18, r10
    1d08:	3b 21       	and	r19, r11
    1d0a:	4c 21       	and	r20, r12
    1d0c:	5d 21       	and	r21, r13
    1d0e:	21 15       	cp	r18, r1
    1d10:	31 05       	cpc	r19, r1
    1d12:	41 05       	cpc	r20, r1
    1d14:	51 05       	cpc	r21, r1
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_fpadd_parts+0x16e>
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	59 01       	movw	r10, r18
    1d22:	6a 01       	movw	r12, r20
    1d24:	a6 28       	or	r10, r6
    1d26:	b7 28       	or	r11, r7
    1d28:	c8 28       	or	r12, r8
    1d2a:	d9 28       	or	r13, r9
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <_fpadd_parts+0x192>
    1d2e:	82 15       	cp	r24, r2
    1d30:	93 05       	cpc	r25, r3
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <_fpadd_parts+0x18c>
    1d34:	1c 01       	movw	r2, r24
    1d36:	aa 24       	eor	r10, r10
    1d38:	bb 24       	eor	r11, r11
    1d3a:	65 01       	movw	r12, r10
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_fpadd_parts+0x192>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 91       	ld	r25, X
    1d48:	d2 01       	movw	r26, r4
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	8c 91       	ld	r24, X
    1d4e:	98 17       	cp	r25, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_fpadd_parts+0x1a2>
    1d52:	45 c0       	rjmp	.+138    	; 0x1dde <_fpadd_parts+0x22c>
    1d54:	99 23       	and	r25, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <_fpadd_parts+0x1b4>
    1d58:	a8 01       	movw	r20, r16
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2a 19       	sub	r18, r10
    1d5e:	3b 09       	sbc	r19, r11
    1d60:	4c 09       	sbc	r20, r12
    1d62:	5d 09       	sbc	r21, r13
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <_fpadd_parts+0x1c0>
    1d66:	a6 01       	movw	r20, r12
    1d68:	95 01       	movw	r18, r10
    1d6a:	2e 19       	sub	r18, r14
    1d6c:	3f 09       	sbc	r19, r15
    1d6e:	40 0b       	sbc	r20, r16
    1d70:	51 0b       	sbc	r21, r17
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <_fpadd_parts+0x1d4>
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	33 82       	std	Z+3, r3	; 0x03
    1d7a:	22 82       	std	Z+2, r2	; 0x02
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	46 83       	std	Z+6, r20	; 0x06
    1d82:	57 83       	std	Z+7, r21	; 0x07
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <_fpadd_parts+0x20e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	33 82       	std	Z+3, r3	; 0x03
    1d8c:	22 82       	std	Z+2, r2	; 0x02
    1d8e:	88 27       	eor	r24, r24
    1d90:	99 27       	eor	r25, r25
    1d92:	dc 01       	movw	r26, r24
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	a4 0b       	sbc	r26, r20
    1d9a:	b5 0b       	sbc	r27, r21
    1d9c:	84 83       	std	Z+4, r24	; 0x04
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	a6 83       	std	Z+6, r26	; 0x06
    1da2:	b7 83       	std	Z+7, r27	; 0x07
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <_fpadd_parts+0x20e>
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	35 83       	std	Z+5, r19	; 0x05
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	a1 09       	sbc	r26, r1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	af 4f       	sbci	r26, 0xFF	; 255
    1dd8:	bf 43       	sbci	r27, 0x3F	; 63
    1dda:	28 f3       	brcs	.-54     	; 0x1da6 <_fpadd_parts+0x1f4>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <_fpadd_parts+0x242>
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	33 82       	std	Z+3, r3	; 0x03
    1de2:	22 82       	std	Z+2, r2	; 0x02
    1de4:	ea 0c       	add	r14, r10
    1de6:	fb 1c       	adc	r15, r11
    1de8:	0c 1d       	adc	r16, r12
    1dea:	1d 1d       	adc	r17, r13
    1dec:	e4 82       	std	Z+4, r14	; 0x04
    1dee:	f5 82       	std	Z+5, r15	; 0x05
    1df0:	06 83       	std	Z+6, r16	; 0x06
    1df2:	17 83       	std	Z+7, r17	; 0x07
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	80 83       	st	Z, r24
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	46 81       	ldd	r20, Z+6	; 0x06
    1dfe:	57 81       	ldd	r21, Z+7	; 0x07
    1e00:	57 ff       	sbrs	r21, 7
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <_fpadd_parts+0x286>
    1e04:	c9 01       	movw	r24, r18
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	90 70       	andi	r25, 0x00	; 0
    1e12:	a0 70       	andi	r26, 0x00	; 0
    1e14:	b0 70       	andi	r27, 0x00	; 0
    1e16:	56 95       	lsr	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	a4 2b       	or	r26, r20
    1e24:	b5 2b       	or	r27, r21
    1e26:	84 83       	std	Z+4, r24	; 0x04
    1e28:	95 83       	std	Z+5, r25	; 0x05
    1e2a:	a6 83       	std	Z+6, r26	; 0x06
    1e2c:	b7 83       	std	Z+7, r27	; 0x07
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	df 01       	movw	r26, r30
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_fpadd_parts+0x28c>
    1e3c:	d2 01       	movw	r26, r4
    1e3e:	cd 01       	movw	r24, r26
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	e2 e1       	ldi	r30, 0x12	; 18
    1e46:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__epilogue_restores__>

00001e4a <__subsf3>:
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 00 32 	jmp	0x6400	; 0x6400 <__prologue_saves__+0x18>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	3e 83       	std	Y+6, r19	; 0x06
    1e62:	4f 83       	std	Y+7, r20	; 0x07
    1e64:	58 87       	std	Y+8, r21	; 0x08
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 2e       	mov	r14, r30
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	ec 0e       	add	r14, r28
    1e6e:	fd 1e       	adc	r15, r29
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0f 5e       	subi	r16, 0xEF	; 239
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	b8 01       	movw	r22, r16
    1e86:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	89 27       	eor	r24, r25
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	ae 01       	movw	r20, r28
    1e98:	47 5e       	subi	r20, 0xE7	; 231
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1ea0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1ea4:	a0 96       	adiw	r28, 0x20	; 32
    1ea6:	e6 e0       	ldi	r30, 0x06	; 6
    1ea8:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__epilogue_restores__+0x18>

00001eac <__addsf3>:
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 00 32 	jmp	0x6400	; 0x6400 <__prologue_saves__+0x18>
    1eb8:	69 83       	std	Y+1, r22	; 0x01
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	2d 83       	std	Y+5, r18	; 0x05
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	4f 83       	std	Y+7, r20	; 0x07
    1ec6:	58 87       	std	Y+8, r21	; 0x08
    1ec8:	f9 e0       	ldi	r31, 0x09	; 9
    1eca:	ef 2e       	mov	r14, r31
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	ec 0e       	add	r14, r28
    1ed0:	fd 1e       	adc	r15, r29
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1edc:	8e 01       	movw	r16, r28
    1ede:	0f 5e       	subi	r16, 0xEF	; 239
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b8 01       	movw	r22, r16
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1efa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1efe:	a0 96       	adiw	r28, 0x20	; 32
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__epilogue_restores__+0x18>

00001f06 <__mulsf3>:
    1f06:	a0 e2       	ldi	r26, 0x20	; 32
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 f4 31 	jmp	0x63e8	; 0x63e8 <__prologue_saves__>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	2d 83       	std	Y+5, r18	; 0x05
    1f1c:	3e 83       	std	Y+6, r19	; 0x06
    1f1e:	4f 83       	std	Y+7, r20	; 0x07
    1f20:	58 87       	std	Y+8, r21	; 0x08
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	67 5f       	subi	r22, 0xF7	; 247
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5e       	subi	r22, 0xEF	; 239
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	88 f0       	brcs	.+34     	; 0x1f66 <__mulsf3+0x60>
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	c8 f0       	brcs	.+50     	; 0x1f7c <__mulsf3+0x76>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <__mulsf3+0x4e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	51 f4       	brne	.+20     	; 0x1f66 <__mulsf3+0x60>
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__mulsf3+0x56>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <__mulsf3+0x5c>
    1f58:	92 30       	cpi	r25, 0x02	; 2
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <__mulsf3+0x76>
    1f5c:	80 e6       	ldi	r24, 0x60	; 96
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	c6 c0       	rjmp	.+396    	; 0x20ee <__mulsf3+0x1e8>
    1f62:	92 30       	cpi	r25, 0x02	; 2
    1f64:	49 f4       	brne	.+18     	; 0x1f78 <__mulsf3+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	98 13       	cpse	r25, r24
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	2a 87       	std	Y+10, r18	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bb c0       	rjmp	.+374    	; 0x20ee <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <__mulsf3+0x88>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	98 13       	cpse	r25, r24
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	2a 8b       	std	Y+18, r18	; 0x12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b0 c0       	rjmp	.+352    	; 0x20ee <__mulsf3+0x1e8>
    1f8e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f90:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f92:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f94:	58 88       	ldd	r5, Y+16	; 0x10
    1f96:	6d 88       	ldd	r6, Y+21	; 0x15
    1f98:	7e 88       	ldd	r7, Y+22	; 0x16
    1f9a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f9c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	65 01       	movw	r12, r10
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c1 01       	movw	r24, r2
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	89 2b       	or	r24, r25
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <__mulsf3+0xf4>
    1fc0:	e6 0c       	add	r14, r6
    1fc2:	f7 1c       	adc	r15, r7
    1fc4:	08 1d       	adc	r16, r8
    1fc6:	19 1d       	adc	r17, r9
    1fc8:	9a 01       	movw	r18, r20
    1fca:	ab 01       	movw	r20, r22
    1fcc:	2a 0d       	add	r18, r10
    1fce:	3b 1d       	adc	r19, r11
    1fd0:	4c 1d       	adc	r20, r12
    1fd2:	5d 1d       	adc	r21, r13
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 14       	cp	r14, r6
    1fde:	f7 04       	cpc	r15, r7
    1fe0:	08 05       	cpc	r16, r8
    1fe2:	19 05       	cpc	r17, r9
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <__mulsf3+0xe8>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 0f       	add	r20, r24
    1ff4:	59 1f       	adc	r21, r25
    1ff6:	6a 1f       	adc	r22, r26
    1ff8:	7b 1f       	adc	r23, r27
    1ffa:	aa 0c       	add	r10, r10
    1ffc:	bb 1c       	adc	r11, r11
    1ffe:	cc 1c       	adc	r12, r12
    2000:	dd 1c       	adc	r13, r13
    2002:	97 fe       	sbrs	r9, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <__mulsf3+0x110>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	a8 2a       	or	r10, r24
    2010:	b9 2a       	or	r11, r25
    2012:	ca 2a       	or	r12, r26
    2014:	db 2a       	or	r13, r27
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	e0 32       	cpi	r30, 0x20	; 32
    201a:	f1 05       	cpc	r31, r1
    201c:	49 f0       	breq	.+18     	; 0x2030 <__mulsf3+0x12a>
    201e:	66 0c       	add	r6, r6
    2020:	77 1c       	adc	r7, r7
    2022:	88 1c       	adc	r8, r8
    2024:	99 1c       	adc	r9, r9
    2026:	56 94       	lsr	r5
    2028:	47 94       	ror	r4
    202a:	37 94       	ror	r3
    202c:	27 94       	ror	r2
    202e:	c3 cf       	rjmp	.-122    	; 0x1fb6 <__mulsf3+0xb0>
    2030:	fa 85       	ldd	r31, Y+10	; 0x0a
    2032:	ea 89       	ldd	r30, Y+18	; 0x12
    2034:	2b 89       	ldd	r18, Y+19	; 0x13
    2036:	3c 89       	ldd	r19, Y+20	; 0x14
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <__mulsf3+0x16e>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	89 2b       	or	r24, r25
    204e:	61 f0       	breq	.+24     	; 0x2068 <__mulsf3+0x162>
    2050:	16 95       	lsr	r17
    2052:	07 95       	ror	r16
    2054:	f7 94       	ror	r15
    2056:	e7 94       	ror	r14
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	e8 2a       	or	r14, r24
    2062:	f9 2a       	or	r15, r25
    2064:	0a 2b       	or	r16, r26
    2066:	1b 2b       	or	r17, r27
    2068:	76 95       	lsr	r23
    206a:	67 95       	ror	r22
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	77 fd       	sbrc	r23, 7
    2076:	e7 cf       	rjmp	.-50     	; 0x2046 <__mulsf3+0x140>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <__mulsf3+0x18c>
    207a:	44 0f       	add	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	17 fd       	sbrc	r17, 7
    2084:	41 60       	ori	r20, 0x01	; 1
    2086:	ee 0c       	add	r14, r14
    2088:	ff 1c       	adc	r15, r15
    208a:	00 1f       	adc	r16, r16
    208c:	11 1f       	adc	r17, r17
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	30 40       	sbci	r19, 0x00	; 0
    2092:	40 30       	cpi	r20, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	59 07       	cpc	r21, r25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	69 07       	cpc	r22, r25
    209c:	90 e4       	ldi	r25, 0x40	; 64
    209e:	79 07       	cpc	r23, r25
    20a0:	60 f3       	brcs	.-40     	; 0x207a <__mulsf3+0x174>
    20a2:	2b 8f       	std	Y+27, r18	; 0x1b
    20a4:	3c 8f       	std	Y+28, r19	; 0x1c
    20a6:	db 01       	movw	r26, r22
    20a8:	ca 01       	movw	r24, r20
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	80 34       	cpi	r24, 0x40	; 64
    20b4:	91 05       	cpc	r25, r1
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <__mulsf3+0x1ce>
    20bc:	47 fd       	sbrc	r20, 7
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <__mulsf3+0x1ce>
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	01 05       	cpc	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__mulsf3+0x1ce>
    20ca:	40 5c       	subi	r20, 0xC0	; 192
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	40 78       	andi	r20, 0x80	; 128
    20d4:	1a 8e       	std	Y+26, r1	; 0x1a
    20d6:	fe 17       	cp	r31, r30
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1d8>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	4d 8f       	std	Y+29, r20	; 0x1d
    20e0:	5e 8f       	std	Y+30, r21	; 0x1e
    20e2:	6f 8f       	std	Y+31, r22	; 0x1f
    20e4:	78 a3       	std	Y+32, r23	; 0x20
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	ce 01       	movw	r24, r28
    20ec:	49 96       	adiw	r24, 0x19	; 25
    20ee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e2 e1       	ldi	r30, 0x12	; 18
    20f6:	0c 94 10 32 	jmp	0x6420	; 0x6420 <__epilogue_restores__>

000020fa <__gtsf2>:
    20fa:	a8 e1       	ldi	r26, 0x18	; 24
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 00 32 	jmp	0x6400	; 0x6400 <__prologue_saves__+0x18>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	e8 2e       	mov	r14, r24
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    212a:	8e 01       	movw	r16, r28
    212c:	0f 5e       	subi	r16, 0xEF	; 239
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b8 01       	movw	r22, r16
    2136:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	40 f0       	brcs	.+16     	; 0x2150 <__gtsf2+0x56>
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	28 f0       	brcs	.+10     	; 0x2150 <__gtsf2+0x56>
    2146:	c7 01       	movw	r24, r14
    2148:	b8 01       	movw	r22, r16
    214a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <__gtsf2+0x58>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	68 96       	adiw	r28, 0x18	; 24
    2154:	e6 e0       	ldi	r30, 0x06	; 6
    2156:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__epilogue_restores__+0x18>

0000215a <__gesf2>:
    215a:	a8 e1       	ldi	r26, 0x18	; 24
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 eb       	ldi	r30, 0xB3	; 179
    2160:	f0 e1       	ldi	r31, 0x10	; 16
    2162:	0c 94 00 32 	jmp	0x6400	; 0x6400 <__prologue_saves__+0x18>
    2166:	69 83       	std	Y+1, r22	; 0x01
    2168:	7a 83       	std	Y+2, r23	; 0x02
    216a:	8b 83       	std	Y+3, r24	; 0x03
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	2d 83       	std	Y+5, r18	; 0x05
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	4f 83       	std	Y+7, r20	; 0x07
    2174:	58 87       	std	Y+8, r21	; 0x08
    2176:	89 e0       	ldi	r24, 0x09	; 9
    2178:	e8 2e       	mov	r14, r24
    217a:	f1 2c       	mov	r15, r1
    217c:	ec 0e       	add	r14, r28
    217e:	fd 1e       	adc	r15, r29
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	b7 01       	movw	r22, r14
    2186:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    218a:	8e 01       	movw	r16, r28
    218c:	0f 5e       	subi	r16, 0xEF	; 239
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	ce 01       	movw	r24, r28
    2192:	05 96       	adiw	r24, 0x05	; 5
    2194:	b8 01       	movw	r22, r16
    2196:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	40 f0       	brcs	.+16     	; 0x21b0 <__gesf2+0x56>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	28 f0       	brcs	.+10     	; 0x21b0 <__gesf2+0x56>
    21a6:	c7 01       	movw	r24, r14
    21a8:	b8 01       	movw	r22, r16
    21aa:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <__gesf2+0x58>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	68 96       	adiw	r28, 0x18	; 24
    21b4:	e6 e0       	ldi	r30, 0x06	; 6
    21b6:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__epilogue_restores__+0x18>

000021ba <__ltsf2>:
    21ba:	a8 e1       	ldi	r26, 0x18	; 24
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 00 32 	jmp	0x6400	; 0x6400 <__prologue_saves__+0x18>
    21c6:	69 83       	std	Y+1, r22	; 0x01
    21c8:	7a 83       	std	Y+2, r23	; 0x02
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	2d 83       	std	Y+5, r18	; 0x05
    21d0:	3e 83       	std	Y+6, r19	; 0x06
    21d2:	4f 83       	std	Y+7, r20	; 0x07
    21d4:	58 87       	std	Y+8, r21	; 0x08
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	e8 2e       	mov	r14, r24
    21da:	f1 2c       	mov	r15, r1
    21dc:	ec 0e       	add	r14, r28
    21de:	fd 1e       	adc	r15, r29
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	b7 01       	movw	r22, r14
    21e6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21ea:	8e 01       	movw	r16, r28
    21ec:	0f 5e       	subi	r16, 0xEF	; 239
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	ce 01       	movw	r24, r28
    21f2:	05 96       	adiw	r24, 0x05	; 5
    21f4:	b8 01       	movw	r22, r16
    21f6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__ltsf2+0x56>
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	28 f0       	brcs	.+10     	; 0x2210 <__ltsf2+0x56>
    2206:	c7 01       	movw	r24, r14
    2208:	b8 01       	movw	r22, r16
    220a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__ltsf2+0x58>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	68 96       	adiw	r28, 0x18	; 24
    2214:	e6 e0       	ldi	r30, 0x06	; 6
    2216:	0c 94 1c 32 	jmp	0x6438	; 0x6438 <__epilogue_restores__+0x18>

0000221a <__fixsfsi>:
    221a:	ac e0       	ldi	r26, 0x0C	; 12
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e1       	ldi	r30, 0x13	; 19
    2220:	f1 e1       	ldi	r31, 0x11	; 17
    2222:	0c 94 04 32 	jmp	0x6408	; 0x6408 <__prologue_saves__+0x20>
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	7a 83       	std	Y+2, r23	; 0x02
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	be 01       	movw	r22, r28
    2234:	6b 5f       	subi	r22, 0xFB	; 251
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	61 f1       	breq	.+88     	; 0x229a <__fixsfsi+0x80>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	50 f1       	brcs	.+84     	; 0x229a <__fixsfsi+0x80>
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	21 f4       	brne	.+8      	; 0x2252 <__fixsfsi+0x38>
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	88 23       	and	r24, r24
    224e:	51 f1       	breq	.+84     	; 0x22a4 <__fixsfsi+0x8a>
    2250:	2e c0       	rjmp	.+92     	; 0x22ae <__fixsfsi+0x94>
    2252:	2f 81       	ldd	r18, Y+7	; 0x07
    2254:	38 85       	ldd	r19, Y+8	; 0x08
    2256:	37 fd       	sbrc	r19, 7
    2258:	20 c0       	rjmp	.+64     	; 0x229a <__fixsfsi+0x80>
    225a:	6e 81       	ldd	r22, Y+6	; 0x06
    225c:	2f 31       	cpi	r18, 0x1F	; 31
    225e:	31 05       	cpc	r19, r1
    2260:	1c f0       	brlt	.+6      	; 0x2268 <__fixsfsi+0x4e>
    2262:	66 23       	and	r22, r22
    2264:	f9 f0       	breq	.+62     	; 0x22a4 <__fixsfsi+0x8a>
    2266:	23 c0       	rjmp	.+70     	; 0x22ae <__fixsfsi+0x94>
    2268:	8e e1       	ldi	r24, 0x1E	; 30
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	4b 85       	ldd	r20, Y+11	; 0x0b
    2276:	5c 85       	ldd	r21, Y+12	; 0x0c
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__fixsfsi+0x68>
    227a:	56 95       	lsr	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	8a 95       	dec	r24
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__fixsfsi+0x60>
    2286:	66 23       	and	r22, r22
    2288:	b1 f0       	breq	.+44     	; 0x22b6 <__fixsfsi+0x9c>
    228a:	50 95       	com	r21
    228c:	40 95       	com	r20
    228e:	30 95       	com	r19
    2290:	21 95       	neg	r18
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	4f 4f       	sbci	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__fixsfsi+0x9c>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__fixsfsi+0x9c>
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f ef       	ldi	r20, 0xFF	; 255
    22aa:	5f e7       	ldi	r21, 0x7F	; 127
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__fixsfsi+0x9c>
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e8       	ldi	r21, 0x80	; 128
    22b6:	b9 01       	movw	r22, r18
    22b8:	ca 01       	movw	r24, r20
    22ba:	2c 96       	adiw	r28, 0x0c	; 12
    22bc:	e2 e0       	ldi	r30, 0x02	; 2
    22be:	0c 94 20 32 	jmp	0x6440	; 0x6440 <__epilogue_restores__+0x20>

000022c2 <__pack_f>:
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	fc 01       	movw	r30, r24
    22ce:	e4 80       	ldd	r14, Z+4	; 0x04
    22d0:	f5 80       	ldd	r15, Z+5	; 0x05
    22d2:	06 81       	ldd	r16, Z+6	; 0x06
    22d4:	17 81       	ldd	r17, Z+7	; 0x07
    22d6:	d1 80       	ldd	r13, Z+1	; 0x01
    22d8:	80 81       	ld	r24, Z
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	48 f4       	brcc	.+18     	; 0x22f0 <__pack_f+0x2e>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e1       	ldi	r26, 0x10	; 16
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e8 2a       	or	r14, r24
    22e8:	f9 2a       	or	r15, r25
    22ea:	0a 2b       	or	r16, r26
    22ec:	1b 2b       	or	r17, r27
    22ee:	a5 c0       	rjmp	.+330    	; 0x243a <__pack_f+0x178>
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__pack_f+0x34>
    22f4:	9f c0       	rjmp	.+318    	; 0x2434 <__pack_f+0x172>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__pack_f+0x40>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__pack_f+0x4a>
    2302:	e1 14       	cp	r14, r1
    2304:	f1 04       	cpc	r15, r1
    2306:	01 05       	cpc	r16, r1
    2308:	11 05       	cpc	r17, r1
    230a:	19 f4       	brne	.+6      	; 0x2312 <__pack_f+0x50>
    230c:	e0 e0       	ldi	r30, 0x00	; 0
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	96 c0       	rjmp	.+300    	; 0x243e <__pack_f+0x17c>
    2312:	62 81       	ldd	r22, Z+2	; 0x02
    2314:	73 81       	ldd	r23, Z+3	; 0x03
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	62 38       	cpi	r22, 0x82	; 130
    231a:	79 07       	cpc	r23, r25
    231c:	0c f0       	brlt	.+2      	; 0x2320 <__pack_f+0x5e>
    231e:	5b c0       	rjmp	.+182    	; 0x23d6 <__pack_f+0x114>
    2320:	22 e8       	ldi	r18, 0x82	; 130
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	26 1b       	sub	r18, r22
    2326:	37 0b       	sbc	r19, r23
    2328:	2a 31       	cpi	r18, 0x1A	; 26
    232a:	31 05       	cpc	r19, r1
    232c:	2c f0       	brlt	.+10     	; 0x2338 <__pack_f+0x76>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	2a c0       	rjmp	.+84     	; 0x238c <__pack_f+0xca>
    2338:	b8 01       	movw	r22, r16
    233a:	a7 01       	movw	r20, r14
    233c:	02 2e       	mov	r0, r18
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__pack_f+0x86>
    2340:	76 95       	lsr	r23
    2342:	67 95       	ror	r22
    2344:	57 95       	ror	r21
    2346:	47 95       	ror	r20
    2348:	0a 94       	dec	r0
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <__pack_f+0x7e>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__pack_f+0x9c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	2a 95       	dec	r18
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <__pack_f+0x94>
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	a1 09       	sbc	r26, r1
    2366:	b1 09       	sbc	r27, r1
    2368:	8e 21       	and	r24, r14
    236a:	9f 21       	and	r25, r15
    236c:	a0 23       	and	r26, r16
    236e:	b1 23       	and	r27, r17
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	a1 05       	cpc	r26, r1
    2374:	b1 05       	cpc	r27, r1
    2376:	21 f0       	breq	.+8      	; 0x2380 <__pack_f+0xbe>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	9a 01       	movw	r18, r20
    2382:	ab 01       	movw	r20, r22
    2384:	28 2b       	or	r18, r24
    2386:	39 2b       	or	r19, r25
    2388:	4a 2b       	or	r20, r26
    238a:	5b 2b       	or	r21, r27
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	8f 77       	andi	r24, 0x7F	; 127
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	a0 70       	andi	r26, 0x00	; 0
    2396:	b0 70       	andi	r27, 0x00	; 0
    2398:	80 34       	cpi	r24, 0x40	; 64
    239a:	91 05       	cpc	r25, r1
    239c:	a1 05       	cpc	r26, r1
    239e:	b1 05       	cpc	r27, r1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <__pack_f+0xee>
    23a2:	27 ff       	sbrs	r18, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <__pack_f+0xf6>
    23a6:	20 5c       	subi	r18, 0xC0	; 192
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	4f 4f       	sbci	r20, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0xf6>
    23b0:	21 5c       	subi	r18, 0xC1	; 193
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	e0 e0       	ldi	r30, 0x00	; 0
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	20 30       	cpi	r18, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	3a 07       	cpc	r19, r26
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	4a 07       	cpc	r20, r26
    23c6:	a0 e4       	ldi	r26, 0x40	; 64
    23c8:	5a 07       	cpc	r21, r26
    23ca:	10 f0       	brcs	.+4      	; 0x23d0 <__pack_f+0x10e>
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	79 01       	movw	r14, r18
    23d2:	8a 01       	movw	r16, r20
    23d4:	27 c0       	rjmp	.+78     	; 0x2424 <__pack_f+0x162>
    23d6:	60 38       	cpi	r22, 0x80	; 128
    23d8:	71 05       	cpc	r23, r1
    23da:	64 f5       	brge	.+88     	; 0x2434 <__pack_f+0x172>
    23dc:	fb 01       	movw	r30, r22
    23de:	e1 58       	subi	r30, 0x81	; 129
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	d8 01       	movw	r26, r16
    23e4:	c7 01       	movw	r24, r14
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	a0 70       	andi	r26, 0x00	; 0
    23ec:	b0 70       	andi	r27, 0x00	; 0
    23ee:	80 34       	cpi	r24, 0x40	; 64
    23f0:	91 05       	cpc	r25, r1
    23f2:	a1 05       	cpc	r26, r1
    23f4:	b1 05       	cpc	r27, r1
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__pack_f+0x144>
    23f8:	e7 fe       	sbrs	r14, 7
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__pack_f+0x154>
    23fc:	80 e4       	ldi	r24, 0x40	; 64
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__pack_f+0x14c>
    2406:	8f e3       	ldi	r24, 0x3F	; 63
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 0e       	add	r14, r24
    2410:	f9 1e       	adc	r15, r25
    2412:	0a 1f       	adc	r16, r26
    2414:	1b 1f       	adc	r17, r27
    2416:	17 ff       	sbrs	r17, 7
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <__pack_f+0x162>
    241a:	16 95       	lsr	r17
    241c:	07 95       	ror	r16
    241e:	f7 94       	ror	r15
    2420:	e7 94       	ror	r14
    2422:	31 96       	adiw	r30, 0x01	; 1
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	16 95       	lsr	r17
    2428:	07 95       	ror	r16
    242a:	f7 94       	ror	r15
    242c:	e7 94       	ror	r14
    242e:	8a 95       	dec	r24
    2430:	d1 f7       	brne	.-12     	; 0x2426 <__pack_f+0x164>
    2432:	05 c0       	rjmp	.+10     	; 0x243e <__pack_f+0x17c>
    2434:	ee 24       	eor	r14, r14
    2436:	ff 24       	eor	r15, r15
    2438:	87 01       	movw	r16, r14
    243a:	ef ef       	ldi	r30, 0xFF	; 255
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	6e 2f       	mov	r22, r30
    2440:	67 95       	ror	r22
    2442:	66 27       	eor	r22, r22
    2444:	67 95       	ror	r22
    2446:	90 2f       	mov	r25, r16
    2448:	9f 77       	andi	r25, 0x7F	; 127
    244a:	d7 94       	ror	r13
    244c:	dd 24       	eor	r13, r13
    244e:	d7 94       	ror	r13
    2450:	8e 2f       	mov	r24, r30
    2452:	86 95       	lsr	r24
    2454:	49 2f       	mov	r20, r25
    2456:	46 2b       	or	r20, r22
    2458:	58 2f       	mov	r21, r24
    245a:	5d 29       	or	r21, r13
    245c:	b7 01       	movw	r22, r14
    245e:	ca 01       	movw	r24, r20
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	08 95       	ret

0000246c <__unpack_f>:
    246c:	fc 01       	movw	r30, r24
    246e:	db 01       	movw	r26, r22
    2470:	40 81       	ld	r20, Z
    2472:	51 81       	ldd	r21, Z+1	; 0x01
    2474:	22 81       	ldd	r18, Z+2	; 0x02
    2476:	62 2f       	mov	r22, r18
    2478:	6f 77       	andi	r22, 0x7F	; 127
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	22 1f       	adc	r18, r18
    247e:	22 27       	eor	r18, r18
    2480:	22 1f       	adc	r18, r18
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	89 2f       	mov	r24, r25
    2486:	88 0f       	add	r24, r24
    2488:	82 2b       	or	r24, r18
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	99 1f       	adc	r25, r25
    2490:	99 27       	eor	r25, r25
    2492:	99 1f       	adc	r25, r25
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	a9 f5       	brne	.+106    	; 0x250a <__unpack_f+0x9e>
    24a0:	41 15       	cp	r20, r1
    24a2:	51 05       	cpc	r21, r1
    24a4:	61 05       	cpc	r22, r1
    24a6:	71 05       	cpc	r23, r1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <__unpack_f+0x42>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	37 c0       	rjmp	.+110    	; 0x251c <__unpack_f+0xb0>
    24ae:	82 e8       	ldi	r24, 0x82	; 130
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	9a 01       	movw	r18, r20
    24bc:	ab 01       	movw	r20, r22
    24be:	67 e0       	ldi	r22, 0x07	; 7
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	44 1f       	adc	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	6a 95       	dec	r22
    24ca:	d1 f7       	brne	.-12     	; 0x24c0 <__unpack_f+0x54>
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	8c 93       	st	X, r24
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <__unpack_f+0x80>
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	44 1f       	adc	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	13 97       	sbiw	r26, 0x03	; 3
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	13 96       	adiw	r26, 0x03	; 3
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	12 97       	sbiw	r26, 0x02	; 2
    24ec:	20 30       	cpi	r18, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	38 07       	cpc	r19, r24
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	48 07       	cpc	r20, r24
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	58 07       	cpc	r21, r24
    24fa:	58 f3       	brcs	.-42     	; 0x24d2 <__unpack_f+0x66>
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	2d 93       	st	X+, r18
    2500:	3d 93       	st	X+, r19
    2502:	4d 93       	st	X+, r20
    2504:	5c 93       	st	X, r21
    2506:	17 97       	sbiw	r26, 0x07	; 7
    2508:	08 95       	ret
    250a:	2f 3f       	cpi	r18, 0xFF	; 255
    250c:	31 05       	cpc	r19, r1
    250e:	79 f4       	brne	.+30     	; 0x252e <__unpack_f+0xc2>
    2510:	41 15       	cp	r20, r1
    2512:	51 05       	cpc	r21, r1
    2514:	61 05       	cpc	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	19 f4       	brne	.+6      	; 0x2520 <__unpack_f+0xb4>
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	8c 93       	st	X, r24
    251e:	08 95       	ret
    2520:	64 ff       	sbrs	r22, 4
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__unpack_f+0xbe>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8c 93       	st	X, r24
    2528:	12 c0       	rjmp	.+36     	; 0x254e <__unpack_f+0xe2>
    252a:	1c 92       	st	X, r1
    252c:	10 c0       	rjmp	.+32     	; 0x254e <__unpack_f+0xe2>
    252e:	2f 57       	subi	r18, 0x7F	; 127
    2530:	30 40       	sbci	r19, 0x00	; 0
    2532:	13 96       	adiw	r26, 0x03	; 3
    2534:	3c 93       	st	X, r19
    2536:	2e 93       	st	-X, r18
    2538:	12 97       	sbiw	r26, 0x02	; 2
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	8c 93       	st	X, r24
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	66 1f       	adc	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	8a 95       	dec	r24
    254a:	d1 f7       	brne	.-12     	; 0x2540 <__unpack_f+0xd4>
    254c:	70 64       	ori	r23, 0x40	; 64
    254e:	14 96       	adiw	r26, 0x04	; 4
    2550:	4d 93       	st	X+, r20
    2552:	5d 93       	st	X+, r21
    2554:	6d 93       	st	X+, r22
    2556:	7c 93       	st	X, r23
    2558:	17 97       	sbiw	r26, 0x07	; 7
    255a:	08 95       	ret

0000255c <__fpcmp_parts_f>:
    255c:	1f 93       	push	r17
    255e:	dc 01       	movw	r26, r24
    2560:	fb 01       	movw	r30, r22
    2562:	9c 91       	ld	r25, X
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	08 f4       	brcc	.+2      	; 0x256a <__fpcmp_parts_f+0xe>
    2568:	47 c0       	rjmp	.+142    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    256a:	80 81       	ld	r24, Z
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	08 f4       	brcc	.+2      	; 0x2572 <__fpcmp_parts_f+0x16>
    2570:	43 c0       	rjmp	.+134    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    2572:	94 30       	cpi	r25, 0x04	; 4
    2574:	51 f4       	brne	.+20     	; 0x258a <__fpcmp_parts_f+0x2e>
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	1c 91       	ld	r17, X
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	99 f5       	brne	.+102    	; 0x25e4 <__fpcmp_parts_f+0x88>
    257e:	81 81       	ldd	r24, Z+1	; 0x01
    2580:	68 2f       	mov	r22, r24
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	61 1b       	sub	r22, r17
    2586:	71 09       	sbc	r23, r1
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <__fpcmp_parts_f+0xac>
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	21 f0       	breq	.+8      	; 0x2596 <__fpcmp_parts_f+0x3a>
    258e:	92 30       	cpi	r25, 0x02	; 2
    2590:	31 f4       	brne	.+12     	; 0x259e <__fpcmp_parts_f+0x42>
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	b9 f1       	breq	.+110    	; 0x2604 <__fpcmp_parts_f+0xa8>
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	89 f1       	breq	.+98     	; 0x25fe <__fpcmp_parts_f+0xa2>
    259c:	2d c0       	rjmp	.+90     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	1c 91       	ld	r17, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	f1 f0       	breq	.+60     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	18 17       	cp	r17, r24
    25ac:	d9 f4       	brne	.+54     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	2d 91       	ld	r18, X+
    25b2:	3c 91       	ld	r19, X
    25b4:	13 97       	sbiw	r26, 0x03	; 3
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	94 f0       	brlt	.+36     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	bc f0       	brlt	.+46     	; 0x25f4 <__fpcmp_parts_f+0x98>
    25c6:	14 96       	adiw	r26, 0x04	; 4
    25c8:	8d 91       	ld	r24, X+
    25ca:	9d 91       	ld	r25, X+
    25cc:	0d 90       	ld	r0, X+
    25ce:	bc 91       	ld	r27, X
    25d0:	a0 2d       	mov	r26, r0
    25d2:	24 81       	ldd	r18, Z+4	; 0x04
    25d4:	35 81       	ldd	r19, Z+5	; 0x05
    25d6:	46 81       	ldd	r20, Z+6	; 0x06
    25d8:	57 81       	ldd	r21, Z+7	; 0x07
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	4a 07       	cpc	r20, r26
    25e0:	5b 07       	cpc	r21, r27
    25e2:	18 f4       	brcc	.+6      	; 0x25ea <__fpcmp_parts_f+0x8e>
    25e4:	11 23       	and	r17, r17
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <__fpcmp_parts_f+0xa2>
    25ea:	82 17       	cp	r24, r18
    25ec:	93 07       	cpc	r25, r19
    25ee:	a4 07       	cpc	r26, r20
    25f0:	b5 07       	cpc	r27, r21
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <__fpcmp_parts_f+0xa8>
    25f4:	11 23       	and	r17, r17
    25f6:	19 f0       	breq	.+6      	; 0x25fe <__fpcmp_parts_f+0xa2>
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <__fpcmp_parts_f+0xac>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <__fpcmp_parts_f+0xac>
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	cb 01       	movw	r24, r22
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <Buzzer_init>:
#include "DIO_interface.h"
BUZZER_conf BUZZER={DIO_PORTC, DIO_PIN7,BUZZER_ACTIVE_HIGH };
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Buzzer_init(BUZZER_conf *config) {
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <Buzzer_init+0x6>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinDirection(config->PORT, config->PIN, DIO_PIN_OUTPUT);
    261c:	e9 81       	ldd	r30, Y+1	; 0x01
    261e:	fa 81       	ldd	r31, Y+2	; 0x02
    2620:	80 81       	ld	r24, Z
    2622:	83 70       	andi	r24, 0x03	; 3
    2624:	28 2f       	mov	r18, r24
    2626:	e9 81       	ldd	r30, Y+1	; 0x01
    2628:	fa 81       	ldd	r31, Y+2	; 0x02
    262a:	80 81       	ld	r24, Z
    262c:	86 95       	lsr	r24
    262e:	86 95       	lsr	r24
    2630:	87 70       	andi	r24, 0x07	; 7
    2632:	98 2f       	mov	r25, r24
    2634:	82 2f       	mov	r24, r18
    2636:	69 2f       	mov	r22, r25
    2638:	41 e0       	ldi	r20, 0x01	; 1
    263a:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <DIO_enumSetPinDirection>
    Buzzer_off(config);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	9a 81       	ldd	r25, Y+2	; 0x02
    2642:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Buzzer_off>
}
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <Buzzer_on>:


/* Turn on the buzzer */
void Buzzer_on(BUZZER_conf *config) {
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	00 d0       	rcall	.+0      	; 0x2656 <Buzzer_on+0x6>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(config->PORT, config->PIN, (DIO_PIN_HIGH ^ config->state));
    265e:	e9 81       	ldd	r30, Y+1	; 0x01
    2660:	fa 81       	ldd	r31, Y+2	; 0x02
    2662:	80 81       	ld	r24, Z
    2664:	83 70       	andi	r24, 0x03	; 3
    2666:	38 2f       	mov	r19, r24
    2668:	e9 81       	ldd	r30, Y+1	; 0x01
    266a:	fa 81       	ldd	r31, Y+2	; 0x02
    266c:	80 81       	ld	r24, Z
    266e:	86 95       	lsr	r24
    2670:	86 95       	lsr	r24
    2672:	87 70       	andi	r24, 0x07	; 7
    2674:	28 2f       	mov	r18, r24
    2676:	e9 81       	ldd	r30, Y+1	; 0x01
    2678:	fa 81       	ldd	r31, Y+2	; 0x02
    267a:	80 81       	ld	r24, Z
    267c:	82 95       	swap	r24
    267e:	86 95       	lsr	r24
    2680:	87 70       	andi	r24, 0x07	; 7
    2682:	81 70       	andi	r24, 0x01	; 1
    2684:	98 2f       	mov	r25, r24
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	89 27       	eor	r24, r25
    268a:	98 2f       	mov	r25, r24
    268c:	83 2f       	mov	r24, r19
    268e:	62 2f       	mov	r22, r18
    2690:	49 2f       	mov	r20, r25
    2692:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <Buzzer_off>:

/* Turn off the buzzer */
void Buzzer_off(BUZZER_conf *config) {
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <Buzzer_off+0x6>
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(config->PORT, config->PIN, (DIO_PIN_LOW ^ config->state));
    26ae:	e9 81       	ldd	r30, Y+1	; 0x01
    26b0:	fa 81       	ldd	r31, Y+2	; 0x02
    26b2:	80 81       	ld	r24, Z
    26b4:	83 70       	andi	r24, 0x03	; 3
    26b6:	38 2f       	mov	r19, r24
    26b8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ba:	fa 81       	ldd	r31, Y+2	; 0x02
    26bc:	80 81       	ld	r24, Z
    26be:	86 95       	lsr	r24
    26c0:	86 95       	lsr	r24
    26c2:	87 70       	andi	r24, 0x07	; 7
    26c4:	28 2f       	mov	r18, r24
    26c6:	e9 81       	ldd	r30, Y+1	; 0x01
    26c8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ca:	80 81       	ld	r24, Z
    26cc:	82 95       	swap	r24
    26ce:	86 95       	lsr	r24
    26d0:	87 70       	andi	r24, 0x07	; 7
    26d2:	81 70       	andi	r24, 0x01	; 1
    26d4:	98 2f       	mov	r25, r24
    26d6:	83 2f       	mov	r24, r19
    26d8:	62 2f       	mov	r22, r18
    26da:	49 2f       	mov	r20, r25
    26dc:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
}
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <CLCD_voidInit>:
/*
* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
void CLCD_voidInit        ( void ){
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	c6 54       	subi	r28, 0x46	; 70
    26f8:	d0 40       	sbci	r29, 0x00	; 0
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	fe 01       	movw	r30, r28
    2706:	ed 5b       	subi	r30, 0xBD	; 189
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	a8 e4       	ldi	r26, 0x48	; 72
    2710:	b2 e4       	ldi	r27, 0x42	; 66
    2712:	80 83       	st	Z, r24
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	a2 83       	std	Z+2, r26	; 0x02
    2718:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271a:	8e 01       	movw	r16, r28
    271c:	01 5c       	subi	r16, 0xC1	; 193
    271e:	1f 4f       	sbci	r17, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	ed 5b       	subi	r30, 0xBD	; 189
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	4a ef       	ldi	r20, 0xFA	; 250
    2734:	54 e4       	ldi	r21, 0x44	; 68
    2736:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	f8 01       	movw	r30, r16
    2740:	80 83       	st	Z, r24
    2742:	91 83       	std	Z+1, r25	; 0x01
    2744:	a2 83       	std	Z+2, r26	; 0x02
    2746:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2748:	fe 01       	movw	r30, r28
    274a:	ff 96       	adiw	r30, 0x3f	; 63
    274c:	60 81       	ld	r22, Z
    274e:	71 81       	ldd	r23, Z+1	; 0x01
    2750:	82 81       	ldd	r24, Z+2	; 0x02
    2752:	93 81       	ldd	r25, Z+3	; 0x03
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e8       	ldi	r20, 0x80	; 128
    275a:	5f e3       	ldi	r21, 0x3F	; 63
    275c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    2760:	88 23       	and	r24, r24
    2762:	2c f4       	brge	.+10     	; 0x276e <CLCD_voidInit+0x84>
		__ticks = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	9e af       	std	Y+62, r25	; 0x3e
    276a:	8d af       	std	Y+61, r24	; 0x3d
    276c:	46 c0       	rjmp	.+140    	; 0x27fa <CLCD_voidInit+0x110>
	else if (__tmp > 65535)
    276e:	fe 01       	movw	r30, r28
    2770:	ff 96       	adiw	r30, 0x3f	; 63
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	3f ef       	ldi	r19, 0xFF	; 255
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	57 e4       	ldi	r21, 0x47	; 71
    2782:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    2786:	18 16       	cp	r1, r24
    2788:	64 f5       	brge	.+88     	; 0x27e2 <CLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278a:	fe 01       	movw	r30, r28
    278c:	ed 5b       	subi	r30, 0xBD	; 189
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9e af       	std	Y+62, r25	; 0x3e
    27b6:	8d af       	std	Y+61, r24	; 0x3d
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <CLCD_voidInit+0xee>
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c af       	std	Y+60, r25	; 0x3c
    27c0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    27c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <CLCD_voidInit+0xdc>
    27ca:	9c af       	std	Y+60, r25	; 0x3c
    27cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    27d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9e af       	std	Y+62, r25	; 0x3e
    27d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27da:	9e ad       	ldd	r25, Y+62	; 0x3e
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <CLCD_voidInit+0xd0>
    27e0:	16 c0       	rjmp	.+44     	; 0x280e <CLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	fe 01       	movw	r30, r28
    27e4:	ff 96       	adiw	r30, 0x3f	; 63
    27e6:	60 81       	ld	r22, Z
    27e8:	71 81       	ldd	r23, Z+1	; 0x01
    27ea:	82 81       	ldd	r24, Z+2	; 0x02
    27ec:	93 81       	ldd	r25, Z+3	; 0x03
    27ee:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	9e af       	std	Y+62, r25	; 0x3e
    27f8:	8d af       	std	Y+61, r24	; 0x3d
    27fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    27fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    27fe:	9a af       	std	Y+58, r25	; 0x3a
    2800:	89 af       	std	Y+57, r24	; 0x39
    2802:	89 ad       	ldd	r24, Y+57	; 0x39
    2804:	9a ad       	ldd	r25, Y+58	; 0x3a
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <CLCD_voidInit+0x11c>
    280a:	9a af       	std	Y+58, r25	; 0x3a
    280c:	89 af       	std	Y+57, r24	; 0x39

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);

	// All Pins as OutPut pins
	DIO_enumSetPortDirection ( CLCD_DATA_PORT    , DIO_PORT_OUTPUT           );
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	6f ef       	ldi	r22, 0xFF	; 255
    2812:	0e 94 8e 23 	call	0x471c	; 0x471c <DIO_enumSetPortDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	41 e0       	ldi	r20, 0x01	; 1
    281c:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	62 e0       	ldi	r22, 0x02	; 2
    2824:	41 e0       	ldi	r20, 0x01	; 1
    2826:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <DIO_enumSetPinDirection>

	/* Return cursor to the first position on the first line  */
	CLCD_voidSendCommand(lcd_Home);
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	0e 94 92 16 	call	0x2d24	; 0x2d24 <CLCD_voidSendCommand>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e8       	ldi	r26, 0x80	; 128
    2840:	bf e3       	ldi	r27, 0x3F	; 63
    2842:	8d ab       	std	Y+53, r24	; 0x35
    2844:	9e ab       	std	Y+54, r25	; 0x36
    2846:	af ab       	std	Y+55, r26	; 0x37
    2848:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	6d a9       	ldd	r22, Y+53	; 0x35
    284c:	7e a9       	ldd	r23, Y+54	; 0x36
    284e:	8f a9       	ldd	r24, Y+55	; 0x37
    2850:	98 ad       	ldd	r25, Y+56	; 0x38
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a ef       	ldi	r20, 0xFA	; 250
    2858:	54 e4       	ldi	r21, 0x44	; 68
    285a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	89 ab       	std	Y+49, r24	; 0x31
    2864:	9a ab       	std	Y+50, r25	; 0x32
    2866:	ab ab       	std	Y+51, r26	; 0x33
    2868:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    286a:	69 a9       	ldd	r22, Y+49	; 0x31
    286c:	7a a9       	ldd	r23, Y+50	; 0x32
    286e:	8b a9       	ldd	r24, Y+51	; 0x33
    2870:	9c a9       	ldd	r25, Y+52	; 0x34
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <CLCD_voidInit+0x1a2>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	98 ab       	std	Y+48, r25	; 0x30
    2888:	8f a7       	std	Y+47, r24	; 0x2f
    288a:	3f c0       	rjmp	.+126    	; 0x290a <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
    288c:	69 a9       	ldd	r22, Y+49	; 0x31
    288e:	7a a9       	ldd	r23, Y+50	; 0x32
    2890:	8b a9       	ldd	r24, Y+51	; 0x33
    2892:	9c a9       	ldd	r25, Y+52	; 0x34
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	6d a9       	ldd	r22, Y+53	; 0x35
    28a6:	7e a9       	ldd	r23, Y+54	; 0x36
    28a8:	8f a9       	ldd	r24, Y+55	; 0x37
    28aa:	98 ad       	ldd	r25, Y+56	; 0x38
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	98 ab       	std	Y+48, r25	; 0x30
    28ca:	8f a7       	std	Y+47, r24	; 0x2f
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <CLCD_voidInit+0x202>
    28ce:	88 ec       	ldi	r24, 0xC8	; 200
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9e a7       	std	Y+46, r25	; 0x2e
    28d4:	8d a7       	std	Y+45, r24	; 0x2d
    28d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <CLCD_voidInit+0x1f0>
    28de:	9e a7       	std	Y+46, r25	; 0x2e
    28e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e4:	98 a9       	ldd	r25, Y+48	; 0x30
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	98 ab       	std	Y+48, r25	; 0x30
    28ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ee:	98 a9       	ldd	r25, Y+48	; 0x30
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	69 f7       	brne	.-38     	; 0x28ce <CLCD_voidInit+0x1e4>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	69 a9       	ldd	r22, Y+49	; 0x31
    28f8:	7a a9       	ldd	r23, Y+50	; 0x32
    28fa:	8b a9       	ldd	r24, Y+51	; 0x33
    28fc:	9c a9       	ldd	r25, Y+52	; 0x34
    28fe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	98 ab       	std	Y+48, r25	; 0x30
    2908:	8f a7       	std	Y+47, r24	; 0x2f
    290a:	8f a5       	ldd	r24, Y+47	; 0x2f
    290c:	98 a9       	ldd	r25, Y+48	; 0x30
    290e:	9c a7       	std	Y+44, r25	; 0x2c
    2910:	8b a7       	std	Y+43, r24	; 0x2b
    2912:	8b a5       	ldd	r24, Y+43	; 0x2b
    2914:	9c a5       	ldd	r25, Y+44	; 0x2c
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <CLCD_voidInit+0x22c>
    291a:	9c a7       	std	Y+44, r25	; 0x2c
    291c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*FUNCTION SET Command : 2 lines , 5*8 font size */
	CLCD_voidSendCommand( EIGHT_BITS ); // 8 Bit Mode ==> 0x38
    291e:	88 e3       	ldi	r24, 0x38	; 56
    2920:	0e 94 92 16 	call	0x2d24	; 0x2d24 <CLCD_voidSendCommand>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	a0 e8       	ldi	r26, 0x80	; 128
    292a:	bf e3       	ldi	r27, 0x3F	; 63
    292c:	8f a3       	std	Y+39, r24	; 0x27
    292e:	98 a7       	std	Y+40, r25	; 0x28
    2930:	a9 a7       	std	Y+41, r26	; 0x29
    2932:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2934:	6f a1       	ldd	r22, Y+39	; 0x27
    2936:	78 a5       	ldd	r23, Y+40	; 0x28
    2938:	89 a5       	ldd	r24, Y+41	; 0x29
    293a:	9a a5       	ldd	r25, Y+42	; 0x2a
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	4a ef       	ldi	r20, 0xFA	; 250
    2942:	54 e4       	ldi	r21, 0x44	; 68
    2944:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	8b a3       	std	Y+35, r24	; 0x23
    294e:	9c a3       	std	Y+36, r25	; 0x24
    2950:	ad a3       	std	Y+37, r26	; 0x25
    2952:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2954:	6b a1       	ldd	r22, Y+35	; 0x23
    2956:	7c a1       	ldd	r23, Y+36	; 0x24
    2958:	8d a1       	ldd	r24, Y+37	; 0x25
    295a:	9e a1       	ldd	r25, Y+38	; 0x26
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e8       	ldi	r20, 0x80	; 128
    2962:	5f e3       	ldi	r21, 0x3F	; 63
    2964:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    2968:	88 23       	and	r24, r24
    296a:	2c f4       	brge	.+10     	; 0x2976 <CLCD_voidInit+0x28c>
		__ticks = 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9a a3       	std	Y+34, r25	; 0x22
    2972:	89 a3       	std	Y+33, r24	; 0x21
    2974:	3f c0       	rjmp	.+126    	; 0x29f4 <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    2976:	6b a1       	ldd	r22, Y+35	; 0x23
    2978:	7c a1       	ldd	r23, Y+36	; 0x24
    297a:	8d a1       	ldd	r24, Y+37	; 0x25
    297c:	9e a1       	ldd	r25, Y+38	; 0x26
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	3f ef       	ldi	r19, 0xFF	; 255
    2982:	4f e7       	ldi	r20, 0x7F	; 127
    2984:	57 e4       	ldi	r21, 0x47	; 71
    2986:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    298a:	18 16       	cp	r1, r24
    298c:	4c f5       	brge	.+82     	; 0x29e0 <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298e:	6f a1       	ldd	r22, Y+39	; 0x27
    2990:	78 a5       	ldd	r23, Y+40	; 0x28
    2992:	89 a5       	ldd	r24, Y+41	; 0x29
    2994:	9a a5       	ldd	r25, Y+42	; 0x2a
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e2       	ldi	r20, 0x20	; 32
    299c:	51 e4       	ldi	r21, 0x41	; 65
    299e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	9a a3       	std	Y+34, r25	; 0x22
    29b4:	89 a3       	std	Y+33, r24	; 0x21
    29b6:	0f c0       	rjmp	.+30     	; 0x29d6 <CLCD_voidInit+0x2ec>
    29b8:	88 ec       	ldi	r24, 0xC8	; 200
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	98 a3       	std	Y+32, r25	; 0x20
    29be:	8f 8f       	std	Y+31, r24	; 0x1f
    29c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c2:	98 a1       	ldd	r25, Y+32	; 0x20
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <CLCD_voidInit+0x2da>
    29c8:	98 a3       	std	Y+32, r25	; 0x20
    29ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29cc:	89 a1       	ldd	r24, Y+33	; 0x21
    29ce:	9a a1       	ldd	r25, Y+34	; 0x22
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	9a a3       	std	Y+34, r25	; 0x22
    29d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d6:	89 a1       	ldd	r24, Y+33	; 0x21
    29d8:	9a a1       	ldd	r25, Y+34	; 0x22
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	69 f7       	brne	.-38     	; 0x29b8 <CLCD_voidInit+0x2ce>
    29de:	14 c0       	rjmp	.+40     	; 0x2a08 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	6b a1       	ldd	r22, Y+35	; 0x23
    29e2:	7c a1       	ldd	r23, Y+36	; 0x24
    29e4:	8d a1       	ldd	r24, Y+37	; 0x25
    29e6:	9e a1       	ldd	r25, Y+38	; 0x26
    29e8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9a a3       	std	Y+34, r25	; 0x22
    29f2:	89 a3       	std	Y+33, r24	; 0x21
    29f4:	89 a1       	ldd	r24, Y+33	; 0x21
    29f6:	9a a1       	ldd	r25, Y+34	; 0x22
    29f8:	9e 8f       	std	Y+30, r25	; 0x1e
    29fa:	8d 8f       	std	Y+29, r24	; 0x1d
    29fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <CLCD_voidInit+0x316>
    2a04:	9e 8f       	std	Y+30, r25	; 0x1e
    2a06:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); // wait more than 39 Ms

	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_voidSendCommand( lcd_DisplayOn_CursorOff );
    2a08:	8c e0       	ldi	r24, 0x0C	; 12
    2a0a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <CLCD_voidSendCommand>
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a0 e8       	ldi	r26, 0x80	; 128
    2a14:	bf e3       	ldi	r27, 0x3F	; 63
    2a16:	89 8f       	std	Y+25, r24	; 0x19
    2a18:	9a 8f       	std	Y+26, r25	; 0x1a
    2a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	4a ef       	ldi	r20, 0xFA	; 250
    2a2c:	54 e4       	ldi	r21, 0x44	; 68
    2a2e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8d 8b       	std	Y+21, r24	; 0x15
    2a38:	9e 8b       	std	Y+22, r25	; 0x16
    2a3a:	af 8b       	std	Y+23, r26	; 0x17
    2a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a40:	7e 89       	ldd	r23, Y+22	; 0x16
    2a42:	8f 89       	ldd	r24, Y+23	; 0x17
    2a44:	98 8d       	ldd	r25, Y+24	; 0x18
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e8       	ldi	r20, 0x80	; 128
    2a4c:	5f e3       	ldi	r21, 0x3F	; 63
    2a4e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    2a52:	88 23       	and	r24, r24
    2a54:	2c f4       	brge	.+10     	; 0x2a60 <CLCD_voidInit+0x376>
		__ticks = 1;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	9c 8b       	std	Y+20, r25	; 0x14
    2a5c:	8b 8b       	std	Y+19, r24	; 0x13
    2a5e:	3f c0       	rjmp	.+126    	; 0x2ade <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    2a60:	6d 89       	ldd	r22, Y+21	; 0x15
    2a62:	7e 89       	ldd	r23, Y+22	; 0x16
    2a64:	8f 89       	ldd	r24, Y+23	; 0x17
    2a66:	98 8d       	ldd	r25, Y+24	; 0x18
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	4c f5       	brge	.+82     	; 0x2aca <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a78:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e2       	ldi	r20, 0x20	; 32
    2a86:	51 e4       	ldi	r21, 0x41	; 65
    2a88:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	bc 01       	movw	r22, r24
    2a92:	cd 01       	movw	r24, r26
    2a94:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9c 8b       	std	Y+20, r25	; 0x14
    2a9e:	8b 8b       	std	Y+19, r24	; 0x13
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <CLCD_voidInit+0x3d6>
    2aa2:	88 ec       	ldi	r24, 0xC8	; 200
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9a 8b       	std	Y+18, r25	; 0x12
    2aa8:	89 8b       	std	Y+17, r24	; 0x11
    2aaa:	89 89       	ldd	r24, Y+17	; 0x11
    2aac:	9a 89       	ldd	r25, Y+18	; 0x12
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <CLCD_voidInit+0x3c4>
    2ab2:	9a 8b       	std	Y+18, r25	; 0x12
    2ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aba:	01 97       	sbiw	r24, 0x01	; 1
    2abc:	9c 8b       	std	Y+20, r25	; 0x14
    2abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac4:	00 97       	sbiw	r24, 0x00	; 0
    2ac6:	69 f7       	brne	.-38     	; 0x2aa2 <CLCD_voidInit+0x3b8>
    2ac8:	14 c0       	rjmp	.+40     	; 0x2af2 <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aca:	6d 89       	ldd	r22, Y+21	; 0x15
    2acc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ace:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
    2ade:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae2:	98 8b       	std	Y+16, r25	; 0x10
    2ae4:	8f 87       	std	Y+15, r24	; 0x0f
    2ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ae8:	98 89       	ldd	r25, Y+16	; 0x10
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <CLCD_voidInit+0x400>
    2aee:	98 8b       	std	Y+16, r25	; 0x10
    2af0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* DISPLAY CLEAR */
	CLCD_voidClearScreen();
    2af2:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <CLCD_voidClearScreen>

	/* ENTRY MODE  SET*/
	CLCD_voidSendCommand( lcd_EntryMode );
    2af6:	86 e0       	ldi	r24, 0x06	; 6
    2af8:	0e 94 92 16 	call	0x2d24	; 0x2d24 <CLCD_voidSendCommand>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	a0 e8       	ldi	r26, 0x80	; 128
    2b02:	bf e3       	ldi	r27, 0x3F	; 63
    2b04:	8b 87       	std	Y+11, r24	; 0x0b
    2b06:	9c 87       	std	Y+12, r25	; 0x0c
    2b08:	ad 87       	std	Y+13, r26	; 0x0d
    2b0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4a ef       	ldi	r20, 0xFA	; 250
    2b1a:	54 e4       	ldi	r21, 0x44	; 68
    2b1c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8f 83       	std	Y+7, r24	; 0x07
    2b26:	98 87       	std	Y+8, r25	; 0x08
    2b28:	a9 87       	std	Y+9, r26	; 0x09
    2b2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2e:	78 85       	ldd	r23, Y+8	; 0x08
    2b30:	89 85       	ldd	r24, Y+9	; 0x09
    2b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <CLCD_voidInit+0x464>
		__ticks = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9e 83       	std	Y+6, r25	; 0x06
    2b4a:	8d 83       	std	Y+5, r24	; 0x05
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <CLCD_voidInit+0x4e2>
	else if (__tmp > 65535)
    2b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b50:	78 85       	ldd	r23, Y+8	; 0x08
    2b52:	89 85       	ldd	r24, Y+9	; 0x09
    2b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <CLCD_voidInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b68:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9e 83       	std	Y+6, r25	; 0x06
    2b8c:	8d 83       	std	Y+5, r24	; 0x05
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <CLCD_voidInit+0x4c4>
    2b90:	88 ec       	ldi	r24, 0xC8	; 200
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <CLCD_voidInit+0x4b2>
    2ba0:	9c 83       	std	Y+4, r25	; 0x04
    2ba2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <CLCD_voidInit+0x4a6>
    2bb6:	14 c0       	rjmp	.+40     	; 0x2be0 <CLCD_voidInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bba:	78 85       	ldd	r23, Y+8	; 0x08
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9e 83       	std	Y+6, r25	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bce:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <CLCD_voidInit+0x4ee>
    2bdc:	9a 83       	std	Y+2, r25	; 0x02
    2bde:	89 83       	std	Y+1, r24	; 0x01
	#endif




}
    2be0:	ca 5b       	subi	r28, 0xBA	; 186
    2be2:	df 4f       	sbci	r29, 0xFF	; 255
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	1f 91       	pop	r17
    2bf4:	0f 91       	pop	r16
    2bf6:	08 95       	ret

00002bf8 <CLCD_voidSendData>:
* Breif : This Function send data to the port which is defined in config.h
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void CLCD_voidSendData    ( u8 Copy_u8Data ){
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	2f 97       	sbiw	r28, 0x0f	; 15
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	8f 87       	std	Y+15, r24	; 0x0f

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      8 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#if   CLCD_MODE == 8

	DIO_enumSetPortValue ( CLCD_DATA_PORT    , Copy_u8Data        );
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c12:	0e 94 db 23 	call	0x47b6	; 0x47b6 <DIO_enumSetPortValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	60 e0       	ldi	r22, 0x00	; 0
    2c1a:	41 e0       	ldi	r20, 0x01	; 1
    2c1c:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	62 e0       	ldi	r22, 0x02	; 2
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
	CLCD_voidSendFallingEdge();
    2c2a:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <CLCD_voidSendFallingEdge>
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	a0 e8       	ldi	r26, 0x80	; 128
    2c34:	bf e3       	ldi	r27, 0x3F	; 63
    2c36:	8b 87       	std	Y+11, r24	; 0x0b
    2c38:	9c 87       	std	Y+12, r25	; 0x0c
    2c3a:	ad 87       	std	Y+13, r26	; 0x0d
    2c3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a ef       	ldi	r20, 0xFA	; 250
    2c4c:	54 e4       	ldi	r21, 0x44	; 68
    2c4e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	8f 83       	std	Y+7, r24	; 0x07
    2c58:	98 87       	std	Y+8, r25	; 0x08
    2c5a:	a9 87       	std	Y+9, r26	; 0x09
    2c5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c60:	78 85       	ldd	r23, Y+8	; 0x08
    2c62:	89 85       	ldd	r24, Y+9	; 0x09
    2c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	2c f4       	brge	.+10     	; 0x2c80 <CLCD_voidSendData+0x88>
		__ticks = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	9e 83       	std	Y+6, r25	; 0x06
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    2c80:	6f 81       	ldd	r22, Y+7	; 0x07
    2c82:	78 85       	ldd	r23, Y+8	; 0x08
    2c84:	89 85       	ldd	r24, Y+9	; 0x09
    2c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	4c f5       	brge	.+82     	; 0x2cea <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <CLCD_voidSendData+0xe8>
    2cc2:	88 ec       	ldi	r24, 0xC8	; 200
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9c 83       	std	Y+4, r25	; 0x04
    2cc8:	8b 83       	std	Y+3, r24	; 0x03
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <CLCD_voidSendData+0xd6>
    2cd2:	9c 83       	std	Y+4, r25	; 0x04
    2cd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <CLCD_voidSendData+0xca>
    2ce8:	14 c0       	rjmp	.+40     	; 0x2d12 <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <CLCD_voidSendData+0x112>
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);

}
    2d12:	2f 96       	adiw	r28, 0x0f	; 15
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <CLCD_voidSendCommand>:
* Parameters :
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (CLCD_voidSendData)
*/
void CLCD_voidSendCommand ( u8 Copy_u8Command ){
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	2f 97       	sbiw	r28, 0x0f	; 15
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	8f 87       	std	Y+15, r24	; 0x0f

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      8 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#if   CLCD_MODE == 8

	DIO_enumSetPortValue ( CLCD_DATA_PORT    , Copy_u8Command     );
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d3e:	0e 94 db 23 	call	0x47b6	; 0x47b6 <DIO_enumSetPortValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
	// RW always connect to GND to Write
	DIO_enumSetPinValue          (CLCD_CONTROL_PORT,CLCD_RW , DIO_PIN_LOW    );
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	62 e0       	ldi	r22, 0x02	; 2
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
	CLCD_voidSendFallingEdge();
    2d56:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <CLCD_voidSendFallingEdge>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	a0 e8       	ldi	r26, 0x80	; 128
    2d60:	bf e3       	ldi	r27, 0x3F	; 63
    2d62:	8b 87       	std	Y+11, r24	; 0x0b
    2d64:	9c 87       	std	Y+12, r25	; 0x0c
    2d66:	ad 87       	std	Y+13, r26	; 0x0d
    2d68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d70:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4a ef       	ldi	r20, 0xFA	; 250
    2d78:	54 e4       	ldi	r21, 0x44	; 68
    2d7a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	8f 83       	std	Y+7, r24	; 0x07
    2d84:	98 87       	std	Y+8, r25	; 0x08
    2d86:	a9 87       	std	Y+9, r26	; 0x09
    2d88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8c:	78 85       	ldd	r23, Y+8	; 0x08
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	3f c0       	rjmp	.+126    	; 0x2e2a <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    2dac:	6f 81       	ldd	r22, Y+7	; 0x07
    2dae:	78 85       	ldd	r23, Y+8	; 0x08
    2db0:	89 85       	ldd	r24, Y+9	; 0x09
    2db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	57 e4       	ldi	r21, 0x47	; 71
    2dbc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    2dc0:	18 16       	cp	r1, r24
    2dc2:	4c f5       	brge	.+82     	; 0x2e16 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9e 83       	std	Y+6, r25	; 0x06
    2dea:	8d 83       	std	Y+5, r24	; 0x05
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <CLCD_voidSendCommand+0xe8>
    2dee:	88 ec       	ldi	r24, 0xC8	; 200
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	8b 83       	std	Y+3, r24	; 0x03
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <CLCD_voidSendCommand+0xd6>
    2dfe:	9c 83       	std	Y+4, r25	; 0x04
    2e00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	9e 81       	ldd	r25, Y+6	; 0x06
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	9e 83       	std	Y+6, r25	; 0x06
    2e0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	69 f7       	brne	.-38     	; 0x2dee <CLCD_voidSendCommand+0xca>
    2e14:	14 c0       	rjmp	.+40     	; 0x2e3e <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	6f 81       	ldd	r22, Y+7	; 0x07
    2e18:	78 85       	ldd	r23, Y+8	; 0x08
    2e1a:	89 85       	ldd	r24, Y+9	; 0x09
    2e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9e 83       	std	Y+6, r25	; 0x06
    2e28:	8d 83       	std	Y+5, r24	; 0x05
    2e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2e:	9a 83       	std	Y+2, r25	; 0x02
    2e30:	89 83       	std	Y+1, r24	; 0x01
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	9a 81       	ldd	r25, Y+2	; 0x02
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <CLCD_voidSendCommand+0x112>
    2e3a:	9a 83       	std	Y+2, r25	; 0x02
    2e3c:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);

}
    2e3e:	2f 96       	adiw	r28, 0x0f	; 15
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	08 95       	ret

00002e50 <CLCD_voidSendString>:
* Breif : This Function send string to the port which is defined in config.h
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <CLCD_voidSendString+0x6>
    2e56:	0f 92       	push	r0
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	9b 83       	std	Y+3, r25	; 0x03
    2e5e:	8a 83       	std	Y+2, r24	; 0x02

	u8 LOC_u8Iterator = 0 ;
    2e60:	19 82       	std	Y+1, r1	; 0x01
    2e62:	0e c0       	rjmp	.+28     	; 0x2e80 <CLCD_voidSendString+0x30>

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6e:	fc 01       	movw	r30, r24
    2e70:	e2 0f       	add	r30, r18
    2e72:	f3 1f       	adc	r31, r19
    2e74:	80 81       	ld	r24, Z
    2e76:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <CLCD_voidSendData>
		LOC_u8Iterator++ ;
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	8f 5f       	subi	r24, 0xFF	; 255
    2e7e:	89 83       	std	Y+1, r24	; 0x01
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	e2 0f       	add	r30, r18
    2e8e:	f3 1f       	adc	r31, r19
    2e90:	80 81       	ld	r24, Z
    2e92:	88 23       	and	r24, r24
    2e94:	39 f7       	brne	.-50     	; 0x2e64 <CLCD_voidSendString+0x14>
		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;

	}

}
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <CLCD_voidSendNumber>:
* Breif : This Function send number to the port which is defined in config.h
* Parameters :
            => Copy_u64Number --> number that you want to display
* return : nothing
*/
void CLCD_voidSendNumber   ( u64 Copy_u64Number    ){
    2ea2:	af 92       	push	r10
    2ea4:	bf 92       	push	r11
    2ea6:	cf 92       	push	r12
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	0f 93       	push	r16
    2eb0:	1f 93       	push	r17
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	cd b7       	in	r28, 0x3d	; 61
    2eb8:	de b7       	in	r29, 0x3e	; 62
    2eba:	c6 56       	subi	r28, 0x66	; 102
    2ebc:	d0 40       	sbci	r29, 0x00	; 0
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	29 87       	std	Y+9, r18	; 0x09
    2eca:	3a 87       	std	Y+10, r19	; 0x0a
    2ecc:	4b 87       	std	Y+11, r20	; 0x0b
    2ece:	5c 87       	std	Y+12, r21	; 0x0c
    2ed0:	6d 87       	std	Y+13, r22	; 0x0d
    2ed2:	7e 87       	std	Y+14, r23	; 0x0e
    2ed4:	8f 87       	std	Y+15, r24	; 0x0f
    2ed6:	98 8b       	std	Y+16, r25	; 0x10

	u64 LOC_u64Reversed = 1 ;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	1a 82       	std	Y+2, r1	; 0x02
    2ede:	1b 82       	std	Y+3, r1	; 0x03
    2ee0:	1c 82       	std	Y+4, r1	; 0x04
    2ee2:	1d 82       	std	Y+5, r1	; 0x05
    2ee4:	1e 82       	std	Y+6, r1	; 0x06
    2ee6:	1f 82       	std	Y+7, r1	; 0x07
    2ee8:	18 86       	std	Y+8, r1	; 0x08

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }
    2eea:	89 85       	ldd	r24, Y+9	; 0x09
    2eec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eee:	89 2b       	or	r24, r25
    2ef0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ef2:	89 2b       	or	r24, r25
    2ef4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ef6:	89 2b       	or	r24, r25
    2ef8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2efa:	89 2b       	or	r24, r25
    2efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efe:	89 2b       	or	r24, r25
    2f00:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f02:	89 2b       	or	r24, r25
    2f04:	98 89       	ldd	r25, Y+16	; 0x10
    2f06:	89 2b       	or	r24, r25
    2f08:	88 23       	and	r24, r24
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <CLCD_voidSendNumber+0x6c>
    2f0c:	62 c3       	rjmp	.+1732   	; 0x35d2 <CLCD_voidSendNumber+0x730>
    2f0e:	80 e3       	ldi	r24, 0x30	; 48
    2f10:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <CLCD_voidSendData>
    2f14:	ef c3       	rjmp	.+2014   	; 0x36f4 <CLCD_voidSendNumber+0x852>

	else{

		while( Copy_u64Number != 0 ){

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
    2f16:	29 81       	ldd	r18, Y+1	; 0x01
    2f18:	3a 81       	ldd	r19, Y+2	; 0x02
    2f1a:	4b 81       	ldd	r20, Y+3	; 0x03
    2f1c:	5c 81       	ldd	r21, Y+4	; 0x04
    2f1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f20:	7e 81       	ldd	r23, Y+6	; 0x06
    2f22:	8f 81       	ldd	r24, Y+7	; 0x07
    2f24:	98 85       	ldd	r25, Y+8	; 0x08
    2f26:	a2 2e       	mov	r10, r18
    2f28:	b3 2e       	mov	r11, r19
    2f2a:	c4 2e       	mov	r12, r20
    2f2c:	d5 2e       	mov	r13, r21
    2f2e:	e6 2e       	mov	r14, r22
    2f30:	f7 2e       	mov	r15, r23
    2f32:	08 2f       	mov	r16, r24
    2f34:	19 2f       	mov	r17, r25
    2f36:	2a 2d       	mov	r18, r10
    2f38:	3b 2d       	mov	r19, r11
    2f3a:	4c 2d       	mov	r20, r12
    2f3c:	5d 2d       	mov	r21, r13
    2f3e:	6e 2d       	mov	r22, r14
    2f40:	7f 2d       	mov	r23, r15
    2f42:	80 2f       	mov	r24, r16
    2f44:	91 2f       	mov	r25, r17
    2f46:	01 e0       	ldi	r16, 0x01	; 1
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2f4c:	29 a3       	std	Y+33, r18	; 0x21
    2f4e:	3a a3       	std	Y+34, r19	; 0x22
    2f50:	4b a3       	std	Y+35, r20	; 0x23
    2f52:	5c a3       	std	Y+36, r21	; 0x24
    2f54:	6d a3       	std	Y+37, r22	; 0x25
    2f56:	7e a3       	std	Y+38, r23	; 0x26
    2f58:	8f a3       	std	Y+39, r24	; 0x27
    2f5a:	98 a7       	std	Y+40, r25	; 0x28
    2f5c:	29 a1       	ldd	r18, Y+33	; 0x21
    2f5e:	3a a1       	ldd	r19, Y+34	; 0x22
    2f60:	4b a1       	ldd	r20, Y+35	; 0x23
    2f62:	5c a1       	ldd	r21, Y+36	; 0x24
    2f64:	6d a1       	ldd	r22, Y+37	; 0x25
    2f66:	7e a1       	ldd	r23, Y+38	; 0x26
    2f68:	8f a1       	ldd	r24, Y+39	; 0x27
    2f6a:	98 a5       	ldd	r25, Y+40	; 0x28
    2f6c:	02 e0       	ldi	r16, 0x02	; 2
    2f6e:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2f72:	29 a7       	std	Y+41, r18	; 0x29
    2f74:	3a a7       	std	Y+42, r19	; 0x2a
    2f76:	4b a7       	std	Y+43, r20	; 0x2b
    2f78:	5c a7       	std	Y+44, r21	; 0x2c
    2f7a:	6d a7       	std	Y+45, r22	; 0x2d
    2f7c:	7e a7       	std	Y+46, r23	; 0x2e
    2f7e:	8f a7       	std	Y+47, r24	; 0x2f
    2f80:	98 ab       	std	Y+48, r25	; 0x30
    2f82:	89 a1       	ldd	r24, Y+33	; 0x21
    2f84:	99 a5       	ldd	r25, Y+41	; 0x29
    2f86:	89 0f       	add	r24, r25
    2f88:	89 ab       	std	Y+49, r24	; 0x31
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	89 af       	std	Y+57, r24	; 0x39
    2f8e:	99 a9       	ldd	r25, Y+49	; 0x31
    2f90:	89 a1       	ldd	r24, Y+33	; 0x21
    2f92:	98 17       	cp	r25, r24
    2f94:	08 f0       	brcs	.+2      	; 0x2f98 <CLCD_voidSendNumber+0xf6>
    2f96:	19 ae       	std	Y+57, r1	; 0x39
    2f98:	9a a1       	ldd	r25, Y+34	; 0x22
    2f9a:	8a a5       	ldd	r24, Y+42	; 0x2a
    2f9c:	98 0f       	add	r25, r24
    2f9e:	9a ab       	std	Y+50, r25	; 0x32
    2fa0:	91 e0       	ldi	r25, 0x01	; 1
    2fa2:	9a af       	std	Y+58, r25	; 0x3a
    2fa4:	8a a9       	ldd	r24, Y+50	; 0x32
    2fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa8:	89 17       	cp	r24, r25
    2faa:	08 f0       	brcs	.+2      	; 0x2fae <CLCD_voidSendNumber+0x10c>
    2fac:	1a ae       	std	Y+58, r1	; 0x3a
    2fae:	89 ad       	ldd	r24, Y+57	; 0x39
    2fb0:	9a a9       	ldd	r25, Y+50	; 0x32
    2fb2:	89 0f       	add	r24, r25
    2fb4:	8b af       	std	Y+59, r24	; 0x3b
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	8c af       	std	Y+60, r24	; 0x3c
    2fba:	9b ad       	ldd	r25, Y+59	; 0x3b
    2fbc:	8a a9       	ldd	r24, Y+50	; 0x32
    2fbe:	98 17       	cp	r25, r24
    2fc0:	08 f0       	brcs	.+2      	; 0x2fc4 <CLCD_voidSendNumber+0x122>
    2fc2:	1c ae       	std	Y+60, r1	; 0x3c
    2fc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fc6:	8c ad       	ldd	r24, Y+60	; 0x3c
    2fc8:	98 2b       	or	r25, r24
    2fca:	9a af       	std	Y+58, r25	; 0x3a
    2fcc:	9b ad       	ldd	r25, Y+59	; 0x3b
    2fce:	9a ab       	std	Y+50, r25	; 0x32
    2fd0:	8b a1       	ldd	r24, Y+35	; 0x23
    2fd2:	9b a5       	ldd	r25, Y+43	; 0x2b
    2fd4:	89 0f       	add	r24, r25
    2fd6:	8b ab       	std	Y+51, r24	; 0x33
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	8d af       	std	Y+61, r24	; 0x3d
    2fdc:	9b a9       	ldd	r25, Y+51	; 0x33
    2fde:	8b a1       	ldd	r24, Y+35	; 0x23
    2fe0:	98 17       	cp	r25, r24
    2fe2:	08 f0       	brcs	.+2      	; 0x2fe6 <CLCD_voidSendNumber+0x144>
    2fe4:	1d ae       	std	Y+61, r1	; 0x3d
    2fe6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    2fea:	98 0f       	add	r25, r24
    2fec:	9e af       	std	Y+62, r25	; 0x3e
    2fee:	91 e0       	ldi	r25, 0x01	; 1
    2ff0:	9f af       	std	Y+63, r25	; 0x3f
    2ff2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ff4:	9b a9       	ldd	r25, Y+51	; 0x33
    2ff6:	89 17       	cp	r24, r25
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <CLCD_voidSendNumber+0x15a>
    2ffa:	1f ae       	std	Y+63, r1	; 0x3f
    2ffc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ffe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3000:	89 2b       	or	r24, r25
    3002:	8d af       	std	Y+61, r24	; 0x3d
    3004:	8e ad       	ldd	r24, Y+62	; 0x3e
    3006:	8b ab       	std	Y+51, r24	; 0x33
    3008:	9c a1       	ldd	r25, Y+36	; 0x24
    300a:	8c a5       	ldd	r24, Y+44	; 0x2c
    300c:	98 0f       	add	r25, r24
    300e:	9c ab       	std	Y+52, r25	; 0x34
    3010:	91 e0       	ldi	r25, 0x01	; 1
    3012:	21 96       	adiw	r28, 0x01	; 1
    3014:	9f af       	std	Y+63, r25	; 0x3f
    3016:	21 97       	sbiw	r28, 0x01	; 1
    3018:	8c a9       	ldd	r24, Y+52	; 0x34
    301a:	9c a1       	ldd	r25, Y+36	; 0x24
    301c:	89 17       	cp	r24, r25
    301e:	18 f0       	brcs	.+6      	; 0x3026 <CLCD_voidSendNumber+0x184>
    3020:	21 96       	adiw	r28, 0x01	; 1
    3022:	1f ae       	std	Y+63, r1	; 0x3f
    3024:	21 97       	sbiw	r28, 0x01	; 1
    3026:	8d ad       	ldd	r24, Y+61	; 0x3d
    3028:	9c a9       	ldd	r25, Y+52	; 0x34
    302a:	89 0f       	add	r24, r25
    302c:	22 96       	adiw	r28, 0x02	; 2
    302e:	8f af       	std	Y+63, r24	; 0x3f
    3030:	22 97       	sbiw	r28, 0x02	; 2
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	23 96       	adiw	r28, 0x03	; 3
    3036:	8f af       	std	Y+63, r24	; 0x3f
    3038:	23 97       	sbiw	r28, 0x03	; 3
    303a:	22 96       	adiw	r28, 0x02	; 2
    303c:	9f ad       	ldd	r25, Y+63	; 0x3f
    303e:	22 97       	sbiw	r28, 0x02	; 2
    3040:	8c a9       	ldd	r24, Y+52	; 0x34
    3042:	98 17       	cp	r25, r24
    3044:	18 f0       	brcs	.+6      	; 0x304c <CLCD_voidSendNumber+0x1aa>
    3046:	23 96       	adiw	r28, 0x03	; 3
    3048:	1f ae       	std	Y+63, r1	; 0x3f
    304a:	23 97       	sbiw	r28, 0x03	; 3
    304c:	21 96       	adiw	r28, 0x01	; 1
    304e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3050:	21 97       	sbiw	r28, 0x01	; 1
    3052:	23 96       	adiw	r28, 0x03	; 3
    3054:	8f ad       	ldd	r24, Y+63	; 0x3f
    3056:	23 97       	sbiw	r28, 0x03	; 3
    3058:	98 2b       	or	r25, r24
    305a:	21 96       	adiw	r28, 0x01	; 1
    305c:	9f af       	std	Y+63, r25	; 0x3f
    305e:	21 97       	sbiw	r28, 0x01	; 1
    3060:	22 96       	adiw	r28, 0x02	; 2
    3062:	9f ad       	ldd	r25, Y+63	; 0x3f
    3064:	22 97       	sbiw	r28, 0x02	; 2
    3066:	9c ab       	std	Y+52, r25	; 0x34
    3068:	8d a1       	ldd	r24, Y+37	; 0x25
    306a:	9d a5       	ldd	r25, Y+45	; 0x2d
    306c:	89 0f       	add	r24, r25
    306e:	8d ab       	std	Y+53, r24	; 0x35
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	24 96       	adiw	r28, 0x04	; 4
    3074:	8f af       	std	Y+63, r24	; 0x3f
    3076:	24 97       	sbiw	r28, 0x04	; 4
    3078:	9d a9       	ldd	r25, Y+53	; 0x35
    307a:	8d a1       	ldd	r24, Y+37	; 0x25
    307c:	98 17       	cp	r25, r24
    307e:	18 f0       	brcs	.+6      	; 0x3086 <CLCD_voidSendNumber+0x1e4>
    3080:	24 96       	adiw	r28, 0x04	; 4
    3082:	1f ae       	std	Y+63, r1	; 0x3f
    3084:	24 97       	sbiw	r28, 0x04	; 4
    3086:	21 96       	adiw	r28, 0x01	; 1
    3088:	9f ad       	ldd	r25, Y+63	; 0x3f
    308a:	21 97       	sbiw	r28, 0x01	; 1
    308c:	8d a9       	ldd	r24, Y+53	; 0x35
    308e:	98 0f       	add	r25, r24
    3090:	25 96       	adiw	r28, 0x05	; 5
    3092:	9f af       	std	Y+63, r25	; 0x3f
    3094:	25 97       	sbiw	r28, 0x05	; 5
    3096:	91 e0       	ldi	r25, 0x01	; 1
    3098:	26 96       	adiw	r28, 0x06	; 6
    309a:	9f af       	std	Y+63, r25	; 0x3f
    309c:	26 97       	sbiw	r28, 0x06	; 6
    309e:	25 96       	adiw	r28, 0x05	; 5
    30a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    30a2:	25 97       	sbiw	r28, 0x05	; 5
    30a4:	9d a9       	ldd	r25, Y+53	; 0x35
    30a6:	89 17       	cp	r24, r25
    30a8:	18 f0       	brcs	.+6      	; 0x30b0 <CLCD_voidSendNumber+0x20e>
    30aa:	26 96       	adiw	r28, 0x06	; 6
    30ac:	1f ae       	std	Y+63, r1	; 0x3f
    30ae:	26 97       	sbiw	r28, 0x06	; 6
    30b0:	24 96       	adiw	r28, 0x04	; 4
    30b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    30b4:	24 97       	sbiw	r28, 0x04	; 4
    30b6:	26 96       	adiw	r28, 0x06	; 6
    30b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    30ba:	26 97       	sbiw	r28, 0x06	; 6
    30bc:	89 2b       	or	r24, r25
    30be:	24 96       	adiw	r28, 0x04	; 4
    30c0:	8f af       	std	Y+63, r24	; 0x3f
    30c2:	24 97       	sbiw	r28, 0x04	; 4
    30c4:	25 96       	adiw	r28, 0x05	; 5
    30c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    30c8:	25 97       	sbiw	r28, 0x05	; 5
    30ca:	8d ab       	std	Y+53, r24	; 0x35
    30cc:	9e a1       	ldd	r25, Y+38	; 0x26
    30ce:	8e a5       	ldd	r24, Y+46	; 0x2e
    30d0:	98 0f       	add	r25, r24
    30d2:	9e ab       	std	Y+54, r25	; 0x36
    30d4:	91 e0       	ldi	r25, 0x01	; 1
    30d6:	27 96       	adiw	r28, 0x07	; 7
    30d8:	9f af       	std	Y+63, r25	; 0x3f
    30da:	27 97       	sbiw	r28, 0x07	; 7
    30dc:	8e a9       	ldd	r24, Y+54	; 0x36
    30de:	9e a1       	ldd	r25, Y+38	; 0x26
    30e0:	89 17       	cp	r24, r25
    30e2:	18 f0       	brcs	.+6      	; 0x30ea <CLCD_voidSendNumber+0x248>
    30e4:	27 96       	adiw	r28, 0x07	; 7
    30e6:	1f ae       	std	Y+63, r1	; 0x3f
    30e8:	27 97       	sbiw	r28, 0x07	; 7
    30ea:	24 96       	adiw	r28, 0x04	; 4
    30ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    30ee:	24 97       	sbiw	r28, 0x04	; 4
    30f0:	9e a9       	ldd	r25, Y+54	; 0x36
    30f2:	89 0f       	add	r24, r25
    30f4:	28 96       	adiw	r28, 0x08	; 8
    30f6:	8f af       	std	Y+63, r24	; 0x3f
    30f8:	28 97       	sbiw	r28, 0x08	; 8
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	29 96       	adiw	r28, 0x09	; 9
    30fe:	8f af       	std	Y+63, r24	; 0x3f
    3100:	29 97       	sbiw	r28, 0x09	; 9
    3102:	28 96       	adiw	r28, 0x08	; 8
    3104:	9f ad       	ldd	r25, Y+63	; 0x3f
    3106:	28 97       	sbiw	r28, 0x08	; 8
    3108:	8e a9       	ldd	r24, Y+54	; 0x36
    310a:	98 17       	cp	r25, r24
    310c:	18 f0       	brcs	.+6      	; 0x3114 <CLCD_voidSendNumber+0x272>
    310e:	29 96       	adiw	r28, 0x09	; 9
    3110:	1f ae       	std	Y+63, r1	; 0x3f
    3112:	29 97       	sbiw	r28, 0x09	; 9
    3114:	27 96       	adiw	r28, 0x07	; 7
    3116:	9f ad       	ldd	r25, Y+63	; 0x3f
    3118:	27 97       	sbiw	r28, 0x07	; 7
    311a:	29 96       	adiw	r28, 0x09	; 9
    311c:	8f ad       	ldd	r24, Y+63	; 0x3f
    311e:	29 97       	sbiw	r28, 0x09	; 9
    3120:	98 2b       	or	r25, r24
    3122:	27 96       	adiw	r28, 0x07	; 7
    3124:	9f af       	std	Y+63, r25	; 0x3f
    3126:	27 97       	sbiw	r28, 0x07	; 7
    3128:	28 96       	adiw	r28, 0x08	; 8
    312a:	9f ad       	ldd	r25, Y+63	; 0x3f
    312c:	28 97       	sbiw	r28, 0x08	; 8
    312e:	9e ab       	std	Y+54, r25	; 0x36
    3130:	8f a1       	ldd	r24, Y+39	; 0x27
    3132:	9f a5       	ldd	r25, Y+47	; 0x2f
    3134:	89 0f       	add	r24, r25
    3136:	8f ab       	std	Y+55, r24	; 0x37
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	2a 96       	adiw	r28, 0x0a	; 10
    313c:	8f af       	std	Y+63, r24	; 0x3f
    313e:	2a 97       	sbiw	r28, 0x0a	; 10
    3140:	9f a9       	ldd	r25, Y+55	; 0x37
    3142:	8f a1       	ldd	r24, Y+39	; 0x27
    3144:	98 17       	cp	r25, r24
    3146:	18 f0       	brcs	.+6      	; 0x314e <CLCD_voidSendNumber+0x2ac>
    3148:	2a 96       	adiw	r28, 0x0a	; 10
    314a:	1f ae       	std	Y+63, r1	; 0x3f
    314c:	2a 97       	sbiw	r28, 0x0a	; 10
    314e:	27 96       	adiw	r28, 0x07	; 7
    3150:	9f ad       	ldd	r25, Y+63	; 0x3f
    3152:	27 97       	sbiw	r28, 0x07	; 7
    3154:	8f a9       	ldd	r24, Y+55	; 0x37
    3156:	98 0f       	add	r25, r24
    3158:	2b 96       	adiw	r28, 0x0b	; 11
    315a:	9f af       	std	Y+63, r25	; 0x3f
    315c:	2b 97       	sbiw	r28, 0x0b	; 11
    315e:	91 e0       	ldi	r25, 0x01	; 1
    3160:	2c 96       	adiw	r28, 0x0c	; 12
    3162:	9f af       	std	Y+63, r25	; 0x3f
    3164:	2c 97       	sbiw	r28, 0x0c	; 12
    3166:	2b 96       	adiw	r28, 0x0b	; 11
    3168:	8f ad       	ldd	r24, Y+63	; 0x3f
    316a:	2b 97       	sbiw	r28, 0x0b	; 11
    316c:	9f a9       	ldd	r25, Y+55	; 0x37
    316e:	89 17       	cp	r24, r25
    3170:	18 f0       	brcs	.+6      	; 0x3178 <CLCD_voidSendNumber+0x2d6>
    3172:	2c 96       	adiw	r28, 0x0c	; 12
    3174:	1f ae       	std	Y+63, r1	; 0x3f
    3176:	2c 97       	sbiw	r28, 0x0c	; 12
    3178:	2a 96       	adiw	r28, 0x0a	; 10
    317a:	8f ad       	ldd	r24, Y+63	; 0x3f
    317c:	2a 97       	sbiw	r28, 0x0a	; 10
    317e:	2c 96       	adiw	r28, 0x0c	; 12
    3180:	9f ad       	ldd	r25, Y+63	; 0x3f
    3182:	2c 97       	sbiw	r28, 0x0c	; 12
    3184:	89 2b       	or	r24, r25
    3186:	2a 96       	adiw	r28, 0x0a	; 10
    3188:	8f af       	std	Y+63, r24	; 0x3f
    318a:	2a 97       	sbiw	r28, 0x0a	; 10
    318c:	2b 96       	adiw	r28, 0x0b	; 11
    318e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3190:	2b 97       	sbiw	r28, 0x0b	; 11
    3192:	8f ab       	std	Y+55, r24	; 0x37
    3194:	98 a5       	ldd	r25, Y+40	; 0x28
    3196:	88 a9       	ldd	r24, Y+48	; 0x30
    3198:	98 0f       	add	r25, r24
    319a:	98 af       	std	Y+56, r25	; 0x38
    319c:	2a 96       	adiw	r28, 0x0a	; 10
    319e:	8f ad       	ldd	r24, Y+63	; 0x3f
    31a0:	2a 97       	sbiw	r28, 0x0a	; 10
    31a2:	98 ad       	ldd	r25, Y+56	; 0x38
    31a4:	89 0f       	add	r24, r25
    31a6:	88 af       	std	Y+56, r24	; 0x38
    31a8:	89 a9       	ldd	r24, Y+49	; 0x31
    31aa:	89 8f       	std	Y+25, r24	; 0x19
    31ac:	9a a9       	ldd	r25, Y+50	; 0x32
    31ae:	9a 8f       	std	Y+26, r25	; 0x1a
    31b0:	8b a9       	ldd	r24, Y+51	; 0x33
    31b2:	8b 8f       	std	Y+27, r24	; 0x1b
    31b4:	9c a9       	ldd	r25, Y+52	; 0x34
    31b6:	9c 8f       	std	Y+28, r25	; 0x1c
    31b8:	8d a9       	ldd	r24, Y+53	; 0x35
    31ba:	8d 8f       	std	Y+29, r24	; 0x1d
    31bc:	9e a9       	ldd	r25, Y+54	; 0x36
    31be:	9e 8f       	std	Y+30, r25	; 0x1e
    31c0:	8f a9       	ldd	r24, Y+55	; 0x37
    31c2:	8f 8f       	std	Y+31, r24	; 0x1f
    31c4:	98 ad       	ldd	r25, Y+56	; 0x38
    31c6:	98 a3       	std	Y+32, r25	; 0x20
    31c8:	a9 84       	ldd	r10, Y+9	; 0x09
    31ca:	ba 84       	ldd	r11, Y+10	; 0x0a
    31cc:	cb 84       	ldd	r12, Y+11	; 0x0b
    31ce:	dc 84       	ldd	r13, Y+12	; 0x0c
    31d0:	ed 84       	ldd	r14, Y+13	; 0x0d
    31d2:	fe 84       	ldd	r15, Y+14	; 0x0e
    31d4:	0f 85       	ldd	r16, Y+15	; 0x0f
    31d6:	18 89       	ldd	r17, Y+16	; 0x10
    31d8:	2a 2d       	mov	r18, r10
    31da:	3b 2d       	mov	r19, r11
    31dc:	4c 2d       	mov	r20, r12
    31de:	5d 2d       	mov	r21, r13
    31e0:	6e 2d       	mov	r22, r14
    31e2:	7f 2d       	mov	r23, r15
    31e4:	80 2f       	mov	r24, r16
    31e6:	91 2f       	mov	r25, r17
    31e8:	0f 2e       	mov	r0, r31
    31ea:	fa e0       	ldi	r31, 0x0A	; 10
    31ec:	af 2e       	mov	r10, r31
    31ee:	f0 2d       	mov	r31, r0
    31f0:	bb 24       	eor	r11, r11
    31f2:	cc 24       	eor	r12, r12
    31f4:	dd 24       	eor	r13, r13
    31f6:	ee 24       	eor	r14, r14
    31f8:	ff 24       	eor	r15, r15
    31fa:	00 e0       	ldi	r16, 0x00	; 0
    31fc:	10 e0       	ldi	r17, 0x00	; 0
    31fe:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    3202:	a2 2e       	mov	r10, r18
    3204:	b3 2e       	mov	r11, r19
    3206:	c4 2e       	mov	r12, r20
    3208:	d5 2e       	mov	r13, r21
    320a:	e6 2e       	mov	r14, r22
    320c:	f7 2e       	mov	r15, r23
    320e:	08 2f       	mov	r16, r24
    3210:	19 2f       	mov	r17, r25
    3212:	a9 8a       	std	Y+17, r10	; 0x11
    3214:	ba 8a       	std	Y+18, r11	; 0x12
    3216:	cb 8a       	std	Y+19, r12	; 0x13
    3218:	dc 8a       	std	Y+20, r13	; 0x14
    321a:	ed 8a       	std	Y+21, r14	; 0x15
    321c:	fe 8a       	std	Y+22, r15	; 0x16
    321e:	0f 8b       	std	Y+23, r16	; 0x17
    3220:	18 8f       	std	Y+24, r17	; 0x18
    3222:	89 8d       	ldd	r24, Y+25	; 0x19
    3224:	99 89       	ldd	r25, Y+17	; 0x11
    3226:	89 0f       	add	r24, r25
    3228:	2d 96       	adiw	r28, 0x0d	; 13
    322a:	8f af       	std	Y+63, r24	; 0x3f
    322c:	2d 97       	sbiw	r28, 0x0d	; 13
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	65 96       	adiw	r28, 0x15	; 21
    3232:	8f af       	std	Y+63, r24	; 0x3f
    3234:	65 97       	sbiw	r28, 0x15	; 21
    3236:	2d 96       	adiw	r28, 0x0d	; 13
    3238:	9f ad       	ldd	r25, Y+63	; 0x3f
    323a:	2d 97       	sbiw	r28, 0x0d	; 13
    323c:	89 8d       	ldd	r24, Y+25	; 0x19
    323e:	98 17       	cp	r25, r24
    3240:	18 f0       	brcs	.+6      	; 0x3248 <CLCD_voidSendNumber+0x3a6>
    3242:	65 96       	adiw	r28, 0x15	; 21
    3244:	1f ae       	std	Y+63, r1	; 0x3f
    3246:	65 97       	sbiw	r28, 0x15	; 21
    3248:	9a 8d       	ldd	r25, Y+26	; 0x1a
    324a:	8a 89       	ldd	r24, Y+18	; 0x12
    324c:	98 0f       	add	r25, r24
    324e:	2e 96       	adiw	r28, 0x0e	; 14
    3250:	9f af       	std	Y+63, r25	; 0x3f
    3252:	2e 97       	sbiw	r28, 0x0e	; 14
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	66 96       	adiw	r28, 0x16	; 22
    3258:	9f af       	std	Y+63, r25	; 0x3f
    325a:	66 97       	sbiw	r28, 0x16	; 22
    325c:	2e 96       	adiw	r28, 0x0e	; 14
    325e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3260:	2e 97       	sbiw	r28, 0x0e	; 14
    3262:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3264:	89 17       	cp	r24, r25
    3266:	18 f0       	brcs	.+6      	; 0x326e <CLCD_voidSendNumber+0x3cc>
    3268:	66 96       	adiw	r28, 0x16	; 22
    326a:	1f ae       	std	Y+63, r1	; 0x3f
    326c:	66 97       	sbiw	r28, 0x16	; 22
    326e:	65 96       	adiw	r28, 0x15	; 21
    3270:	8f ad       	ldd	r24, Y+63	; 0x3f
    3272:	65 97       	sbiw	r28, 0x15	; 21
    3274:	2e 96       	adiw	r28, 0x0e	; 14
    3276:	9f ad       	ldd	r25, Y+63	; 0x3f
    3278:	2e 97       	sbiw	r28, 0x0e	; 14
    327a:	89 0f       	add	r24, r25
    327c:	67 96       	adiw	r28, 0x17	; 23
    327e:	8f af       	std	Y+63, r24	; 0x3f
    3280:	67 97       	sbiw	r28, 0x17	; 23
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	68 96       	adiw	r28, 0x18	; 24
    3286:	8f af       	std	Y+63, r24	; 0x3f
    3288:	68 97       	sbiw	r28, 0x18	; 24
    328a:	67 96       	adiw	r28, 0x17	; 23
    328c:	9f ad       	ldd	r25, Y+63	; 0x3f
    328e:	67 97       	sbiw	r28, 0x17	; 23
    3290:	2e 96       	adiw	r28, 0x0e	; 14
    3292:	8f ad       	ldd	r24, Y+63	; 0x3f
    3294:	2e 97       	sbiw	r28, 0x0e	; 14
    3296:	98 17       	cp	r25, r24
    3298:	18 f0       	brcs	.+6      	; 0x32a0 <CLCD_voidSendNumber+0x3fe>
    329a:	68 96       	adiw	r28, 0x18	; 24
    329c:	1f ae       	std	Y+63, r1	; 0x3f
    329e:	68 97       	sbiw	r28, 0x18	; 24
    32a0:	66 96       	adiw	r28, 0x16	; 22
    32a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    32a4:	66 97       	sbiw	r28, 0x16	; 22
    32a6:	68 96       	adiw	r28, 0x18	; 24
    32a8:	8f ad       	ldd	r24, Y+63	; 0x3f
    32aa:	68 97       	sbiw	r28, 0x18	; 24
    32ac:	98 2b       	or	r25, r24
    32ae:	66 96       	adiw	r28, 0x16	; 22
    32b0:	9f af       	std	Y+63, r25	; 0x3f
    32b2:	66 97       	sbiw	r28, 0x16	; 22
    32b4:	67 96       	adiw	r28, 0x17	; 23
    32b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    32b8:	67 97       	sbiw	r28, 0x17	; 23
    32ba:	2e 96       	adiw	r28, 0x0e	; 14
    32bc:	9f af       	std	Y+63, r25	; 0x3f
    32be:	2e 97       	sbiw	r28, 0x0e	; 14
    32c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32c2:	9b 89       	ldd	r25, Y+19	; 0x13
    32c4:	89 0f       	add	r24, r25
    32c6:	2f 96       	adiw	r28, 0x0f	; 15
    32c8:	8f af       	std	Y+63, r24	; 0x3f
    32ca:	2f 97       	sbiw	r28, 0x0f	; 15
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	69 96       	adiw	r28, 0x19	; 25
    32d0:	8f af       	std	Y+63, r24	; 0x3f
    32d2:	69 97       	sbiw	r28, 0x19	; 25
    32d4:	2f 96       	adiw	r28, 0x0f	; 15
    32d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    32d8:	2f 97       	sbiw	r28, 0x0f	; 15
    32da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32dc:	98 17       	cp	r25, r24
    32de:	18 f0       	brcs	.+6      	; 0x32e6 <CLCD_voidSendNumber+0x444>
    32e0:	69 96       	adiw	r28, 0x19	; 25
    32e2:	1f ae       	std	Y+63, r1	; 0x3f
    32e4:	69 97       	sbiw	r28, 0x19	; 25
    32e6:	66 96       	adiw	r28, 0x16	; 22
    32e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    32ea:	66 97       	sbiw	r28, 0x16	; 22
    32ec:	2f 96       	adiw	r28, 0x0f	; 15
    32ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    32f0:	2f 97       	sbiw	r28, 0x0f	; 15
    32f2:	98 0f       	add	r25, r24
    32f4:	6a 96       	adiw	r28, 0x1a	; 26
    32f6:	9f af       	std	Y+63, r25	; 0x3f
    32f8:	6a 97       	sbiw	r28, 0x1a	; 26
    32fa:	91 e0       	ldi	r25, 0x01	; 1
    32fc:	6b 96       	adiw	r28, 0x1b	; 27
    32fe:	9f af       	std	Y+63, r25	; 0x3f
    3300:	6b 97       	sbiw	r28, 0x1b	; 27
    3302:	6a 96       	adiw	r28, 0x1a	; 26
    3304:	8f ad       	ldd	r24, Y+63	; 0x3f
    3306:	6a 97       	sbiw	r28, 0x1a	; 26
    3308:	2f 96       	adiw	r28, 0x0f	; 15
    330a:	9f ad       	ldd	r25, Y+63	; 0x3f
    330c:	2f 97       	sbiw	r28, 0x0f	; 15
    330e:	89 17       	cp	r24, r25
    3310:	18 f0       	brcs	.+6      	; 0x3318 <CLCD_voidSendNumber+0x476>
    3312:	6b 96       	adiw	r28, 0x1b	; 27
    3314:	1f ae       	std	Y+63, r1	; 0x3f
    3316:	6b 97       	sbiw	r28, 0x1b	; 27
    3318:	69 96       	adiw	r28, 0x19	; 25
    331a:	8f ad       	ldd	r24, Y+63	; 0x3f
    331c:	69 97       	sbiw	r28, 0x19	; 25
    331e:	6b 96       	adiw	r28, 0x1b	; 27
    3320:	9f ad       	ldd	r25, Y+63	; 0x3f
    3322:	6b 97       	sbiw	r28, 0x1b	; 27
    3324:	89 2b       	or	r24, r25
    3326:	69 96       	adiw	r28, 0x19	; 25
    3328:	8f af       	std	Y+63, r24	; 0x3f
    332a:	69 97       	sbiw	r28, 0x19	; 25
    332c:	6a 96       	adiw	r28, 0x1a	; 26
    332e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3330:	6a 97       	sbiw	r28, 0x1a	; 26
    3332:	2f 96       	adiw	r28, 0x0f	; 15
    3334:	8f af       	std	Y+63, r24	; 0x3f
    3336:	2f 97       	sbiw	r28, 0x0f	; 15
    3338:	9c 8d       	ldd	r25, Y+28	; 0x1c
    333a:	8c 89       	ldd	r24, Y+20	; 0x14
    333c:	98 0f       	add	r25, r24
    333e:	60 96       	adiw	r28, 0x10	; 16
    3340:	9f af       	std	Y+63, r25	; 0x3f
    3342:	60 97       	sbiw	r28, 0x10	; 16
    3344:	91 e0       	ldi	r25, 0x01	; 1
    3346:	6c 96       	adiw	r28, 0x1c	; 28
    3348:	9f af       	std	Y+63, r25	; 0x3f
    334a:	6c 97       	sbiw	r28, 0x1c	; 28
    334c:	60 96       	adiw	r28, 0x10	; 16
    334e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3350:	60 97       	sbiw	r28, 0x10	; 16
    3352:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3354:	89 17       	cp	r24, r25
    3356:	18 f0       	brcs	.+6      	; 0x335e <CLCD_voidSendNumber+0x4bc>
    3358:	6c 96       	adiw	r28, 0x1c	; 28
    335a:	1f ae       	std	Y+63, r1	; 0x3f
    335c:	6c 97       	sbiw	r28, 0x1c	; 28
    335e:	69 96       	adiw	r28, 0x19	; 25
    3360:	8f ad       	ldd	r24, Y+63	; 0x3f
    3362:	69 97       	sbiw	r28, 0x19	; 25
    3364:	60 96       	adiw	r28, 0x10	; 16
    3366:	9f ad       	ldd	r25, Y+63	; 0x3f
    3368:	60 97       	sbiw	r28, 0x10	; 16
    336a:	89 0f       	add	r24, r25
    336c:	6d 96       	adiw	r28, 0x1d	; 29
    336e:	8f af       	std	Y+63, r24	; 0x3f
    3370:	6d 97       	sbiw	r28, 0x1d	; 29
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	6e 96       	adiw	r28, 0x1e	; 30
    3376:	8f af       	std	Y+63, r24	; 0x3f
    3378:	6e 97       	sbiw	r28, 0x1e	; 30
    337a:	6d 96       	adiw	r28, 0x1d	; 29
    337c:	9f ad       	ldd	r25, Y+63	; 0x3f
    337e:	6d 97       	sbiw	r28, 0x1d	; 29
    3380:	60 96       	adiw	r28, 0x10	; 16
    3382:	8f ad       	ldd	r24, Y+63	; 0x3f
    3384:	60 97       	sbiw	r28, 0x10	; 16
    3386:	98 17       	cp	r25, r24
    3388:	18 f0       	brcs	.+6      	; 0x3390 <CLCD_voidSendNumber+0x4ee>
    338a:	6e 96       	adiw	r28, 0x1e	; 30
    338c:	1f ae       	std	Y+63, r1	; 0x3f
    338e:	6e 97       	sbiw	r28, 0x1e	; 30
    3390:	6c 96       	adiw	r28, 0x1c	; 28
    3392:	9f ad       	ldd	r25, Y+63	; 0x3f
    3394:	6c 97       	sbiw	r28, 0x1c	; 28
    3396:	6e 96       	adiw	r28, 0x1e	; 30
    3398:	8f ad       	ldd	r24, Y+63	; 0x3f
    339a:	6e 97       	sbiw	r28, 0x1e	; 30
    339c:	98 2b       	or	r25, r24
    339e:	6c 96       	adiw	r28, 0x1c	; 28
    33a0:	9f af       	std	Y+63, r25	; 0x3f
    33a2:	6c 97       	sbiw	r28, 0x1c	; 28
    33a4:	6d 96       	adiw	r28, 0x1d	; 29
    33a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    33a8:	6d 97       	sbiw	r28, 0x1d	; 29
    33aa:	60 96       	adiw	r28, 0x10	; 16
    33ac:	9f af       	std	Y+63, r25	; 0x3f
    33ae:	60 97       	sbiw	r28, 0x10	; 16
    33b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b2:	9d 89       	ldd	r25, Y+21	; 0x15
    33b4:	89 0f       	add	r24, r25
    33b6:	61 96       	adiw	r28, 0x11	; 17
    33b8:	8f af       	std	Y+63, r24	; 0x3f
    33ba:	61 97       	sbiw	r28, 0x11	; 17
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	6f 96       	adiw	r28, 0x1f	; 31
    33c0:	8f af       	std	Y+63, r24	; 0x3f
    33c2:	6f 97       	sbiw	r28, 0x1f	; 31
    33c4:	61 96       	adiw	r28, 0x11	; 17
    33c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    33c8:	61 97       	sbiw	r28, 0x11	; 17
    33ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33cc:	98 17       	cp	r25, r24
    33ce:	18 f0       	brcs	.+6      	; 0x33d6 <CLCD_voidSendNumber+0x534>
    33d0:	6f 96       	adiw	r28, 0x1f	; 31
    33d2:	1f ae       	std	Y+63, r1	; 0x3f
    33d4:	6f 97       	sbiw	r28, 0x1f	; 31
    33d6:	6c 96       	adiw	r28, 0x1c	; 28
    33d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    33da:	6c 97       	sbiw	r28, 0x1c	; 28
    33dc:	61 96       	adiw	r28, 0x11	; 17
    33de:	8f ad       	ldd	r24, Y+63	; 0x3f
    33e0:	61 97       	sbiw	r28, 0x11	; 17
    33e2:	98 0f       	add	r25, r24
    33e4:	a0 96       	adiw	r28, 0x20	; 32
    33e6:	9f af       	std	Y+63, r25	; 0x3f
    33e8:	a0 97       	sbiw	r28, 0x20	; 32
    33ea:	91 e0       	ldi	r25, 0x01	; 1
    33ec:	a1 96       	adiw	r28, 0x21	; 33
    33ee:	9f af       	std	Y+63, r25	; 0x3f
    33f0:	a1 97       	sbiw	r28, 0x21	; 33
    33f2:	a0 96       	adiw	r28, 0x20	; 32
    33f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    33f6:	a0 97       	sbiw	r28, 0x20	; 32
    33f8:	61 96       	adiw	r28, 0x11	; 17
    33fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    33fc:	61 97       	sbiw	r28, 0x11	; 17
    33fe:	89 17       	cp	r24, r25
    3400:	18 f0       	brcs	.+6      	; 0x3408 <CLCD_voidSendNumber+0x566>
    3402:	a1 96       	adiw	r28, 0x21	; 33
    3404:	1f ae       	std	Y+63, r1	; 0x3f
    3406:	a1 97       	sbiw	r28, 0x21	; 33
    3408:	6f 96       	adiw	r28, 0x1f	; 31
    340a:	8f ad       	ldd	r24, Y+63	; 0x3f
    340c:	6f 97       	sbiw	r28, 0x1f	; 31
    340e:	a1 96       	adiw	r28, 0x21	; 33
    3410:	9f ad       	ldd	r25, Y+63	; 0x3f
    3412:	a1 97       	sbiw	r28, 0x21	; 33
    3414:	89 2b       	or	r24, r25
    3416:	6f 96       	adiw	r28, 0x1f	; 31
    3418:	8f af       	std	Y+63, r24	; 0x3f
    341a:	6f 97       	sbiw	r28, 0x1f	; 31
    341c:	a0 96       	adiw	r28, 0x20	; 32
    341e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3420:	a0 97       	sbiw	r28, 0x20	; 32
    3422:	61 96       	adiw	r28, 0x11	; 17
    3424:	8f af       	std	Y+63, r24	; 0x3f
    3426:	61 97       	sbiw	r28, 0x11	; 17
    3428:	9e 8d       	ldd	r25, Y+30	; 0x1e
    342a:	8e 89       	ldd	r24, Y+22	; 0x16
    342c:	98 0f       	add	r25, r24
    342e:	62 96       	adiw	r28, 0x12	; 18
    3430:	9f af       	std	Y+63, r25	; 0x3f
    3432:	62 97       	sbiw	r28, 0x12	; 18
    3434:	91 e0       	ldi	r25, 0x01	; 1
    3436:	a2 96       	adiw	r28, 0x22	; 34
    3438:	9f af       	std	Y+63, r25	; 0x3f
    343a:	a2 97       	sbiw	r28, 0x22	; 34
    343c:	62 96       	adiw	r28, 0x12	; 18
    343e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3440:	62 97       	sbiw	r28, 0x12	; 18
    3442:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3444:	89 17       	cp	r24, r25
    3446:	18 f0       	brcs	.+6      	; 0x344e <CLCD_voidSendNumber+0x5ac>
    3448:	a2 96       	adiw	r28, 0x22	; 34
    344a:	1f ae       	std	Y+63, r1	; 0x3f
    344c:	a2 97       	sbiw	r28, 0x22	; 34
    344e:	6f 96       	adiw	r28, 0x1f	; 31
    3450:	8f ad       	ldd	r24, Y+63	; 0x3f
    3452:	6f 97       	sbiw	r28, 0x1f	; 31
    3454:	62 96       	adiw	r28, 0x12	; 18
    3456:	9f ad       	ldd	r25, Y+63	; 0x3f
    3458:	62 97       	sbiw	r28, 0x12	; 18
    345a:	89 0f       	add	r24, r25
    345c:	a3 96       	adiw	r28, 0x23	; 35
    345e:	8f af       	std	Y+63, r24	; 0x3f
    3460:	a3 97       	sbiw	r28, 0x23	; 35
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	a4 96       	adiw	r28, 0x24	; 36
    3466:	8f af       	std	Y+63, r24	; 0x3f
    3468:	a4 97       	sbiw	r28, 0x24	; 36
    346a:	a3 96       	adiw	r28, 0x23	; 35
    346c:	9f ad       	ldd	r25, Y+63	; 0x3f
    346e:	a3 97       	sbiw	r28, 0x23	; 35
    3470:	62 96       	adiw	r28, 0x12	; 18
    3472:	8f ad       	ldd	r24, Y+63	; 0x3f
    3474:	62 97       	sbiw	r28, 0x12	; 18
    3476:	98 17       	cp	r25, r24
    3478:	18 f0       	brcs	.+6      	; 0x3480 <CLCD_voidSendNumber+0x5de>
    347a:	a4 96       	adiw	r28, 0x24	; 36
    347c:	1f ae       	std	Y+63, r1	; 0x3f
    347e:	a4 97       	sbiw	r28, 0x24	; 36
    3480:	a2 96       	adiw	r28, 0x22	; 34
    3482:	9f ad       	ldd	r25, Y+63	; 0x3f
    3484:	a2 97       	sbiw	r28, 0x22	; 34
    3486:	a4 96       	adiw	r28, 0x24	; 36
    3488:	8f ad       	ldd	r24, Y+63	; 0x3f
    348a:	a4 97       	sbiw	r28, 0x24	; 36
    348c:	98 2b       	or	r25, r24
    348e:	a2 96       	adiw	r28, 0x22	; 34
    3490:	9f af       	std	Y+63, r25	; 0x3f
    3492:	a2 97       	sbiw	r28, 0x22	; 34
    3494:	a3 96       	adiw	r28, 0x23	; 35
    3496:	9f ad       	ldd	r25, Y+63	; 0x3f
    3498:	a3 97       	sbiw	r28, 0x23	; 35
    349a:	62 96       	adiw	r28, 0x12	; 18
    349c:	9f af       	std	Y+63, r25	; 0x3f
    349e:	62 97       	sbiw	r28, 0x12	; 18
    34a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34a2:	9f 89       	ldd	r25, Y+23	; 0x17
    34a4:	89 0f       	add	r24, r25
    34a6:	63 96       	adiw	r28, 0x13	; 19
    34a8:	8f af       	std	Y+63, r24	; 0x3f
    34aa:	63 97       	sbiw	r28, 0x13	; 19
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	a5 96       	adiw	r28, 0x25	; 37
    34b0:	8f af       	std	Y+63, r24	; 0x3f
    34b2:	a5 97       	sbiw	r28, 0x25	; 37
    34b4:	63 96       	adiw	r28, 0x13	; 19
    34b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    34b8:	63 97       	sbiw	r28, 0x13	; 19
    34ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34bc:	98 17       	cp	r25, r24
    34be:	18 f0       	brcs	.+6      	; 0x34c6 <CLCD_voidSendNumber+0x624>
    34c0:	a5 96       	adiw	r28, 0x25	; 37
    34c2:	1f ae       	std	Y+63, r1	; 0x3f
    34c4:	a5 97       	sbiw	r28, 0x25	; 37
    34c6:	a2 96       	adiw	r28, 0x22	; 34
    34c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    34ca:	a2 97       	sbiw	r28, 0x22	; 34
    34cc:	63 96       	adiw	r28, 0x13	; 19
    34ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    34d0:	63 97       	sbiw	r28, 0x13	; 19
    34d2:	98 0f       	add	r25, r24
    34d4:	a6 96       	adiw	r28, 0x26	; 38
    34d6:	9f af       	std	Y+63, r25	; 0x3f
    34d8:	a6 97       	sbiw	r28, 0x26	; 38
    34da:	91 e0       	ldi	r25, 0x01	; 1
    34dc:	a7 96       	adiw	r28, 0x27	; 39
    34de:	9f af       	std	Y+63, r25	; 0x3f
    34e0:	a7 97       	sbiw	r28, 0x27	; 39
    34e2:	a6 96       	adiw	r28, 0x26	; 38
    34e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    34e6:	a6 97       	sbiw	r28, 0x26	; 38
    34e8:	63 96       	adiw	r28, 0x13	; 19
    34ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    34ec:	63 97       	sbiw	r28, 0x13	; 19
    34ee:	89 17       	cp	r24, r25
    34f0:	18 f0       	brcs	.+6      	; 0x34f8 <CLCD_voidSendNumber+0x656>
    34f2:	a7 96       	adiw	r28, 0x27	; 39
    34f4:	1f ae       	std	Y+63, r1	; 0x3f
    34f6:	a7 97       	sbiw	r28, 0x27	; 39
    34f8:	a5 96       	adiw	r28, 0x25	; 37
    34fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    34fc:	a5 97       	sbiw	r28, 0x25	; 37
    34fe:	a7 96       	adiw	r28, 0x27	; 39
    3500:	9f ad       	ldd	r25, Y+63	; 0x3f
    3502:	a7 97       	sbiw	r28, 0x27	; 39
    3504:	89 2b       	or	r24, r25
    3506:	a5 96       	adiw	r28, 0x25	; 37
    3508:	8f af       	std	Y+63, r24	; 0x3f
    350a:	a5 97       	sbiw	r28, 0x25	; 37
    350c:	a6 96       	adiw	r28, 0x26	; 38
    350e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3510:	a6 97       	sbiw	r28, 0x26	; 38
    3512:	63 96       	adiw	r28, 0x13	; 19
    3514:	8f af       	std	Y+63, r24	; 0x3f
    3516:	63 97       	sbiw	r28, 0x13	; 19
    3518:	98 a1       	ldd	r25, Y+32	; 0x20
    351a:	88 8d       	ldd	r24, Y+24	; 0x18
    351c:	98 0f       	add	r25, r24
    351e:	64 96       	adiw	r28, 0x14	; 20
    3520:	9f af       	std	Y+63, r25	; 0x3f
    3522:	64 97       	sbiw	r28, 0x14	; 20
    3524:	a5 96       	adiw	r28, 0x25	; 37
    3526:	8f ad       	ldd	r24, Y+63	; 0x3f
    3528:	a5 97       	sbiw	r28, 0x25	; 37
    352a:	64 96       	adiw	r28, 0x14	; 20
    352c:	9f ad       	ldd	r25, Y+63	; 0x3f
    352e:	64 97       	sbiw	r28, 0x14	; 20
    3530:	89 0f       	add	r24, r25
    3532:	64 96       	adiw	r28, 0x14	; 20
    3534:	8f af       	std	Y+63, r24	; 0x3f
    3536:	64 97       	sbiw	r28, 0x14	; 20
    3538:	2d 96       	adiw	r28, 0x0d	; 13
    353a:	8f ad       	ldd	r24, Y+63	; 0x3f
    353c:	2d 97       	sbiw	r28, 0x0d	; 13
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	2e 96       	adiw	r28, 0x0e	; 14
    3542:	9f ad       	ldd	r25, Y+63	; 0x3f
    3544:	2e 97       	sbiw	r28, 0x0e	; 14
    3546:	9a 83       	std	Y+2, r25	; 0x02
    3548:	2f 96       	adiw	r28, 0x0f	; 15
    354a:	8f ad       	ldd	r24, Y+63	; 0x3f
    354c:	2f 97       	sbiw	r28, 0x0f	; 15
    354e:	8b 83       	std	Y+3, r24	; 0x03
    3550:	60 96       	adiw	r28, 0x10	; 16
    3552:	9f ad       	ldd	r25, Y+63	; 0x3f
    3554:	60 97       	sbiw	r28, 0x10	; 16
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	61 96       	adiw	r28, 0x11	; 17
    355a:	8f ad       	ldd	r24, Y+63	; 0x3f
    355c:	61 97       	sbiw	r28, 0x11	; 17
    355e:	8d 83       	std	Y+5, r24	; 0x05
    3560:	62 96       	adiw	r28, 0x12	; 18
    3562:	9f ad       	ldd	r25, Y+63	; 0x3f
    3564:	62 97       	sbiw	r28, 0x12	; 18
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	63 96       	adiw	r28, 0x13	; 19
    356a:	8f ad       	ldd	r24, Y+63	; 0x3f
    356c:	63 97       	sbiw	r28, 0x13	; 19
    356e:	8f 83       	std	Y+7, r24	; 0x07
    3570:	64 96       	adiw	r28, 0x14	; 20
    3572:	9f ad       	ldd	r25, Y+63	; 0x3f
    3574:	64 97       	sbiw	r28, 0x14	; 20
    3576:	98 87       	std	Y+8, r25	; 0x08
			Copy_u64Number /= 10 ;
    3578:	a9 84       	ldd	r10, Y+9	; 0x09
    357a:	ba 84       	ldd	r11, Y+10	; 0x0a
    357c:	cb 84       	ldd	r12, Y+11	; 0x0b
    357e:	dc 84       	ldd	r13, Y+12	; 0x0c
    3580:	ed 84       	ldd	r14, Y+13	; 0x0d
    3582:	fe 84       	ldd	r15, Y+14	; 0x0e
    3584:	0f 85       	ldd	r16, Y+15	; 0x0f
    3586:	18 89       	ldd	r17, Y+16	; 0x10
    3588:	2a 2d       	mov	r18, r10
    358a:	3b 2d       	mov	r19, r11
    358c:	4c 2d       	mov	r20, r12
    358e:	5d 2d       	mov	r21, r13
    3590:	6e 2d       	mov	r22, r14
    3592:	7f 2d       	mov	r23, r15
    3594:	80 2f       	mov	r24, r16
    3596:	91 2f       	mov	r25, r17
    3598:	0f 2e       	mov	r0, r31
    359a:	fa e0       	ldi	r31, 0x0A	; 10
    359c:	af 2e       	mov	r10, r31
    359e:	f0 2d       	mov	r31, r0
    35a0:	bb 24       	eor	r11, r11
    35a2:	cc 24       	eor	r12, r12
    35a4:	dd 24       	eor	r13, r13
    35a6:	ee 24       	eor	r14, r14
    35a8:	ff 24       	eor	r15, r15
    35aa:	00 e0       	ldi	r16, 0x00	; 0
    35ac:	10 e0       	ldi	r17, 0x00	; 0
    35ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    35b2:	a2 2e       	mov	r10, r18
    35b4:	b3 2e       	mov	r11, r19
    35b6:	c4 2e       	mov	r12, r20
    35b8:	d5 2e       	mov	r13, r21
    35ba:	e6 2e       	mov	r14, r22
    35bc:	f7 2e       	mov	r15, r23
    35be:	08 2f       	mov	r16, r24
    35c0:	19 2f       	mov	r17, r25
    35c2:	a9 86       	std	Y+9, r10	; 0x09
    35c4:	ba 86       	std	Y+10, r11	; 0x0a
    35c6:	cb 86       	std	Y+11, r12	; 0x0b
    35c8:	dc 86       	std	Y+12, r13	; 0x0c
    35ca:	ed 86       	std	Y+13, r14	; 0x0d
    35cc:	fe 86       	std	Y+14, r15	; 0x0e
    35ce:	0f 87       	std	Y+15, r16	; 0x0f
    35d0:	18 8b       	std	Y+16, r17	; 0x10

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }

	else{

		while( Copy_u64Number != 0 ){
    35d2:	89 85       	ldd	r24, Y+9	; 0x09
    35d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d6:	89 2b       	or	r24, r25
    35d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    35da:	89 2b       	or	r24, r25
    35dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    35de:	89 2b       	or	r24, r25
    35e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    35e2:	89 2b       	or	r24, r25
    35e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e6:	89 2b       	or	r24, r25
    35e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    35ea:	89 2b       	or	r24, r25
    35ec:	98 89       	ldd	r25, Y+16	; 0x10
    35ee:	89 2b       	or	r24, r25
    35f0:	88 23       	and	r24, r24
    35f2:	09 f0       	breq	.+2      	; 0x35f6 <CLCD_voidSendNumber+0x754>
    35f4:	90 cc       	rjmp	.-1760   	; 0x2f16 <CLCD_voidSendNumber+0x74>
    35f6:	5e c0       	rjmp	.+188    	; 0x36b4 <CLCD_voidSendNumber+0x812>
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
    35f8:	a9 80       	ldd	r10, Y+1	; 0x01
    35fa:	ba 80       	ldd	r11, Y+2	; 0x02
    35fc:	cb 80       	ldd	r12, Y+3	; 0x03
    35fe:	dc 80       	ldd	r13, Y+4	; 0x04
    3600:	ed 80       	ldd	r14, Y+5	; 0x05
    3602:	fe 80       	ldd	r15, Y+6	; 0x06
    3604:	0f 81       	ldd	r16, Y+7	; 0x07
    3606:	18 85       	ldd	r17, Y+8	; 0x08
    3608:	2a 2d       	mov	r18, r10
    360a:	3b 2d       	mov	r19, r11
    360c:	4c 2d       	mov	r20, r12
    360e:	5d 2d       	mov	r21, r13
    3610:	6e 2d       	mov	r22, r14
    3612:	7f 2d       	mov	r23, r15
    3614:	80 2f       	mov	r24, r16
    3616:	91 2f       	mov	r25, r17
    3618:	0f 2e       	mov	r0, r31
    361a:	fa e0       	ldi	r31, 0x0A	; 10
    361c:	af 2e       	mov	r10, r31
    361e:	f0 2d       	mov	r31, r0
    3620:	bb 24       	eor	r11, r11
    3622:	cc 24       	eor	r12, r12
    3624:	dd 24       	eor	r13, r13
    3626:	ee 24       	eor	r14, r14
    3628:	ff 24       	eor	r15, r15
    362a:	00 e0       	ldi	r16, 0x00	; 0
    362c:	10 e0       	ldi	r17, 0x00	; 0
    362e:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    3632:	a2 2e       	mov	r10, r18
    3634:	b3 2e       	mov	r11, r19
    3636:	c4 2e       	mov	r12, r20
    3638:	d5 2e       	mov	r13, r21
    363a:	e6 2e       	mov	r14, r22
    363c:	f7 2e       	mov	r15, r23
    363e:	08 2f       	mov	r16, r24
    3640:	19 2f       	mov	r17, r25
    3642:	2a 2d       	mov	r18, r10
    3644:	3b 2d       	mov	r19, r11
    3646:	4c 2d       	mov	r20, r12
    3648:	5d 2d       	mov	r21, r13
    364a:	6e 2d       	mov	r22, r14
    364c:	7f 2d       	mov	r23, r15
    364e:	80 2f       	mov	r24, r16
    3650:	91 2f       	mov	r25, r17
    3652:	82 2f       	mov	r24, r18
    3654:	80 5d       	subi	r24, 0xD0	; 208
    3656:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <CLCD_voidSendData>
			LOC_u64Reversed /= 10 ;
    365a:	a9 80       	ldd	r10, Y+1	; 0x01
    365c:	ba 80       	ldd	r11, Y+2	; 0x02
    365e:	cb 80       	ldd	r12, Y+3	; 0x03
    3660:	dc 80       	ldd	r13, Y+4	; 0x04
    3662:	ed 80       	ldd	r14, Y+5	; 0x05
    3664:	fe 80       	ldd	r15, Y+6	; 0x06
    3666:	0f 81       	ldd	r16, Y+7	; 0x07
    3668:	18 85       	ldd	r17, Y+8	; 0x08
    366a:	2a 2d       	mov	r18, r10
    366c:	3b 2d       	mov	r19, r11
    366e:	4c 2d       	mov	r20, r12
    3670:	5d 2d       	mov	r21, r13
    3672:	6e 2d       	mov	r22, r14
    3674:	7f 2d       	mov	r23, r15
    3676:	80 2f       	mov	r24, r16
    3678:	91 2f       	mov	r25, r17
    367a:	0f 2e       	mov	r0, r31
    367c:	fa e0       	ldi	r31, 0x0A	; 10
    367e:	af 2e       	mov	r10, r31
    3680:	f0 2d       	mov	r31, r0
    3682:	bb 24       	eor	r11, r11
    3684:	cc 24       	eor	r12, r12
    3686:	dd 24       	eor	r13, r13
    3688:	ee 24       	eor	r14, r14
    368a:	ff 24       	eor	r15, r15
    368c:	00 e0       	ldi	r16, 0x00	; 0
    368e:	10 e0       	ldi	r17, 0x00	; 0
    3690:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    3694:	a2 2e       	mov	r10, r18
    3696:	b3 2e       	mov	r11, r19
    3698:	c4 2e       	mov	r12, r20
    369a:	d5 2e       	mov	r13, r21
    369c:	e6 2e       	mov	r14, r22
    369e:	f7 2e       	mov	r15, r23
    36a0:	08 2f       	mov	r16, r24
    36a2:	19 2f       	mov	r17, r25
    36a4:	a9 82       	std	Y+1, r10	; 0x01
    36a6:	ba 82       	std	Y+2, r11	; 0x02
    36a8:	cb 82       	std	Y+3, r12	; 0x03
    36aa:	dc 82       	std	Y+4, r13	; 0x04
    36ac:	ed 82       	std	Y+5, r14	; 0x05
    36ae:	fe 82       	std	Y+6, r15	; 0x06
    36b0:	0f 83       	std	Y+7, r16	; 0x07
    36b2:	18 87       	std	Y+8, r17	; 0x08

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	81 30       	cpi	r24, 0x01	; 1
    36b8:	09 f0       	breq	.+2      	; 0x36bc <CLCD_voidSendNumber+0x81a>
    36ba:	9e cf       	rjmp	.-196    	; 0x35f8 <CLCD_voidSendNumber+0x756>
    36bc:	8a 81       	ldd	r24, Y+2	; 0x02
    36be:	88 23       	and	r24, r24
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <CLCD_voidSendNumber+0x822>
    36c2:	9a cf       	rjmp	.-204    	; 0x35f8 <CLCD_voidSendNumber+0x756>
    36c4:	8b 81       	ldd	r24, Y+3	; 0x03
    36c6:	88 23       	and	r24, r24
    36c8:	09 f0       	breq	.+2      	; 0x36cc <CLCD_voidSendNumber+0x82a>
    36ca:	96 cf       	rjmp	.-212    	; 0x35f8 <CLCD_voidSendNumber+0x756>
    36cc:	8c 81       	ldd	r24, Y+4	; 0x04
    36ce:	88 23       	and	r24, r24
    36d0:	09 f0       	breq	.+2      	; 0x36d4 <CLCD_voidSendNumber+0x832>
    36d2:	92 cf       	rjmp	.-220    	; 0x35f8 <CLCD_voidSendNumber+0x756>
    36d4:	8d 81       	ldd	r24, Y+5	; 0x05
    36d6:	88 23       	and	r24, r24
    36d8:	09 f0       	breq	.+2      	; 0x36dc <CLCD_voidSendNumber+0x83a>
    36da:	8e cf       	rjmp	.-228    	; 0x35f8 <CLCD_voidSendNumber+0x756>
    36dc:	8e 81       	ldd	r24, Y+6	; 0x06
    36de:	88 23       	and	r24, r24
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <CLCD_voidSendNumber+0x842>
    36e2:	8a cf       	rjmp	.-236    	; 0x35f8 <CLCD_voidSendNumber+0x756>
    36e4:	8f 81       	ldd	r24, Y+7	; 0x07
    36e6:	88 23       	and	r24, r24
    36e8:	09 f0       	breq	.+2      	; 0x36ec <CLCD_voidSendNumber+0x84a>
    36ea:	86 cf       	rjmp	.-244    	; 0x35f8 <CLCD_voidSendNumber+0x756>
    36ec:	88 85       	ldd	r24, Y+8	; 0x08
    36ee:	88 23       	and	r24, r24
    36f0:	09 f0       	breq	.+2      	; 0x36f4 <CLCD_voidSendNumber+0x852>
    36f2:	82 cf       	rjmp	.-252    	; 0x35f8 <CLCD_voidSendNumber+0x756>

		}

	}

}
    36f4:	ca 59       	subi	r28, 0x9A	; 154
    36f6:	df 4f       	sbci	r29, 0xFF	; 255
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	df 90       	pop	r13
    3710:	cf 90       	pop	r12
    3712:	bf 90       	pop	r11
    3714:	af 90       	pop	r10
    3716:	08 95       	ret

00003718 <CLCD_voidSetPosition>:
*Hint :-
   In This function we send a command which =0b1xxxxxxx
   MSB = 1  ===> refers that it is command to set cursor
   xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	61 97       	sbiw	r28, 0x11	; 17
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	88 8b       	std	Y+16, r24	; 0x10
    372e:	69 8b       	std	Y+17, r22	; 0x11

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    3730:	88 89       	ldd	r24, Y+16	; 0x10
    3732:	83 30       	cpi	r24, 0x03	; 3
    3734:	48 f4       	brcc	.+18     	; 0x3748 <CLCD_voidSetPosition+0x30>
    3736:	88 89       	ldd	r24, Y+16	; 0x10
    3738:	88 23       	and	r24, r24
    373a:	31 f0       	breq	.+12     	; 0x3748 <CLCD_voidSetPosition+0x30>
    373c:	89 89       	ldd	r24, Y+17	; 0x11
    373e:	81 31       	cpi	r24, 0x11	; 17
    3740:	18 f4       	brcc	.+6      	; 0x3748 <CLCD_voidSetPosition+0x30>
    3742:	89 89       	ldd	r24, Y+17	; 0x11
    3744:	88 23       	and	r24, r24
    3746:	19 f4       	brne	.+6      	; 0x374e <CLCD_voidSetPosition+0x36>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
    3748:	80 e8       	ldi	r24, 0x80	; 128
    374a:	8f 87       	std	Y+15, r24	; 0x0f
    374c:	0d c0       	rjmp	.+26     	; 0x3768 <CLCD_voidSetPosition+0x50>
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    374e:	88 89       	ldd	r24, Y+16	; 0x10
    3750:	81 30       	cpi	r24, 0x01	; 1
    3752:	21 f4       	brne	.+8      	; 0x375c <CLCD_voidSetPosition+0x44>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    3754:	89 89       	ldd	r24, Y+17	; 0x11
    3756:	81 58       	subi	r24, 0x81	; 129
    3758:	8f 87       	std	Y+15, r24	; 0x0f
    375a:	06 c0       	rjmp	.+12     	; 0x3768 <CLCD_voidSetPosition+0x50>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    375c:	88 89       	ldd	r24, Y+16	; 0x10
    375e:	82 30       	cpi	r24, 0x02	; 2
    3760:	19 f4       	brne	.+6      	; 0x3768 <CLCD_voidSetPosition+0x50>

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    3762:	89 89       	ldd	r24, Y+17	; 0x11
    3764:	81 54       	subi	r24, 0x41	; 65
    3766:	8f 87       	std	Y+15, r24	; 0x0f

	}
	CLCD_voidSendCommand ( LOC_u8data );
    3768:	8f 85       	ldd	r24, Y+15	; 0x0f
    376a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <CLCD_voidSendCommand>
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	a0 e8       	ldi	r26, 0x80	; 128
    3774:	bf e3       	ldi	r27, 0x3F	; 63
    3776:	8b 87       	std	Y+11, r24	; 0x0b
    3778:	9c 87       	std	Y+12, r25	; 0x0c
    377a:	ad 87       	std	Y+13, r26	; 0x0d
    377c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3780:	7c 85       	ldd	r23, Y+12	; 0x0c
    3782:	8d 85       	ldd	r24, Y+13	; 0x0d
    3784:	9e 85       	ldd	r25, Y+14	; 0x0e
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	4a ef       	ldi	r20, 0xFA	; 250
    378c:	54 e4       	ldi	r21, 0x44	; 68
    378e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	8f 83       	std	Y+7, r24	; 0x07
    3798:	98 87       	std	Y+8, r25	; 0x08
    379a:	a9 87       	std	Y+9, r26	; 0x09
    379c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    379e:	6f 81       	ldd	r22, Y+7	; 0x07
    37a0:	78 85       	ldd	r23, Y+8	; 0x08
    37a2:	89 85       	ldd	r24, Y+9	; 0x09
    37a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e8       	ldi	r20, 0x80	; 128
    37ac:	5f e3       	ldi	r21, 0x3F	; 63
    37ae:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    37b2:	88 23       	and	r24, r24
    37b4:	2c f4       	brge	.+10     	; 0x37c0 <CLCD_voidSetPosition+0xa8>
		__ticks = 1;
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	9e 83       	std	Y+6, r25	; 0x06
    37bc:	8d 83       	std	Y+5, r24	; 0x05
    37be:	3f c0       	rjmp	.+126    	; 0x383e <CLCD_voidSetPosition+0x126>
	else if (__tmp > 65535)
    37c0:	6f 81       	ldd	r22, Y+7	; 0x07
    37c2:	78 85       	ldd	r23, Y+8	; 0x08
    37c4:	89 85       	ldd	r24, Y+9	; 0x09
    37c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	3f ef       	ldi	r19, 0xFF	; 255
    37cc:	4f e7       	ldi	r20, 0x7F	; 127
    37ce:	57 e4       	ldi	r21, 0x47	; 71
    37d0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    37d4:	18 16       	cp	r1, r24
    37d6:	4c f5       	brge	.+82     	; 0x382a <CLCD_voidSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37da:	7c 85       	ldd	r23, Y+12	; 0x0c
    37dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    37de:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e2       	ldi	r20, 0x20	; 32
    37e6:	51 e4       	ldi	r21, 0x41	; 65
    37e8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	bc 01       	movw	r22, r24
    37f2:	cd 01       	movw	r24, r26
    37f4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	9e 83       	std	Y+6, r25	; 0x06
    37fe:	8d 83       	std	Y+5, r24	; 0x05
    3800:	0f c0       	rjmp	.+30     	; 0x3820 <CLCD_voidSetPosition+0x108>
    3802:	88 ec       	ldi	r24, 0xC8	; 200
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	9c 83       	std	Y+4, r25	; 0x04
    3808:	8b 83       	std	Y+3, r24	; 0x03
    380a:	8b 81       	ldd	r24, Y+3	; 0x03
    380c:	9c 81       	ldd	r25, Y+4	; 0x04
    380e:	01 97       	sbiw	r24, 0x01	; 1
    3810:	f1 f7       	brne	.-4      	; 0x380e <CLCD_voidSetPosition+0xf6>
    3812:	9c 83       	std	Y+4, r25	; 0x04
    3814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3816:	8d 81       	ldd	r24, Y+5	; 0x05
    3818:	9e 81       	ldd	r25, Y+6	; 0x06
    381a:	01 97       	sbiw	r24, 0x01	; 1
    381c:	9e 83       	std	Y+6, r25	; 0x06
    381e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3820:	8d 81       	ldd	r24, Y+5	; 0x05
    3822:	9e 81       	ldd	r25, Y+6	; 0x06
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	69 f7       	brne	.-38     	; 0x3802 <CLCD_voidSetPosition+0xea>
    3828:	14 c0       	rjmp	.+40     	; 0x3852 <CLCD_voidSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    382a:	6f 81       	ldd	r22, Y+7	; 0x07
    382c:	78 85       	ldd	r23, Y+8	; 0x08
    382e:	89 85       	ldd	r24, Y+9	; 0x09
    3830:	9a 85       	ldd	r25, Y+10	; 0x0a
    3832:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	9e 83       	std	Y+6, r25	; 0x06
    383c:	8d 83       	std	Y+5, r24	; 0x05
    383e:	8d 81       	ldd	r24, Y+5	; 0x05
    3840:	9e 81       	ldd	r25, Y+6	; 0x06
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	89 83       	std	Y+1, r24	; 0x01
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	f1 f7       	brne	.-4      	; 0x384a <CLCD_voidSetPosition+0x132>
    384e:	9a 83       	std	Y+2, r25	; 0x02
    3850:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3852:	61 96       	adiw	r28, 0x11	; 17
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61
    385e:	cf 91       	pop	r28
    3860:	df 91       	pop	r29
    3862:	08 95       	ret

00003864 <CLCD_voidSendExtraChar>:
			=> Copy_u8Col --> column number (CLCD_COL_1 ... CLCD_COL_16)
* return : nothing
* Hint :-
	Address Counter can refer to CGRAM and DDRAM
*/
void CLCD_voidSendExtraChar( u8 Copy_u8Row , u8 Copy_u8Col ){
    3864:	df 93       	push	r29
    3866:	cf 93       	push	r28
    3868:	00 d0       	rcall	.+0      	; 0x386a <CLCD_voidSendExtraChar+0x6>
    386a:	0f 92       	push	r0
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
    3870:	8a 83       	std	Y+2, r24	; 0x02
    3872:	6b 83       	std	Y+3, r22	; 0x03

	u8 LOC_u8Iterator = 0 ;
    3874:	19 82       	std	Y+1, r1	; 0x01
	/* 1- Go To CGRAM            */
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM
    3876:	80 e4       	ldi	r24, 0x40	; 64
    3878:	0e 94 92 16 	call	0x2d24	; 0x2d24 <CLCD_voidSendCommand>


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    387c:	19 82       	std	Y+1, r1	; 0x01
    387e:	0c c0       	rjmp	.+24     	; 0x3898 <CLCD_voidSendExtraChar+0x34>

		CLCD_voidSendData( CLCD_u8ExtraChar[LOC_u8Iterator] );
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	fc 01       	movw	r30, r24
    3888:	e7 59       	subi	r30, 0x97	; 151
    388a:	fe 4f       	sbci	r31, 0xFE	; 254
    388c:	80 81       	ld	r24, Z
    388e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <CLCD_voidSendData>
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	8f 5f       	subi	r24, 0xFF	; 255
    3896:	89 83       	std	Y+1, r24	; 0x01
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	80 34       	cpi	r24, 0x40	; 64
    389c:	88 f3       	brcs	.-30     	; 0x3880 <CLCD_voidSendExtraChar+0x1c>

	}


	/* 3- Back (AC) To DDRAM          */
	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	6b 81       	ldd	r22, Y+3	; 0x03
    38a2:	0e 94 8c 1b 	call	0x3718	; 0x3718 <CLCD_voidSetPosition>


	/* 4- Send Character Address */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < 8 ; LOC_u8Iterator++ ){
    38a6:	19 82       	std	Y+1, r1	; 0x01
    38a8:	06 c0       	rjmp	.+12     	; 0x38b6 <CLCD_voidSendExtraChar+0x52>

		CLCD_voidSendData( LOC_u8Iterator );
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
    38ac:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <CLCD_voidSendData>
	/* 3- Back (AC) To DDRAM          */
	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);


	/* 4- Send Character Address */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < 8 ; LOC_u8Iterator++ ){
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
    38b2:	8f 5f       	subi	r24, 0xFF	; 255
    38b4:	89 83       	std	Y+1, r24	; 0x01
    38b6:	89 81       	ldd	r24, Y+1	; 0x01
    38b8:	88 30       	cpi	r24, 0x08	; 8
    38ba:	b8 f3       	brcs	.-18     	; 0x38aa <CLCD_voidSendExtraChar+0x46>

		CLCD_voidSendData( LOC_u8Iterator );

	}

}
    38bc:	0f 90       	pop	r0
    38be:	0f 90       	pop	r0
    38c0:	0f 90       	pop	r0
    38c2:	cf 91       	pop	r28
    38c4:	df 91       	pop	r29
    38c6:	08 95       	ret

000038c8 <CLCD_voidClearScreen>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
    38d0:	2e 97       	sbiw	r28, 0x0e	; 14
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(lcd_Clear);
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	0e 94 92 16 	call	0x2d24	; 0x2d24 <CLCD_voidSendCommand>
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	a0 e2       	ldi	r26, 0x20	; 32
    38e8:	b1 e4       	ldi	r27, 0x41	; 65
    38ea:	8b 87       	std	Y+11, r24	; 0x0b
    38ec:	9c 87       	std	Y+12, r25	; 0x0c
    38ee:	ad 87       	std	Y+13, r26	; 0x0d
    38f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	4a ef       	ldi	r20, 0xFA	; 250
    3900:	54 e4       	ldi	r21, 0x44	; 68
    3902:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	8f 83       	std	Y+7, r24	; 0x07
    390c:	98 87       	std	Y+8, r25	; 0x08
    390e:	a9 87       	std	Y+9, r26	; 0x09
    3910:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3912:	6f 81       	ldd	r22, Y+7	; 0x07
    3914:	78 85       	ldd	r23, Y+8	; 0x08
    3916:	89 85       	ldd	r24, Y+9	; 0x09
    3918:	9a 85       	ldd	r25, Y+10	; 0x0a
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e8       	ldi	r20, 0x80	; 128
    3920:	5f e3       	ldi	r21, 0x3F	; 63
    3922:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3926:	88 23       	and	r24, r24
    3928:	2c f4       	brge	.+10     	; 0x3934 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	9e 83       	std	Y+6, r25	; 0x06
    3930:	8d 83       	std	Y+5, r24	; 0x05
    3932:	3f c0       	rjmp	.+126    	; 0x39b2 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    3934:	6f 81       	ldd	r22, Y+7	; 0x07
    3936:	78 85       	ldd	r23, Y+8	; 0x08
    3938:	89 85       	ldd	r24, Y+9	; 0x09
    393a:	9a 85       	ldd	r25, Y+10	; 0x0a
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	3f ef       	ldi	r19, 0xFF	; 255
    3940:	4f e7       	ldi	r20, 0x7F	; 127
    3942:	57 e4       	ldi	r21, 0x47	; 71
    3944:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3948:	18 16       	cp	r1, r24
    394a:	4c f5       	brge	.+82     	; 0x399e <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394c:	6b 85       	ldd	r22, Y+11	; 0x0b
    394e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3950:	8d 85       	ldd	r24, Y+13	; 0x0d
    3952:	9e 85       	ldd	r25, Y+14	; 0x0e
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	40 e2       	ldi	r20, 0x20	; 32
    395a:	51 e4       	ldi	r21, 0x41	; 65
    395c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	bc 01       	movw	r22, r24
    3966:	cd 01       	movw	r24, r26
    3968:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	9e 83       	std	Y+6, r25	; 0x06
    3972:	8d 83       	std	Y+5, r24	; 0x05
    3974:	0f c0       	rjmp	.+30     	; 0x3994 <CLCD_voidClearScreen+0xcc>
    3976:	88 ec       	ldi	r24, 0xC8	; 200
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	9c 83       	std	Y+4, r25	; 0x04
    397c:	8b 83       	std	Y+3, r24	; 0x03
    397e:	8b 81       	ldd	r24, Y+3	; 0x03
    3980:	9c 81       	ldd	r25, Y+4	; 0x04
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <CLCD_voidClearScreen+0xba>
    3986:	9c 83       	std	Y+4, r25	; 0x04
    3988:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398a:	8d 81       	ldd	r24, Y+5	; 0x05
    398c:	9e 81       	ldd	r25, Y+6	; 0x06
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	9e 83       	std	Y+6, r25	; 0x06
    3992:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3994:	8d 81       	ldd	r24, Y+5	; 0x05
    3996:	9e 81       	ldd	r25, Y+6	; 0x06
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	69 f7       	brne	.-38     	; 0x3976 <CLCD_voidClearScreen+0xae>
    399c:	14 c0       	rjmp	.+40     	; 0x39c6 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    399e:	6f 81       	ldd	r22, Y+7	; 0x07
    39a0:	78 85       	ldd	r23, Y+8	; 0x08
    39a2:	89 85       	ldd	r24, Y+9	; 0x09
    39a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	9e 83       	std	Y+6, r25	; 0x06
    39b0:	8d 83       	std	Y+5, r24	; 0x05
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	9a 83       	std	Y+2, r25	; 0x02
    39b8:	89 83       	std	Y+1, r24	; 0x01
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	9a 81       	ldd	r25, Y+2	; 0x02
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	f1 f7       	brne	.-4      	; 0x39be <CLCD_voidClearScreen+0xf6>
    39c2:	9a 83       	std	Y+2, r25	; 0x02
    39c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); //wait more than 1.53 ms
}
    39c6:	2e 96       	adiw	r28, 0x0e	; 14
    39c8:	0f b6       	in	r0, 0x3f	; 63
    39ca:	f8 94       	cli
    39cc:	de bf       	out	0x3e, r29	; 62
    39ce:	0f be       	out	0x3f, r0	; 63
    39d0:	cd bf       	out	0x3d, r28	; 61
    39d2:	cf 91       	pop	r28
    39d4:	df 91       	pop	r29
    39d6:	08 95       	ret

000039d8 <CLCD_voidSendFallingEdge>:
*
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
    39d8:	df 93       	push	r29
    39da:	cf 93       	push	r28
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	6c 97       	sbiw	r28, 0x1c	; 28
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	f8 94       	cli
    39e6:	de bf       	out	0x3e, r29	; 62
    39e8:	0f be       	out	0x3f, r0	; 63
    39ea:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	61 e0       	ldi	r22, 0x01	; 1
    39f0:	41 e0       	ldi	r20, 0x01	; 1
    39f2:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	a0 e8       	ldi	r26, 0x80	; 128
    39fc:	bf e3       	ldi	r27, 0x3F	; 63
    39fe:	89 8f       	std	Y+25, r24	; 0x19
    3a00:	9a 8f       	std	Y+26, r25	; 0x1a
    3a02:	ab 8f       	std	Y+27, r26	; 0x1b
    3a04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a06:	69 8d       	ldd	r22, Y+25	; 0x19
    3a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a0e:	20 e0       	ldi	r18, 0x00	; 0
    3a10:	30 e0       	ldi	r19, 0x00	; 0
    3a12:	4a ef       	ldi	r20, 0xFA	; 250
    3a14:	54 e4       	ldi	r21, 0x44	; 68
    3a16:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	8d 8b       	std	Y+21, r24	; 0x15
    3a20:	9e 8b       	std	Y+22, r25	; 0x16
    3a22:	af 8b       	std	Y+23, r26	; 0x17
    3a24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a26:	6d 89       	ldd	r22, Y+21	; 0x15
    3a28:	7e 89       	ldd	r23, Y+22	; 0x16
    3a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	40 e8       	ldi	r20, 0x80	; 128
    3a34:	5f e3       	ldi	r21, 0x3F	; 63
    3a36:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3a3a:	88 23       	and	r24, r24
    3a3c:	2c f4       	brge	.+10     	; 0x3a48 <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	9c 8b       	std	Y+20, r25	; 0x14
    3a44:	8b 8b       	std	Y+19, r24	; 0x13
    3a46:	3f c0       	rjmp	.+126    	; 0x3ac6 <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    3a48:	6d 89       	ldd	r22, Y+21	; 0x15
    3a4a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	3f ef       	ldi	r19, 0xFF	; 255
    3a54:	4f e7       	ldi	r20, 0x7F	; 127
    3a56:	57 e4       	ldi	r21, 0x47	; 71
    3a58:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3a5c:	18 16       	cp	r1, r24
    3a5e:	4c f5       	brge	.+82     	; 0x3ab2 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a60:	69 8d       	ldd	r22, Y+25	; 0x19
    3a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	40 e2       	ldi	r20, 0x20	; 32
    3a6e:	51 e4       	ldi	r21, 0x41	; 65
    3a70:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a80:	dc 01       	movw	r26, r24
    3a82:	cb 01       	movw	r24, r22
    3a84:	9c 8b       	std	Y+20, r25	; 0x14
    3a86:	8b 8b       	std	Y+19, r24	; 0x13
    3a88:	0f c0       	rjmp	.+30     	; 0x3aa8 <CLCD_voidSendFallingEdge+0xd0>
    3a8a:	88 ec       	ldi	r24, 0xC8	; 200
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	9a 8b       	std	Y+18, r25	; 0x12
    3a90:	89 8b       	std	Y+17, r24	; 0x11
    3a92:	89 89       	ldd	r24, Y+17	; 0x11
    3a94:	9a 89       	ldd	r25, Y+18	; 0x12
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	f1 f7       	brne	.-4      	; 0x3a96 <CLCD_voidSendFallingEdge+0xbe>
    3a9a:	9a 8b       	std	Y+18, r25	; 0x12
    3a9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3aa0:	9c 89       	ldd	r25, Y+20	; 0x14
    3aa2:	01 97       	sbiw	r24, 0x01	; 1
    3aa4:	9c 8b       	std	Y+20, r25	; 0x14
    3aa6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	69 f7       	brne	.-38     	; 0x3a8a <CLCD_voidSendFallingEdge+0xb2>
    3ab0:	14 c0       	rjmp	.+40     	; 0x3ada <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aba:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	9c 8b       	std	Y+20, r25	; 0x14
    3ac4:	8b 8b       	std	Y+19, r24	; 0x13
    3ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aca:	98 8b       	std	Y+16, r25	; 0x10
    3acc:	8f 87       	std	Y+15, r24	; 0x0f
    3ace:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad0:	98 89       	ldd	r25, Y+16	; 0x10
    3ad2:	01 97       	sbiw	r24, 0x01	; 1
    3ad4:	f1 f7       	brne	.-4      	; 0x3ad2 <CLCD_voidSendFallingEdge+0xfa>
    3ad6:	98 8b       	std	Y+16, r25	; 0x10
    3ad8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	61 e0       	ldi	r22, 0x01	; 1
    3ade:	40 e0       	ldi	r20, 0x00	; 0
    3ae0:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	90 e0       	ldi	r25, 0x00	; 0
    3ae8:	a0 e8       	ldi	r26, 0x80	; 128
    3aea:	bf e3       	ldi	r27, 0x3F	; 63
    3aec:	8b 87       	std	Y+11, r24	; 0x0b
    3aee:	9c 87       	std	Y+12, r25	; 0x0c
    3af0:	ad 87       	std	Y+13, r26	; 0x0d
    3af2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	4a ef       	ldi	r20, 0xFA	; 250
    3b02:	54 e4       	ldi	r21, 0x44	; 68
    3b04:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	8f 83       	std	Y+7, r24	; 0x07
    3b0e:	98 87       	std	Y+8, r25	; 0x08
    3b10:	a9 87       	std	Y+9, r26	; 0x09
    3b12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b14:	6f 81       	ldd	r22, Y+7	; 0x07
    3b16:	78 85       	ldd	r23, Y+8	; 0x08
    3b18:	89 85       	ldd	r24, Y+9	; 0x09
    3b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	40 e8       	ldi	r20, 0x80	; 128
    3b22:	5f e3       	ldi	r21, 0x3F	; 63
    3b24:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3b28:	88 23       	and	r24, r24
    3b2a:	2c f4       	brge	.+10     	; 0x3b36 <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	9e 83       	std	Y+6, r25	; 0x06
    3b32:	8d 83       	std	Y+5, r24	; 0x05
    3b34:	3f c0       	rjmp	.+126    	; 0x3bb4 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    3b36:	6f 81       	ldd	r22, Y+7	; 0x07
    3b38:	78 85       	ldd	r23, Y+8	; 0x08
    3b3a:	89 85       	ldd	r24, Y+9	; 0x09
    3b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	3f ef       	ldi	r19, 0xFF	; 255
    3b42:	4f e7       	ldi	r20, 0x7F	; 127
    3b44:	57 e4       	ldi	r21, 0x47	; 71
    3b46:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3b4a:	18 16       	cp	r1, r24
    3b4c:	4c f5       	brge	.+82     	; 0x3ba0 <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 e0       	ldi	r19, 0x00	; 0
    3b5a:	40 e2       	ldi	r20, 0x20	; 32
    3b5c:	51 e4       	ldi	r21, 0x41	; 65
    3b5e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	bc 01       	movw	r22, r24
    3b68:	cd 01       	movw	r24, r26
    3b6a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	9e 83       	std	Y+6, r25	; 0x06
    3b74:	8d 83       	std	Y+5, r24	; 0x05
    3b76:	0f c0       	rjmp	.+30     	; 0x3b96 <CLCD_voidSendFallingEdge+0x1be>
    3b78:	88 ec       	ldi	r24, 0xC8	; 200
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	9c 83       	std	Y+4, r25	; 0x04
    3b7e:	8b 83       	std	Y+3, r24	; 0x03
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	9c 81       	ldd	r25, Y+4	; 0x04
    3b84:	01 97       	sbiw	r24, 0x01	; 1
    3b86:	f1 f7       	brne	.-4      	; 0x3b84 <CLCD_voidSendFallingEdge+0x1ac>
    3b88:	9c 83       	std	Y+4, r25	; 0x04
    3b8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	9e 83       	std	Y+6, r25	; 0x06
    3b94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b96:	8d 81       	ldd	r24, Y+5	; 0x05
    3b98:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9a:	00 97       	sbiw	r24, 0x00	; 0
    3b9c:	69 f7       	brne	.-38     	; 0x3b78 <CLCD_voidSendFallingEdge+0x1a0>
    3b9e:	14 c0       	rjmp	.+40     	; 0x3bc8 <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba2:	78 85       	ldd	r23, Y+8	; 0x08
    3ba4:	89 85       	ldd	r24, Y+9	; 0x09
    3ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ba8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	9e 83       	std	Y+6, r25	; 0x06
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
    3bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb8:	9a 83       	std	Y+2, r25	; 0x02
    3bba:	89 83       	std	Y+1, r24	; 0x01
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <CLCD_voidSendFallingEdge+0x1e8>
    3bc4:	9a 83       	std	Y+2, r25	; 0x02
    3bc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3bc8:	6c 96       	adiw	r28, 0x1c	; 28
    3bca:	0f b6       	in	r0, 0x3f	; 63
    3bcc:	f8 94       	cli
    3bce:	de bf       	out	0x3e, r29	; 62
    3bd0:	0f be       	out	0x3f, r0	; 63
    3bd2:	cd bf       	out	0x3d, r28	; 61
    3bd4:	cf 91       	pop	r28
    3bd6:	df 91       	pop	r29
    3bd8:	08 95       	ret

00003bda <DcMotor_init>:
 * Function: DcMotor_init
 * Description: Set up motor direction pins and enable pin.
 * Parameters: Pointer to structure of the Fan motor.
 * Return: void
 */
void DcMotor_init(DcMotor *Motor) {
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <DcMotor_init+0x6>
    3be0:	cd b7       	in	r28, 0x3d	; 61
    3be2:	de b7       	in	r29, 0x3e	; 62
    3be4:	9a 83       	std	Y+2, r25	; 0x02
    3be6:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinDirection(Motor->DcMotor_DIR_PORT, Motor->DcMotor_DIR_PINA, DIO_PIN_OUTPUT);
    3be8:	e9 81       	ldd	r30, Y+1	; 0x01
    3bea:	fa 81       	ldd	r31, Y+2	; 0x02
    3bec:	80 81       	ld	r24, Z
    3bee:	83 70       	andi	r24, 0x03	; 3
    3bf0:	28 2f       	mov	r18, r24
    3bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf6:	80 81       	ld	r24, Z
    3bf8:	86 95       	lsr	r24
    3bfa:	86 95       	lsr	r24
    3bfc:	87 70       	andi	r24, 0x07	; 7
    3bfe:	98 2f       	mov	r25, r24
    3c00:	82 2f       	mov	r24, r18
    3c02:	69 2f       	mov	r22, r25
    3c04:	41 e0       	ldi	r20, 0x01	; 1
    3c06:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(Motor->DcMotor_DIR_PORT, Motor->DcMotor_DIR_PINB, DIO_PIN_OUTPUT);
    3c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c0e:	80 81       	ld	r24, Z
    3c10:	83 70       	andi	r24, 0x03	; 3
    3c12:	28 2f       	mov	r18, r24
    3c14:	e9 81       	ldd	r30, Y+1	; 0x01
    3c16:	fa 81       	ldd	r31, Y+2	; 0x02
    3c18:	80 81       	ld	r24, Z
    3c1a:	82 95       	swap	r24
    3c1c:	86 95       	lsr	r24
    3c1e:	87 70       	andi	r24, 0x07	; 7
    3c20:	98 2f       	mov	r25, r24
    3c22:	82 2f       	mov	r24, r18
    3c24:	69 2f       	mov	r22, r25
    3c26:	41 e0       	ldi	r20, 0x01	; 1
    3c28:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <DIO_enumSetPinDirection>
#if(DCMOTOR_ENABLE_EN == TRUE)
	DIO_enumSetPinDirection(Motor->DCMotor_EN_PORT, Motor->DcMotor_EN_PIN, DIO_PIN_OUTPUT);
    3c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c30:	81 81       	ldd	r24, Z+1	; 0x01
    3c32:	83 70       	andi	r24, 0x03	; 3
    3c34:	28 2f       	mov	r18, r24
    3c36:	e9 81       	ldd	r30, Y+1	; 0x01
    3c38:	fa 81       	ldd	r31, Y+2	; 0x02
    3c3a:	81 81       	ldd	r24, Z+1	; 0x01
    3c3c:	86 95       	lsr	r24
    3c3e:	86 95       	lsr	r24
    3c40:	87 70       	andi	r24, 0x07	; 7
    3c42:	98 2f       	mov	r25, r24
    3c44:	82 2f       	mov	r24, r18
    3c46:	69 2f       	mov	r22, r25
    3c48:	41 e0       	ldi	r20, 0x01	; 1
    3c4a:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <DIO_enumSetPinDirection>
#endif
}
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	08 95       	ret

00003c58 <DcMotor_Rotate>:
 * Function: DcMotor_Rotate
 * Description: Control motor rotation direction and speed.
 * Parameters: Pointer to structure of the Fan motor.
 * Return: void
 */
void DcMotor_Rotate(DcMotor *Motor, DcMotor_State state, u8 speed) {
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <DcMotor_Rotate+0x6>
    3c5e:	00 d0       	rcall	.+0      	; 0x3c60 <DcMotor_Rotate+0x8>
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <DcMotor_Rotate+0xa>
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
    3c66:	9a 83       	std	Y+2, r25	; 0x02
    3c68:	89 83       	std	Y+1, r24	; 0x01
    3c6a:	6b 83       	std	Y+3, r22	; 0x03
    3c6c:	4c 83       	std	Y+4, r20	; 0x04
	PWM_Timer0_Start(speed); // Start PWM with specified speed
    3c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c70:	0e 94 19 26 	call	0x4c32	; 0x4c32 <PWM_Timer0_Start>

	switch (state) {
    3c74:	8b 81       	ldd	r24, Y+3	; 0x03
    3c76:	28 2f       	mov	r18, r24
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	3e 83       	std	Y+6, r19	; 0x06
    3c7c:	2d 83       	std	Y+5, r18	; 0x05
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	9e 81       	ldd	r25, Y+6	; 0x06
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	31 f0       	breq	.+12     	; 0x3c92 <DcMotor_Rotate+0x3a>
    3c86:	2d 81       	ldd	r18, Y+5	; 0x05
    3c88:	3e 81       	ldd	r19, Y+6	; 0x06
    3c8a:	21 30       	cpi	r18, 0x01	; 1
    3c8c:	31 05       	cpc	r19, r1
    3c8e:	21 f1       	breq	.+72     	; 0x3cd8 <DcMotor_Rotate+0x80>
    3c90:	46 c0       	rjmp	.+140    	; 0x3d1e <DcMotor_Rotate+0xc6>
	case MOTOR_CW:
		DIO_enumSetPinValue(Motor->DcMotor_DIR_PORT, Motor->DcMotor_DIR_PINA, DIO_PIN_HIGH);
    3c92:	e9 81       	ldd	r30, Y+1	; 0x01
    3c94:	fa 81       	ldd	r31, Y+2	; 0x02
    3c96:	80 81       	ld	r24, Z
    3c98:	83 70       	andi	r24, 0x03	; 3
    3c9a:	28 2f       	mov	r18, r24
    3c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3ca0:	80 81       	ld	r24, Z
    3ca2:	86 95       	lsr	r24
    3ca4:	86 95       	lsr	r24
    3ca6:	87 70       	andi	r24, 0x07	; 7
    3ca8:	98 2f       	mov	r25, r24
    3caa:	82 2f       	mov	r24, r18
    3cac:	69 2f       	mov	r22, r25
    3cae:	41 e0       	ldi	r20, 0x01	; 1
    3cb0:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
		DIO_enumSetPinValue(Motor->DcMotor_DIR_PORT, Motor->DcMotor_DIR_PINB, DIO_PIN_LOW);
    3cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb8:	80 81       	ld	r24, Z
    3cba:	83 70       	andi	r24, 0x03	; 3
    3cbc:	28 2f       	mov	r18, r24
    3cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc2:	80 81       	ld	r24, Z
    3cc4:	82 95       	swap	r24
    3cc6:	86 95       	lsr	r24
    3cc8:	87 70       	andi	r24, 0x07	; 7
    3cca:	98 2f       	mov	r25, r24
    3ccc:	82 2f       	mov	r24, r18
    3cce:	69 2f       	mov	r22, r25
    3cd0:	40 e0       	ldi	r20, 0x00	; 0
    3cd2:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
    3cd6:	27 c0       	rjmp	.+78     	; 0x3d26 <DcMotor_Rotate+0xce>
		break;
	case MOTOR_ACW:
		DIO_enumSetPinValue(Motor->DcMotor_DIR_PORT, Motor->DcMotor_DIR_PINA, DIO_PIN_LOW);
    3cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    3cda:	fa 81       	ldd	r31, Y+2	; 0x02
    3cdc:	80 81       	ld	r24, Z
    3cde:	83 70       	andi	r24, 0x03	; 3
    3ce0:	28 2f       	mov	r18, r24
    3ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce6:	80 81       	ld	r24, Z
    3ce8:	86 95       	lsr	r24
    3cea:	86 95       	lsr	r24
    3cec:	87 70       	andi	r24, 0x07	; 7
    3cee:	98 2f       	mov	r25, r24
    3cf0:	82 2f       	mov	r24, r18
    3cf2:	69 2f       	mov	r22, r25
    3cf4:	40 e0       	ldi	r20, 0x00	; 0
    3cf6:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
		DIO_enumSetPinValue(Motor->DcMotor_DIR_PORT, Motor->DcMotor_DIR_PINB, DIO_PIN_HIGH);
    3cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    3cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cfe:	80 81       	ld	r24, Z
    3d00:	83 70       	andi	r24, 0x03	; 3
    3d02:	28 2f       	mov	r18, r24
    3d04:	e9 81       	ldd	r30, Y+1	; 0x01
    3d06:	fa 81       	ldd	r31, Y+2	; 0x02
    3d08:	80 81       	ld	r24, Z
    3d0a:	82 95       	swap	r24
    3d0c:	86 95       	lsr	r24
    3d0e:	87 70       	andi	r24, 0x07	; 7
    3d10:	98 2f       	mov	r25, r24
    3d12:	82 2f       	mov	r24, r18
    3d14:	69 2f       	mov	r22, r25
    3d16:	41 e0       	ldi	r20, 0x01	; 1
    3d18:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
    3d1c:	04 c0       	rjmp	.+8      	; 0x3d26 <DcMotor_Rotate+0xce>
		break;
	default:
		DcMotor_STOP(Motor); // Stop motor if state is invalid
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	9a 81       	ldd	r25, Y+2	; 0x02
    3d22:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <DcMotor_STOP>
		break;
	}
}
    3d26:	26 96       	adiw	r28, 0x06	; 6
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	de bf       	out	0x3e, r29	; 62
    3d2e:	0f be       	out	0x3f, r0	; 63
    3d30:	cd bf       	out	0x3d, r28	; 61
    3d32:	cf 91       	pop	r28
    3d34:	df 91       	pop	r29
    3d36:	08 95       	ret

00003d38 <DcMotor_STOP>:
 * Function: DcMotor_STOP
 * Description: Stop the motor by setting direction pins to low.
 * Parameters: Pointer to structure of the Fan motor.
 * Return: void
 */
void DcMotor_STOP(DcMotor *Motor) {
    3d38:	df 93       	push	r29
    3d3a:	cf 93       	push	r28
    3d3c:	00 d0       	rcall	.+0      	; 0x3d3e <DcMotor_STOP+0x6>
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	9a 83       	std	Y+2, r25	; 0x02
    3d44:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(Motor->DcMotor_DIR_PORT, Motor->DcMotor_DIR_PINA, DIO_PIN_LOW);
    3d46:	e9 81       	ldd	r30, Y+1	; 0x01
    3d48:	fa 81       	ldd	r31, Y+2	; 0x02
    3d4a:	80 81       	ld	r24, Z
    3d4c:	83 70       	andi	r24, 0x03	; 3
    3d4e:	28 2f       	mov	r18, r24
    3d50:	e9 81       	ldd	r30, Y+1	; 0x01
    3d52:	fa 81       	ldd	r31, Y+2	; 0x02
    3d54:	80 81       	ld	r24, Z
    3d56:	86 95       	lsr	r24
    3d58:	86 95       	lsr	r24
    3d5a:	87 70       	andi	r24, 0x07	; 7
    3d5c:	98 2f       	mov	r25, r24
    3d5e:	82 2f       	mov	r24, r18
    3d60:	69 2f       	mov	r22, r25
    3d62:	40 e0       	ldi	r20, 0x00	; 0
    3d64:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(Motor->DcMotor_DIR_PORT, Motor->DcMotor_DIR_PINB, DIO_PIN_LOW);
    3d68:	e9 81       	ldd	r30, Y+1	; 0x01
    3d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d6c:	80 81       	ld	r24, Z
    3d6e:	83 70       	andi	r24, 0x03	; 3
    3d70:	28 2f       	mov	r18, r24
    3d72:	e9 81       	ldd	r30, Y+1	; 0x01
    3d74:	fa 81       	ldd	r31, Y+2	; 0x02
    3d76:	80 81       	ld	r24, Z
    3d78:	82 95       	swap	r24
    3d7a:	86 95       	lsr	r24
    3d7c:	87 70       	andi	r24, 0x07	; 7
    3d7e:	98 2f       	mov	r25, r24
    3d80:	82 2f       	mov	r24, r18
    3d82:	69 2f       	mov	r22, r25
    3d84:	40 e0       	ldi	r20, 0x00	; 0
    3d86:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <DIO_enumSetPinValue>
}
    3d8a:	0f 90       	pop	r0
    3d8c:	0f 90       	pop	r0
    3d8e:	cf 91       	pop	r28
    3d90:	df 91       	pop	r29
    3d92:	08 95       	ret

00003d94 <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    3d94:	df 93       	push	r29
    3d96:	cf 93       	push	r28
    3d98:	cd b7       	in	r28, 0x3d	; 61
    3d9a:	de b7       	in	r29, 0x3e	; 62
    3d9c:	28 97       	sbiw	r28, 0x08	; 8
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	de bf       	out	0x3e, r29	; 62
    3da4:	0f be       	out	0x3f, r0	; 63
    3da6:	cd bf       	out	0x3d, r28	; 61
    3da8:	8a 83       	std	Y+2, r24	; 0x02
    3daa:	6b 83       	std	Y+3, r22	; 0x03
    3dac:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    3db2:	8a 81       	ldd	r24, Y+2	; 0x02
    3db4:	84 30       	cpi	r24, 0x04	; 4
    3db6:	08 f0       	brcs	.+2      	; 0x3dba <DIO_enumSetPinDirection+0x26>
    3db8:	f1 c0       	rjmp	.+482    	; 0x3f9c <DIO_enumSetPinDirection+0x208>
    3dba:	8b 81       	ldd	r24, Y+3	; 0x03
    3dbc:	88 30       	cpi	r24, 0x08	; 8
    3dbe:	08 f0       	brcs	.+2      	; 0x3dc2 <DIO_enumSetPinDirection+0x2e>
    3dc0:	ed c0       	rjmp	.+474    	; 0x3f9c <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    3dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc4:	81 30       	cpi	r24, 0x01	; 1
    3dc6:	09 f0       	breq	.+2      	; 0x3dca <DIO_enumSetPinDirection+0x36>
    3dc8:	6f c0       	rjmp	.+222    	; 0x3ea8 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    3dca:	8a 81       	ldd	r24, Y+2	; 0x02
    3dcc:	28 2f       	mov	r18, r24
    3dce:	30 e0       	ldi	r19, 0x00	; 0
    3dd0:	38 87       	std	Y+8, r19	; 0x08
    3dd2:	2f 83       	std	Y+7, r18	; 0x07
    3dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    3dd6:	98 85       	ldd	r25, Y+8	; 0x08
    3dd8:	81 30       	cpi	r24, 0x01	; 1
    3dda:	91 05       	cpc	r25, r1
    3ddc:	49 f1       	breq	.+82     	; 0x3e30 <DIO_enumSetPinDirection+0x9c>
    3dde:	2f 81       	ldd	r18, Y+7	; 0x07
    3de0:	38 85       	ldd	r19, Y+8	; 0x08
    3de2:	22 30       	cpi	r18, 0x02	; 2
    3de4:	31 05       	cpc	r19, r1
    3de6:	2c f4       	brge	.+10     	; 0x3df2 <DIO_enumSetPinDirection+0x5e>
    3de8:	8f 81       	ldd	r24, Y+7	; 0x07
    3dea:	98 85       	ldd	r25, Y+8	; 0x08
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	61 f0       	breq	.+24     	; 0x3e08 <DIO_enumSetPinDirection+0x74>
    3df0:	d6 c0       	rjmp	.+428    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
    3df2:	2f 81       	ldd	r18, Y+7	; 0x07
    3df4:	38 85       	ldd	r19, Y+8	; 0x08
    3df6:	22 30       	cpi	r18, 0x02	; 2
    3df8:	31 05       	cpc	r19, r1
    3dfa:	71 f1       	breq	.+92     	; 0x3e58 <DIO_enumSetPinDirection+0xc4>
    3dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    3dfe:	98 85       	ldd	r25, Y+8	; 0x08
    3e00:	83 30       	cpi	r24, 0x03	; 3
    3e02:	91 05       	cpc	r25, r1
    3e04:	e9 f1       	breq	.+122    	; 0x3e80 <DIO_enumSetPinDirection+0xec>
    3e06:	cb c0       	rjmp	.+406    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    3e08:	aa e3       	ldi	r26, 0x3A	; 58
    3e0a:	b0 e0       	ldi	r27, 0x00	; 0
    3e0c:	ea e3       	ldi	r30, 0x3A	; 58
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	80 81       	ld	r24, Z
    3e12:	48 2f       	mov	r20, r24
    3e14:	8b 81       	ldd	r24, Y+3	; 0x03
    3e16:	28 2f       	mov	r18, r24
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	02 2e       	mov	r0, r18
    3e20:	02 c0       	rjmp	.+4      	; 0x3e26 <DIO_enumSetPinDirection+0x92>
    3e22:	88 0f       	add	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	0a 94       	dec	r0
    3e28:	e2 f7       	brpl	.-8      	; 0x3e22 <DIO_enumSetPinDirection+0x8e>
    3e2a:	84 2b       	or	r24, r20
    3e2c:	8c 93       	st	X, r24
    3e2e:	b7 c0       	rjmp	.+366    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    3e30:	a7 e3       	ldi	r26, 0x37	; 55
    3e32:	b0 e0       	ldi	r27, 0x00	; 0
    3e34:	e7 e3       	ldi	r30, 0x37	; 55
    3e36:	f0 e0       	ldi	r31, 0x00	; 0
    3e38:	80 81       	ld	r24, Z
    3e3a:	48 2f       	mov	r20, r24
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	28 2f       	mov	r18, r24
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	02 2e       	mov	r0, r18
    3e48:	02 c0       	rjmp	.+4      	; 0x3e4e <DIO_enumSetPinDirection+0xba>
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	0a 94       	dec	r0
    3e50:	e2 f7       	brpl	.-8      	; 0x3e4a <DIO_enumSetPinDirection+0xb6>
    3e52:	84 2b       	or	r24, r20
    3e54:	8c 93       	st	X, r24
    3e56:	a3 c0       	rjmp	.+326    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    3e58:	a4 e3       	ldi	r26, 0x34	; 52
    3e5a:	b0 e0       	ldi	r27, 0x00	; 0
    3e5c:	e4 e3       	ldi	r30, 0x34	; 52
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	80 81       	ld	r24, Z
    3e62:	48 2f       	mov	r20, r24
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	28 2f       	mov	r18, r24
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	02 2e       	mov	r0, r18
    3e70:	02 c0       	rjmp	.+4      	; 0x3e76 <DIO_enumSetPinDirection+0xe2>
    3e72:	88 0f       	add	r24, r24
    3e74:	99 1f       	adc	r25, r25
    3e76:	0a 94       	dec	r0
    3e78:	e2 f7       	brpl	.-8      	; 0x3e72 <DIO_enumSetPinDirection+0xde>
    3e7a:	84 2b       	or	r24, r20
    3e7c:	8c 93       	st	X, r24
    3e7e:	8f c0       	rjmp	.+286    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    3e80:	a1 e3       	ldi	r26, 0x31	; 49
    3e82:	b0 e0       	ldi	r27, 0x00	; 0
    3e84:	e1 e3       	ldi	r30, 0x31	; 49
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	80 81       	ld	r24, Z
    3e8a:	48 2f       	mov	r20, r24
    3e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8e:	28 2f       	mov	r18, r24
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	02 2e       	mov	r0, r18
    3e98:	02 c0       	rjmp	.+4      	; 0x3e9e <DIO_enumSetPinDirection+0x10a>
    3e9a:	88 0f       	add	r24, r24
    3e9c:	99 1f       	adc	r25, r25
    3e9e:	0a 94       	dec	r0
    3ea0:	e2 f7       	brpl	.-8      	; 0x3e9a <DIO_enumSetPinDirection+0x106>
    3ea2:	84 2b       	or	r24, r20
    3ea4:	8c 93       	st	X, r24
    3ea6:	7b c0       	rjmp	.+246    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    3ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eaa:	88 23       	and	r24, r24
    3eac:	09 f0       	breq	.+2      	; 0x3eb0 <DIO_enumSetPinDirection+0x11c>
    3eae:	74 c0       	rjmp	.+232    	; 0x3f98 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    3eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb2:	28 2f       	mov	r18, r24
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	3e 83       	std	Y+6, r19	; 0x06
    3eb8:	2d 83       	std	Y+5, r18	; 0x05
    3eba:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebe:	81 30       	cpi	r24, 0x01	; 1
    3ec0:	91 05       	cpc	r25, r1
    3ec2:	59 f1       	breq	.+86     	; 0x3f1a <DIO_enumSetPinDirection+0x186>
    3ec4:	2d 81       	ldd	r18, Y+5	; 0x05
    3ec6:	3e 81       	ldd	r19, Y+6	; 0x06
    3ec8:	22 30       	cpi	r18, 0x02	; 2
    3eca:	31 05       	cpc	r19, r1
    3ecc:	2c f4       	brge	.+10     	; 0x3ed8 <DIO_enumSetPinDirection+0x144>
    3ece:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed2:	00 97       	sbiw	r24, 0x00	; 0
    3ed4:	69 f0       	breq	.+26     	; 0x3ef0 <DIO_enumSetPinDirection+0x15c>
    3ed6:	63 c0       	rjmp	.+198    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
    3ed8:	2d 81       	ldd	r18, Y+5	; 0x05
    3eda:	3e 81       	ldd	r19, Y+6	; 0x06
    3edc:	22 30       	cpi	r18, 0x02	; 2
    3ede:	31 05       	cpc	r19, r1
    3ee0:	89 f1       	breq	.+98     	; 0x3f44 <DIO_enumSetPinDirection+0x1b0>
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee6:	83 30       	cpi	r24, 0x03	; 3
    3ee8:	91 05       	cpc	r25, r1
    3eea:	09 f4       	brne	.+2      	; 0x3eee <DIO_enumSetPinDirection+0x15a>
    3eec:	40 c0       	rjmp	.+128    	; 0x3f6e <DIO_enumSetPinDirection+0x1da>
    3eee:	57 c0       	rjmp	.+174    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    3ef0:	aa e3       	ldi	r26, 0x3A	; 58
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	ea e3       	ldi	r30, 0x3A	; 58
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	48 2f       	mov	r20, r24
    3efc:	8b 81       	ldd	r24, Y+3	; 0x03
    3efe:	28 2f       	mov	r18, r24
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	02 2e       	mov	r0, r18
    3f08:	02 c0       	rjmp	.+4      	; 0x3f0e <DIO_enumSetPinDirection+0x17a>
    3f0a:	88 0f       	add	r24, r24
    3f0c:	99 1f       	adc	r25, r25
    3f0e:	0a 94       	dec	r0
    3f10:	e2 f7       	brpl	.-8      	; 0x3f0a <DIO_enumSetPinDirection+0x176>
    3f12:	80 95       	com	r24
    3f14:	84 23       	and	r24, r20
    3f16:	8c 93       	st	X, r24
    3f18:	42 c0       	rjmp	.+132    	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    3f1a:	a7 e3       	ldi	r26, 0x37	; 55
    3f1c:	b0 e0       	ldi	r27, 0x00	; 0
    3f1e:	e7 e3       	ldi	r30, 0x37	; 55
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	80 81       	ld	r24, Z
    3f24:	48 2f       	mov	r20, r24
    3f26:	8b 81       	ldd	r24, Y+3	; 0x03
    3f28:	28 2f       	mov	r18, r24
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	02 2e       	mov	r0, r18
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <DIO_enumSetPinDirection+0x1a4>
    3f34:	88 0f       	add	r24, r24
    3f36:	99 1f       	adc	r25, r25
    3f38:	0a 94       	dec	r0
    3f3a:	e2 f7       	brpl	.-8      	; 0x3f34 <DIO_enumSetPinDirection+0x1a0>
    3f3c:	80 95       	com	r24
    3f3e:	84 23       	and	r24, r20
    3f40:	8c 93       	st	X, r24
    3f42:	2d c0       	rjmp	.+90     	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    3f44:	a4 e3       	ldi	r26, 0x34	; 52
    3f46:	b0 e0       	ldi	r27, 0x00	; 0
    3f48:	e4 e3       	ldi	r30, 0x34	; 52
    3f4a:	f0 e0       	ldi	r31, 0x00	; 0
    3f4c:	80 81       	ld	r24, Z
    3f4e:	48 2f       	mov	r20, r24
    3f50:	8b 81       	ldd	r24, Y+3	; 0x03
    3f52:	28 2f       	mov	r18, r24
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	02 2e       	mov	r0, r18
    3f5c:	02 c0       	rjmp	.+4      	; 0x3f62 <DIO_enumSetPinDirection+0x1ce>
    3f5e:	88 0f       	add	r24, r24
    3f60:	99 1f       	adc	r25, r25
    3f62:	0a 94       	dec	r0
    3f64:	e2 f7       	brpl	.-8      	; 0x3f5e <DIO_enumSetPinDirection+0x1ca>
    3f66:	80 95       	com	r24
    3f68:	84 23       	and	r24, r20
    3f6a:	8c 93       	st	X, r24
    3f6c:	18 c0       	rjmp	.+48     	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    3f6e:	a1 e3       	ldi	r26, 0x31	; 49
    3f70:	b0 e0       	ldi	r27, 0x00	; 0
    3f72:	e1 e3       	ldi	r30, 0x31	; 49
    3f74:	f0 e0       	ldi	r31, 0x00	; 0
    3f76:	80 81       	ld	r24, Z
    3f78:	48 2f       	mov	r20, r24
    3f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7c:	28 2f       	mov	r18, r24
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	81 e0       	ldi	r24, 0x01	; 1
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	02 2e       	mov	r0, r18
    3f86:	02 c0       	rjmp	.+4      	; 0x3f8c <DIO_enumSetPinDirection+0x1f8>
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	0a 94       	dec	r0
    3f8e:	e2 f7       	brpl	.-8      	; 0x3f88 <DIO_enumSetPinDirection+0x1f4>
    3f90:	80 95       	com	r24
    3f92:	84 23       	and	r24, r20
    3f94:	8c 93       	st	X, r24
    3f96:	03 c0       	rjmp	.+6      	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    3f98:	19 82       	std	Y+1, r1	; 0x01
    3f9a:	01 c0       	rjmp	.+2      	; 0x3f9e <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    3f9c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3fa0:	28 96       	adiw	r28, 0x08	; 8
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	f8 94       	cli
    3fa6:	de bf       	out	0x3e, r29	; 62
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	cd bf       	out	0x3d, r28	; 61
    3fac:	cf 91       	pop	r28
    3fae:	df 91       	pop	r29
    3fb0:	08 95       	ret

00003fb2 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
    3fba:	28 97       	sbiw	r28, 0x08	; 8
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	8a 83       	std	Y+2, r24	; 0x02
    3fc8:	6b 83       	std	Y+3, r22	; 0x03
    3fca:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    3fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd2:	84 30       	cpi	r24, 0x04	; 4
    3fd4:	08 f0       	brcs	.+2      	; 0x3fd8 <DIO_enumSetPinValue+0x26>
    3fd6:	f1 c0       	rjmp	.+482    	; 0x41ba <DIO_enumSetPinValue+0x208>
    3fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fda:	88 30       	cpi	r24, 0x08	; 8
    3fdc:	08 f0       	brcs	.+2      	; 0x3fe0 <DIO_enumSetPinValue+0x2e>
    3fde:	ed c0       	rjmp	.+474    	; 0x41ba <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    3fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe2:	81 30       	cpi	r24, 0x01	; 1
    3fe4:	09 f0       	breq	.+2      	; 0x3fe8 <DIO_enumSetPinValue+0x36>
    3fe6:	6f c0       	rjmp	.+222    	; 0x40c6 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    3fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fea:	28 2f       	mov	r18, r24
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	38 87       	std	Y+8, r19	; 0x08
    3ff0:	2f 83       	std	Y+7, r18	; 0x07
    3ff2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ff4:	98 85       	ldd	r25, Y+8	; 0x08
    3ff6:	81 30       	cpi	r24, 0x01	; 1
    3ff8:	91 05       	cpc	r25, r1
    3ffa:	49 f1       	breq	.+82     	; 0x404e <DIO_enumSetPinValue+0x9c>
    3ffc:	2f 81       	ldd	r18, Y+7	; 0x07
    3ffe:	38 85       	ldd	r19, Y+8	; 0x08
    4000:	22 30       	cpi	r18, 0x02	; 2
    4002:	31 05       	cpc	r19, r1
    4004:	2c f4       	brge	.+10     	; 0x4010 <DIO_enumSetPinValue+0x5e>
    4006:	8f 81       	ldd	r24, Y+7	; 0x07
    4008:	98 85       	ldd	r25, Y+8	; 0x08
    400a:	00 97       	sbiw	r24, 0x00	; 0
    400c:	61 f0       	breq	.+24     	; 0x4026 <DIO_enumSetPinValue+0x74>
    400e:	d6 c0       	rjmp	.+428    	; 0x41bc <DIO_enumSetPinValue+0x20a>
    4010:	2f 81       	ldd	r18, Y+7	; 0x07
    4012:	38 85       	ldd	r19, Y+8	; 0x08
    4014:	22 30       	cpi	r18, 0x02	; 2
    4016:	31 05       	cpc	r19, r1
    4018:	71 f1       	breq	.+92     	; 0x4076 <DIO_enumSetPinValue+0xc4>
    401a:	8f 81       	ldd	r24, Y+7	; 0x07
    401c:	98 85       	ldd	r25, Y+8	; 0x08
    401e:	83 30       	cpi	r24, 0x03	; 3
    4020:	91 05       	cpc	r25, r1
    4022:	e9 f1       	breq	.+122    	; 0x409e <DIO_enumSetPinValue+0xec>
    4024:	cb c0       	rjmp	.+406    	; 0x41bc <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    4026:	ab e3       	ldi	r26, 0x3B	; 59
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	eb e3       	ldi	r30, 0x3B	; 59
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	80 81       	ld	r24, Z
    4030:	48 2f       	mov	r20, r24
    4032:	8b 81       	ldd	r24, Y+3	; 0x03
    4034:	28 2f       	mov	r18, r24
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	02 2e       	mov	r0, r18
    403e:	02 c0       	rjmp	.+4      	; 0x4044 <DIO_enumSetPinValue+0x92>
    4040:	88 0f       	add	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	0a 94       	dec	r0
    4046:	e2 f7       	brpl	.-8      	; 0x4040 <DIO_enumSetPinValue+0x8e>
    4048:	84 2b       	or	r24, r20
    404a:	8c 93       	st	X, r24
    404c:	b7 c0       	rjmp	.+366    	; 0x41bc <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    404e:	a8 e3       	ldi	r26, 0x38	; 56
    4050:	b0 e0       	ldi	r27, 0x00	; 0
    4052:	e8 e3       	ldi	r30, 0x38	; 56
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	80 81       	ld	r24, Z
    4058:	48 2f       	mov	r20, r24
    405a:	8b 81       	ldd	r24, Y+3	; 0x03
    405c:	28 2f       	mov	r18, r24
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	02 2e       	mov	r0, r18
    4066:	02 c0       	rjmp	.+4      	; 0x406c <DIO_enumSetPinValue+0xba>
    4068:	88 0f       	add	r24, r24
    406a:	99 1f       	adc	r25, r25
    406c:	0a 94       	dec	r0
    406e:	e2 f7       	brpl	.-8      	; 0x4068 <DIO_enumSetPinValue+0xb6>
    4070:	84 2b       	or	r24, r20
    4072:	8c 93       	st	X, r24
    4074:	a3 c0       	rjmp	.+326    	; 0x41bc <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    4076:	a5 e3       	ldi	r26, 0x35	; 53
    4078:	b0 e0       	ldi	r27, 0x00	; 0
    407a:	e5 e3       	ldi	r30, 0x35	; 53
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	80 81       	ld	r24, Z
    4080:	48 2f       	mov	r20, r24
    4082:	8b 81       	ldd	r24, Y+3	; 0x03
    4084:	28 2f       	mov	r18, r24
    4086:	30 e0       	ldi	r19, 0x00	; 0
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	02 2e       	mov	r0, r18
    408e:	02 c0       	rjmp	.+4      	; 0x4094 <DIO_enumSetPinValue+0xe2>
    4090:	88 0f       	add	r24, r24
    4092:	99 1f       	adc	r25, r25
    4094:	0a 94       	dec	r0
    4096:	e2 f7       	brpl	.-8      	; 0x4090 <DIO_enumSetPinValue+0xde>
    4098:	84 2b       	or	r24, r20
    409a:	8c 93       	st	X, r24
    409c:	8f c0       	rjmp	.+286    	; 0x41bc <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    409e:	a2 e3       	ldi	r26, 0x32	; 50
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	e2 e3       	ldi	r30, 0x32	; 50
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	80 81       	ld	r24, Z
    40a8:	48 2f       	mov	r20, r24
    40aa:	8b 81       	ldd	r24, Y+3	; 0x03
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	02 2e       	mov	r0, r18
    40b6:	02 c0       	rjmp	.+4      	; 0x40bc <DIO_enumSetPinValue+0x10a>
    40b8:	88 0f       	add	r24, r24
    40ba:	99 1f       	adc	r25, r25
    40bc:	0a 94       	dec	r0
    40be:	e2 f7       	brpl	.-8      	; 0x40b8 <DIO_enumSetPinValue+0x106>
    40c0:	84 2b       	or	r24, r20
    40c2:	8c 93       	st	X, r24
    40c4:	7b c0       	rjmp	.+246    	; 0x41bc <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    40c6:	8c 81       	ldd	r24, Y+4	; 0x04
    40c8:	88 23       	and	r24, r24
    40ca:	09 f0       	breq	.+2      	; 0x40ce <DIO_enumSetPinValue+0x11c>
    40cc:	74 c0       	rjmp	.+232    	; 0x41b6 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    40ce:	8a 81       	ldd	r24, Y+2	; 0x02
    40d0:	28 2f       	mov	r18, r24
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	3e 83       	std	Y+6, r19	; 0x06
    40d6:	2d 83       	std	Y+5, r18	; 0x05
    40d8:	8d 81       	ldd	r24, Y+5	; 0x05
    40da:	9e 81       	ldd	r25, Y+6	; 0x06
    40dc:	81 30       	cpi	r24, 0x01	; 1
    40de:	91 05       	cpc	r25, r1
    40e0:	59 f1       	breq	.+86     	; 0x4138 <DIO_enumSetPinValue+0x186>
    40e2:	2d 81       	ldd	r18, Y+5	; 0x05
    40e4:	3e 81       	ldd	r19, Y+6	; 0x06
    40e6:	22 30       	cpi	r18, 0x02	; 2
    40e8:	31 05       	cpc	r19, r1
    40ea:	2c f4       	brge	.+10     	; 0x40f6 <DIO_enumSetPinValue+0x144>
    40ec:	8d 81       	ldd	r24, Y+5	; 0x05
    40ee:	9e 81       	ldd	r25, Y+6	; 0x06
    40f0:	00 97       	sbiw	r24, 0x00	; 0
    40f2:	69 f0       	breq	.+26     	; 0x410e <DIO_enumSetPinValue+0x15c>
    40f4:	63 c0       	rjmp	.+198    	; 0x41bc <DIO_enumSetPinValue+0x20a>
    40f6:	2d 81       	ldd	r18, Y+5	; 0x05
    40f8:	3e 81       	ldd	r19, Y+6	; 0x06
    40fa:	22 30       	cpi	r18, 0x02	; 2
    40fc:	31 05       	cpc	r19, r1
    40fe:	89 f1       	breq	.+98     	; 0x4162 <DIO_enumSetPinValue+0x1b0>
    4100:	8d 81       	ldd	r24, Y+5	; 0x05
    4102:	9e 81       	ldd	r25, Y+6	; 0x06
    4104:	83 30       	cpi	r24, 0x03	; 3
    4106:	91 05       	cpc	r25, r1
    4108:	09 f4       	brne	.+2      	; 0x410c <DIO_enumSetPinValue+0x15a>
    410a:	40 c0       	rjmp	.+128    	; 0x418c <DIO_enumSetPinValue+0x1da>
    410c:	57 c0       	rjmp	.+174    	; 0x41bc <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    410e:	ab e3       	ldi	r26, 0x3B	; 59
    4110:	b0 e0       	ldi	r27, 0x00	; 0
    4112:	eb e3       	ldi	r30, 0x3B	; 59
    4114:	f0 e0       	ldi	r31, 0x00	; 0
    4116:	80 81       	ld	r24, Z
    4118:	48 2f       	mov	r20, r24
    411a:	8b 81       	ldd	r24, Y+3	; 0x03
    411c:	28 2f       	mov	r18, r24
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	02 2e       	mov	r0, r18
    4126:	02 c0       	rjmp	.+4      	; 0x412c <DIO_enumSetPinValue+0x17a>
    4128:	88 0f       	add	r24, r24
    412a:	99 1f       	adc	r25, r25
    412c:	0a 94       	dec	r0
    412e:	e2 f7       	brpl	.-8      	; 0x4128 <DIO_enumSetPinValue+0x176>
    4130:	80 95       	com	r24
    4132:	84 23       	and	r24, r20
    4134:	8c 93       	st	X, r24
    4136:	42 c0       	rjmp	.+132    	; 0x41bc <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    4138:	a8 e3       	ldi	r26, 0x38	; 56
    413a:	b0 e0       	ldi	r27, 0x00	; 0
    413c:	e8 e3       	ldi	r30, 0x38	; 56
    413e:	f0 e0       	ldi	r31, 0x00	; 0
    4140:	80 81       	ld	r24, Z
    4142:	48 2f       	mov	r20, r24
    4144:	8b 81       	ldd	r24, Y+3	; 0x03
    4146:	28 2f       	mov	r18, r24
    4148:	30 e0       	ldi	r19, 0x00	; 0
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	02 2e       	mov	r0, r18
    4150:	02 c0       	rjmp	.+4      	; 0x4156 <DIO_enumSetPinValue+0x1a4>
    4152:	88 0f       	add	r24, r24
    4154:	99 1f       	adc	r25, r25
    4156:	0a 94       	dec	r0
    4158:	e2 f7       	brpl	.-8      	; 0x4152 <DIO_enumSetPinValue+0x1a0>
    415a:	80 95       	com	r24
    415c:	84 23       	and	r24, r20
    415e:	8c 93       	st	X, r24
    4160:	2d c0       	rjmp	.+90     	; 0x41bc <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    4162:	a5 e3       	ldi	r26, 0x35	; 53
    4164:	b0 e0       	ldi	r27, 0x00	; 0
    4166:	e5 e3       	ldi	r30, 0x35	; 53
    4168:	f0 e0       	ldi	r31, 0x00	; 0
    416a:	80 81       	ld	r24, Z
    416c:	48 2f       	mov	r20, r24
    416e:	8b 81       	ldd	r24, Y+3	; 0x03
    4170:	28 2f       	mov	r18, r24
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	02 2e       	mov	r0, r18
    417a:	02 c0       	rjmp	.+4      	; 0x4180 <DIO_enumSetPinValue+0x1ce>
    417c:	88 0f       	add	r24, r24
    417e:	99 1f       	adc	r25, r25
    4180:	0a 94       	dec	r0
    4182:	e2 f7       	brpl	.-8      	; 0x417c <DIO_enumSetPinValue+0x1ca>
    4184:	80 95       	com	r24
    4186:	84 23       	and	r24, r20
    4188:	8c 93       	st	X, r24
    418a:	18 c0       	rjmp	.+48     	; 0x41bc <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    418c:	a2 e3       	ldi	r26, 0x32	; 50
    418e:	b0 e0       	ldi	r27, 0x00	; 0
    4190:	e2 e3       	ldi	r30, 0x32	; 50
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	80 81       	ld	r24, Z
    4196:	48 2f       	mov	r20, r24
    4198:	8b 81       	ldd	r24, Y+3	; 0x03
    419a:	28 2f       	mov	r18, r24
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	02 2e       	mov	r0, r18
    41a4:	02 c0       	rjmp	.+4      	; 0x41aa <DIO_enumSetPinValue+0x1f8>
    41a6:	88 0f       	add	r24, r24
    41a8:	99 1f       	adc	r25, r25
    41aa:	0a 94       	dec	r0
    41ac:	e2 f7       	brpl	.-8      	; 0x41a6 <DIO_enumSetPinValue+0x1f4>
    41ae:	80 95       	com	r24
    41b0:	84 23       	and	r24, r20
    41b2:	8c 93       	st	X, r24
    41b4:	03 c0       	rjmp	.+6      	; 0x41bc <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    41b6:	19 82       	std	Y+1, r1	; 0x01
    41b8:	01 c0       	rjmp	.+2      	; 0x41bc <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    41ba:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    41bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    41be:	28 96       	adiw	r28, 0x08	; 8
    41c0:	0f b6       	in	r0, 0x3f	; 63
    41c2:	f8 94       	cli
    41c4:	de bf       	out	0x3e, r29	; 62
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	cd bf       	out	0x3d, r28	; 61
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	08 95       	ret

000041d0 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    41d0:	df 93       	push	r29
    41d2:	cf 93       	push	r28
    41d4:	cd b7       	in	r28, 0x3d	; 61
    41d6:	de b7       	in	r29, 0x3e	; 62
    41d8:	27 97       	sbiw	r28, 0x07	; 7
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	de bf       	out	0x3e, r29	; 62
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	8a 83       	std	Y+2, r24	; 0x02
    41e6:	6b 83       	std	Y+3, r22	; 0x03
    41e8:	5d 83       	std	Y+5, r21	; 0x05
    41ea:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    41f0:	8a 81       	ldd	r24, Y+2	; 0x02
    41f2:	84 30       	cpi	r24, 0x04	; 4
    41f4:	08 f0       	brcs	.+2      	; 0x41f8 <DIO_enumGetPinValue+0x28>
    41f6:	a6 c0       	rjmp	.+332    	; 0x4344 <DIO_enumGetPinValue+0x174>
    41f8:	8b 81       	ldd	r24, Y+3	; 0x03
    41fa:	88 30       	cpi	r24, 0x08	; 8
    41fc:	08 f0       	brcs	.+2      	; 0x4200 <DIO_enumGetPinValue+0x30>
    41fe:	a2 c0       	rjmp	.+324    	; 0x4344 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    4200:	8a 81       	ldd	r24, Y+2	; 0x02
    4202:	28 2f       	mov	r18, r24
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	3f 83       	std	Y+7, r19	; 0x07
    4208:	2e 83       	std	Y+6, r18	; 0x06
    420a:	4e 81       	ldd	r20, Y+6	; 0x06
    420c:	5f 81       	ldd	r21, Y+7	; 0x07
    420e:	41 30       	cpi	r20, 0x01	; 1
    4210:	51 05       	cpc	r21, r1
    4212:	c1 f1       	breq	.+112    	; 0x4284 <DIO_enumGetPinValue+0xb4>
    4214:	8e 81       	ldd	r24, Y+6	; 0x06
    4216:	9f 81       	ldd	r25, Y+7	; 0x07
    4218:	82 30       	cpi	r24, 0x02	; 2
    421a:	91 05       	cpc	r25, r1
    421c:	34 f4       	brge	.+12     	; 0x422a <DIO_enumGetPinValue+0x5a>
    421e:	2e 81       	ldd	r18, Y+6	; 0x06
    4220:	3f 81       	ldd	r19, Y+7	; 0x07
    4222:	21 15       	cp	r18, r1
    4224:	31 05       	cpc	r19, r1
    4226:	71 f0       	breq	.+28     	; 0x4244 <DIO_enumGetPinValue+0x74>
    4228:	8e c0       	rjmp	.+284    	; 0x4346 <DIO_enumGetPinValue+0x176>
    422a:	4e 81       	ldd	r20, Y+6	; 0x06
    422c:	5f 81       	ldd	r21, Y+7	; 0x07
    422e:	42 30       	cpi	r20, 0x02	; 2
    4230:	51 05       	cpc	r21, r1
    4232:	09 f4       	brne	.+2      	; 0x4236 <DIO_enumGetPinValue+0x66>
    4234:	47 c0       	rjmp	.+142    	; 0x42c4 <DIO_enumGetPinValue+0xf4>
    4236:	8e 81       	ldd	r24, Y+6	; 0x06
    4238:	9f 81       	ldd	r25, Y+7	; 0x07
    423a:	83 30       	cpi	r24, 0x03	; 3
    423c:	91 05       	cpc	r25, r1
    423e:	09 f4       	brne	.+2      	; 0x4242 <DIO_enumGetPinValue+0x72>
    4240:	61 c0       	rjmp	.+194    	; 0x4304 <DIO_enumGetPinValue+0x134>
    4242:	81 c0       	rjmp	.+258    	; 0x4346 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    4244:	e9 e3       	ldi	r30, 0x39	; 57
    4246:	f0 e0       	ldi	r31, 0x00	; 0
    4248:	80 81       	ld	r24, Z
    424a:	48 2f       	mov	r20, r24
    424c:	50 e0       	ldi	r21, 0x00	; 0
    424e:	8b 81       	ldd	r24, Y+3	; 0x03
    4250:	28 2f       	mov	r18, r24
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	02 c0       	rjmp	.+4      	; 0x425e <DIO_enumGetPinValue+0x8e>
    425a:	88 0f       	add	r24, r24
    425c:	99 1f       	adc	r25, r25
    425e:	2a 95       	dec	r18
    4260:	e2 f7       	brpl	.-8      	; 0x425a <DIO_enumGetPinValue+0x8a>
    4262:	9a 01       	movw	r18, r20
    4264:	28 23       	and	r18, r24
    4266:	39 23       	and	r19, r25
    4268:	8b 81       	ldd	r24, Y+3	; 0x03
    426a:	88 2f       	mov	r24, r24
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	a9 01       	movw	r20, r18
    4270:	02 c0       	rjmp	.+4      	; 0x4276 <DIO_enumGetPinValue+0xa6>
    4272:	55 95       	asr	r21
    4274:	47 95       	ror	r20
    4276:	8a 95       	dec	r24
    4278:	e2 f7       	brpl	.-8      	; 0x4272 <DIO_enumGetPinValue+0xa2>
    427a:	ca 01       	movw	r24, r20
    427c:	ec 81       	ldd	r30, Y+4	; 0x04
    427e:	fd 81       	ldd	r31, Y+5	; 0x05
    4280:	80 83       	st	Z, r24
    4282:	61 c0       	rjmp	.+194    	; 0x4346 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    4284:	e6 e3       	ldi	r30, 0x36	; 54
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	80 81       	ld	r24, Z
    428a:	48 2f       	mov	r20, r24
    428c:	50 e0       	ldi	r21, 0x00	; 0
    428e:	8b 81       	ldd	r24, Y+3	; 0x03
    4290:	28 2f       	mov	r18, r24
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	02 c0       	rjmp	.+4      	; 0x429e <DIO_enumGetPinValue+0xce>
    429a:	88 0f       	add	r24, r24
    429c:	99 1f       	adc	r25, r25
    429e:	2a 95       	dec	r18
    42a0:	e2 f7       	brpl	.-8      	; 0x429a <DIO_enumGetPinValue+0xca>
    42a2:	9a 01       	movw	r18, r20
    42a4:	28 23       	and	r18, r24
    42a6:	39 23       	and	r19, r25
    42a8:	8b 81       	ldd	r24, Y+3	; 0x03
    42aa:	88 2f       	mov	r24, r24
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	a9 01       	movw	r20, r18
    42b0:	02 c0       	rjmp	.+4      	; 0x42b6 <DIO_enumGetPinValue+0xe6>
    42b2:	55 95       	asr	r21
    42b4:	47 95       	ror	r20
    42b6:	8a 95       	dec	r24
    42b8:	e2 f7       	brpl	.-8      	; 0x42b2 <DIO_enumGetPinValue+0xe2>
    42ba:	ca 01       	movw	r24, r20
    42bc:	ec 81       	ldd	r30, Y+4	; 0x04
    42be:	fd 81       	ldd	r31, Y+5	; 0x05
    42c0:	80 83       	st	Z, r24
    42c2:	41 c0       	rjmp	.+130    	; 0x4346 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    42c4:	e3 e3       	ldi	r30, 0x33	; 51
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	80 81       	ld	r24, Z
    42ca:	48 2f       	mov	r20, r24
    42cc:	50 e0       	ldi	r21, 0x00	; 0
    42ce:	8b 81       	ldd	r24, Y+3	; 0x03
    42d0:	28 2f       	mov	r18, r24
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	02 c0       	rjmp	.+4      	; 0x42de <DIO_enumGetPinValue+0x10e>
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	2a 95       	dec	r18
    42e0:	e2 f7       	brpl	.-8      	; 0x42da <DIO_enumGetPinValue+0x10a>
    42e2:	9a 01       	movw	r18, r20
    42e4:	28 23       	and	r18, r24
    42e6:	39 23       	and	r19, r25
    42e8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ea:	88 2f       	mov	r24, r24
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	a9 01       	movw	r20, r18
    42f0:	02 c0       	rjmp	.+4      	; 0x42f6 <DIO_enumGetPinValue+0x126>
    42f2:	55 95       	asr	r21
    42f4:	47 95       	ror	r20
    42f6:	8a 95       	dec	r24
    42f8:	e2 f7       	brpl	.-8      	; 0x42f2 <DIO_enumGetPinValue+0x122>
    42fa:	ca 01       	movw	r24, r20
    42fc:	ec 81       	ldd	r30, Y+4	; 0x04
    42fe:	fd 81       	ldd	r31, Y+5	; 0x05
    4300:	80 83       	st	Z, r24
    4302:	21 c0       	rjmp	.+66     	; 0x4346 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    4304:	e0 e3       	ldi	r30, 0x30	; 48
    4306:	f0 e0       	ldi	r31, 0x00	; 0
    4308:	80 81       	ld	r24, Z
    430a:	48 2f       	mov	r20, r24
    430c:	50 e0       	ldi	r21, 0x00	; 0
    430e:	8b 81       	ldd	r24, Y+3	; 0x03
    4310:	28 2f       	mov	r18, r24
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	02 c0       	rjmp	.+4      	; 0x431e <DIO_enumGetPinValue+0x14e>
    431a:	88 0f       	add	r24, r24
    431c:	99 1f       	adc	r25, r25
    431e:	2a 95       	dec	r18
    4320:	e2 f7       	brpl	.-8      	; 0x431a <DIO_enumGetPinValue+0x14a>
    4322:	9a 01       	movw	r18, r20
    4324:	28 23       	and	r18, r24
    4326:	39 23       	and	r19, r25
    4328:	8b 81       	ldd	r24, Y+3	; 0x03
    432a:	88 2f       	mov	r24, r24
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	a9 01       	movw	r20, r18
    4330:	02 c0       	rjmp	.+4      	; 0x4336 <DIO_enumGetPinValue+0x166>
    4332:	55 95       	asr	r21
    4334:	47 95       	ror	r20
    4336:	8a 95       	dec	r24
    4338:	e2 f7       	brpl	.-8      	; 0x4332 <DIO_enumGetPinValue+0x162>
    433a:	ca 01       	movw	r24, r20
    433c:	ec 81       	ldd	r30, Y+4	; 0x04
    433e:	fd 81       	ldd	r31, Y+5	; 0x05
    4340:	80 83       	st	Z, r24
    4342:	01 c0       	rjmp	.+2      	; 0x4346 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    4344:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    4346:	89 81       	ldd	r24, Y+1	; 0x01
}
    4348:	27 96       	adiw	r28, 0x07	; 7
    434a:	0f b6       	in	r0, 0x3f	; 63
    434c:	f8 94       	cli
    434e:	de bf       	out	0x3e, r29	; 62
    4350:	0f be       	out	0x3f, r0	; 63
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	cf 91       	pop	r28
    4356:	df 91       	pop	r29
    4358:	08 95       	ret

0000435a <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    435a:	df 93       	push	r29
    435c:	cf 93       	push	r28
    435e:	00 d0       	rcall	.+0      	; 0x4360 <DIO_enumTogglePinValue+0x6>
    4360:	00 d0       	rcall	.+0      	; 0x4362 <DIO_enumTogglePinValue+0x8>
    4362:	0f 92       	push	r0
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	8a 83       	std	Y+2, r24	; 0x02
    436a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    4370:	8b 81       	ldd	r24, Y+3	; 0x03
    4372:	88 30       	cpi	r24, 0x08	; 8
    4374:	08 f0       	brcs	.+2      	; 0x4378 <DIO_enumTogglePinValue+0x1e>
    4376:	6f c0       	rjmp	.+222    	; 0x4456 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    4378:	8a 81       	ldd	r24, Y+2	; 0x02
    437a:	28 2f       	mov	r18, r24
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	3d 83       	std	Y+5, r19	; 0x05
    4380:	2c 83       	std	Y+4, r18	; 0x04
    4382:	8c 81       	ldd	r24, Y+4	; 0x04
    4384:	9d 81       	ldd	r25, Y+5	; 0x05
    4386:	81 30       	cpi	r24, 0x01	; 1
    4388:	91 05       	cpc	r25, r1
    438a:	49 f1       	breq	.+82     	; 0x43de <DIO_enumTogglePinValue+0x84>
    438c:	2c 81       	ldd	r18, Y+4	; 0x04
    438e:	3d 81       	ldd	r19, Y+5	; 0x05
    4390:	22 30       	cpi	r18, 0x02	; 2
    4392:	31 05       	cpc	r19, r1
    4394:	2c f4       	brge	.+10     	; 0x43a0 <DIO_enumTogglePinValue+0x46>
    4396:	8c 81       	ldd	r24, Y+4	; 0x04
    4398:	9d 81       	ldd	r25, Y+5	; 0x05
    439a:	00 97       	sbiw	r24, 0x00	; 0
    439c:	61 f0       	breq	.+24     	; 0x43b6 <DIO_enumTogglePinValue+0x5c>
    439e:	5c c0       	rjmp	.+184    	; 0x4458 <DIO_enumTogglePinValue+0xfe>
    43a0:	2c 81       	ldd	r18, Y+4	; 0x04
    43a2:	3d 81       	ldd	r19, Y+5	; 0x05
    43a4:	22 30       	cpi	r18, 0x02	; 2
    43a6:	31 05       	cpc	r19, r1
    43a8:	71 f1       	breq	.+92     	; 0x4406 <DIO_enumTogglePinValue+0xac>
    43aa:	8c 81       	ldd	r24, Y+4	; 0x04
    43ac:	9d 81       	ldd	r25, Y+5	; 0x05
    43ae:	83 30       	cpi	r24, 0x03	; 3
    43b0:	91 05       	cpc	r25, r1
    43b2:	e9 f1       	breq	.+122    	; 0x442e <DIO_enumTogglePinValue+0xd4>
    43b4:	51 c0       	rjmp	.+162    	; 0x4458 <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    43b6:	ab e3       	ldi	r26, 0x3B	; 59
    43b8:	b0 e0       	ldi	r27, 0x00	; 0
    43ba:	eb e3       	ldi	r30, 0x3B	; 59
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	80 81       	ld	r24, Z
    43c0:	48 2f       	mov	r20, r24
    43c2:	8b 81       	ldd	r24, Y+3	; 0x03
    43c4:	28 2f       	mov	r18, r24
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	81 e0       	ldi	r24, 0x01	; 1
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	02 2e       	mov	r0, r18
    43ce:	02 c0       	rjmp	.+4      	; 0x43d4 <DIO_enumTogglePinValue+0x7a>
    43d0:	88 0f       	add	r24, r24
    43d2:	99 1f       	adc	r25, r25
    43d4:	0a 94       	dec	r0
    43d6:	e2 f7       	brpl	.-8      	; 0x43d0 <DIO_enumTogglePinValue+0x76>
    43d8:	84 27       	eor	r24, r20
    43da:	8c 93       	st	X, r24
    43dc:	3d c0       	rjmp	.+122    	; 0x4458 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    43de:	a8 e3       	ldi	r26, 0x38	; 56
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	e8 e3       	ldi	r30, 0x38	; 56
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	48 2f       	mov	r20, r24
    43ea:	8b 81       	ldd	r24, Y+3	; 0x03
    43ec:	28 2f       	mov	r18, r24
    43ee:	30 e0       	ldi	r19, 0x00	; 0
    43f0:	81 e0       	ldi	r24, 0x01	; 1
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	02 2e       	mov	r0, r18
    43f6:	02 c0       	rjmp	.+4      	; 0x43fc <DIO_enumTogglePinValue+0xa2>
    43f8:	88 0f       	add	r24, r24
    43fa:	99 1f       	adc	r25, r25
    43fc:	0a 94       	dec	r0
    43fe:	e2 f7       	brpl	.-8      	; 0x43f8 <DIO_enumTogglePinValue+0x9e>
    4400:	84 27       	eor	r24, r20
    4402:	8c 93       	st	X, r24
    4404:	29 c0       	rjmp	.+82     	; 0x4458 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    4406:	a5 e3       	ldi	r26, 0x35	; 53
    4408:	b0 e0       	ldi	r27, 0x00	; 0
    440a:	e5 e3       	ldi	r30, 0x35	; 53
    440c:	f0 e0       	ldi	r31, 0x00	; 0
    440e:	80 81       	ld	r24, Z
    4410:	48 2f       	mov	r20, r24
    4412:	8b 81       	ldd	r24, Y+3	; 0x03
    4414:	28 2f       	mov	r18, r24
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	02 2e       	mov	r0, r18
    441e:	02 c0       	rjmp	.+4      	; 0x4424 <DIO_enumTogglePinValue+0xca>
    4420:	88 0f       	add	r24, r24
    4422:	99 1f       	adc	r25, r25
    4424:	0a 94       	dec	r0
    4426:	e2 f7       	brpl	.-8      	; 0x4420 <DIO_enumTogglePinValue+0xc6>
    4428:	84 27       	eor	r24, r20
    442a:	8c 93       	st	X, r24
    442c:	15 c0       	rjmp	.+42     	; 0x4458 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    442e:	a2 e3       	ldi	r26, 0x32	; 50
    4430:	b0 e0       	ldi	r27, 0x00	; 0
    4432:	e2 e3       	ldi	r30, 0x32	; 50
    4434:	f0 e0       	ldi	r31, 0x00	; 0
    4436:	80 81       	ld	r24, Z
    4438:	48 2f       	mov	r20, r24
    443a:	8b 81       	ldd	r24, Y+3	; 0x03
    443c:	28 2f       	mov	r18, r24
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	81 e0       	ldi	r24, 0x01	; 1
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	02 2e       	mov	r0, r18
    4446:	02 c0       	rjmp	.+4      	; 0x444c <DIO_enumTogglePinValue+0xf2>
    4448:	88 0f       	add	r24, r24
    444a:	99 1f       	adc	r25, r25
    444c:	0a 94       	dec	r0
    444e:	e2 f7       	brpl	.-8      	; 0x4448 <DIO_enumTogglePinValue+0xee>
    4450:	84 27       	eor	r24, r20
    4452:	8c 93       	st	X, r24
    4454:	01 c0       	rjmp	.+2      	; 0x4458 <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    4456:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    4458:	89 81       	ldd	r24, Y+1	; 0x01
}
    445a:	0f 90       	pop	r0
    445c:	0f 90       	pop	r0
    445e:	0f 90       	pop	r0
    4460:	0f 90       	pop	r0
    4462:	0f 90       	pop	r0
    4464:	cf 91       	pop	r28
    4466:	df 91       	pop	r29
    4468:	08 95       	ret

0000446a <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    446a:	df 93       	push	r29
    446c:	cf 93       	push	r28
    446e:	00 d0       	rcall	.+0      	; 0x4470 <DIO_enumConnectPullup+0x6>
    4470:	00 d0       	rcall	.+0      	; 0x4472 <DIO_enumConnectPullup+0x8>
    4472:	00 d0       	rcall	.+0      	; 0x4474 <DIO_enumConnectPullup+0xa>
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	8a 83       	std	Y+2, r24	; 0x02
    447a:	6b 83       	std	Y+3, r22	; 0x03
    447c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    4482:	8a 81       	ldd	r24, Y+2	; 0x02
    4484:	84 30       	cpi	r24, 0x04	; 4
    4486:	08 f0       	brcs	.+2      	; 0x448a <DIO_enumConnectPullup+0x20>
    4488:	3e c1       	rjmp	.+636    	; 0x4706 <DIO_enumConnectPullup+0x29c>
    448a:	8b 81       	ldd	r24, Y+3	; 0x03
    448c:	88 30       	cpi	r24, 0x08	; 8
    448e:	08 f0       	brcs	.+2      	; 0x4492 <DIO_enumConnectPullup+0x28>
    4490:	3a c1       	rjmp	.+628    	; 0x4706 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    4492:	8a 81       	ldd	r24, Y+2	; 0x02
    4494:	28 2f       	mov	r18, r24
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	3e 83       	std	Y+6, r19	; 0x06
    449a:	2d 83       	std	Y+5, r18	; 0x05
    449c:	8d 81       	ldd	r24, Y+5	; 0x05
    449e:	9e 81       	ldd	r25, Y+6	; 0x06
    44a0:	81 30       	cpi	r24, 0x01	; 1
    44a2:	91 05       	cpc	r25, r1
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <DIO_enumConnectPullup+0x3e>
    44a6:	5d c0       	rjmp	.+186    	; 0x4562 <DIO_enumConnectPullup+0xf8>
    44a8:	2d 81       	ldd	r18, Y+5	; 0x05
    44aa:	3e 81       	ldd	r19, Y+6	; 0x06
    44ac:	22 30       	cpi	r18, 0x02	; 2
    44ae:	31 05       	cpc	r19, r1
    44b0:	2c f4       	brge	.+10     	; 0x44bc <DIO_enumConnectPullup+0x52>
    44b2:	8d 81       	ldd	r24, Y+5	; 0x05
    44b4:	9e 81       	ldd	r25, Y+6	; 0x06
    44b6:	00 97       	sbiw	r24, 0x00	; 0
    44b8:	71 f0       	breq	.+28     	; 0x44d6 <DIO_enumConnectPullup+0x6c>
    44ba:	26 c1       	rjmp	.+588    	; 0x4708 <DIO_enumConnectPullup+0x29e>
    44bc:	2d 81       	ldd	r18, Y+5	; 0x05
    44be:	3e 81       	ldd	r19, Y+6	; 0x06
    44c0:	22 30       	cpi	r18, 0x02	; 2
    44c2:	31 05       	cpc	r19, r1
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <DIO_enumConnectPullup+0x5e>
    44c6:	93 c0       	rjmp	.+294    	; 0x45ee <DIO_enumConnectPullup+0x184>
    44c8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ca:	9e 81       	ldd	r25, Y+6	; 0x06
    44cc:	83 30       	cpi	r24, 0x03	; 3
    44ce:	91 05       	cpc	r25, r1
    44d0:	09 f4       	brne	.+2      	; 0x44d4 <DIO_enumConnectPullup+0x6a>
    44d2:	d3 c0       	rjmp	.+422    	; 0x467a <DIO_enumConnectPullup+0x210>
    44d4:	19 c1       	rjmp	.+562    	; 0x4708 <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    44d6:	8c 81       	ldd	r24, Y+4	; 0x04
    44d8:	81 30       	cpi	r24, 0x01	; 1
    44da:	71 f5       	brne	.+92     	; 0x4538 <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    44dc:	a0 e5       	ldi	r26, 0x50	; 80
    44de:	b0 e0       	ldi	r27, 0x00	; 0
    44e0:	e0 e5       	ldi	r30, 0x50	; 80
    44e2:	f0 e0       	ldi	r31, 0x00	; 0
    44e4:	80 81       	ld	r24, Z
    44e6:	8b 7f       	andi	r24, 0xFB	; 251
    44e8:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    44ea:	aa e3       	ldi	r26, 0x3A	; 58
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	ea e3       	ldi	r30, 0x3A	; 58
    44f0:	f0 e0       	ldi	r31, 0x00	; 0
    44f2:	80 81       	ld	r24, Z
    44f4:	48 2f       	mov	r20, r24
    44f6:	8b 81       	ldd	r24, Y+3	; 0x03
    44f8:	28 2f       	mov	r18, r24
    44fa:	30 e0       	ldi	r19, 0x00	; 0
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	02 c0       	rjmp	.+4      	; 0x4506 <DIO_enumConnectPullup+0x9c>
    4502:	88 0f       	add	r24, r24
    4504:	99 1f       	adc	r25, r25
    4506:	2a 95       	dec	r18
    4508:	e2 f7       	brpl	.-8      	; 0x4502 <DIO_enumConnectPullup+0x98>
    450a:	80 95       	com	r24
    450c:	84 23       	and	r24, r20
    450e:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    4510:	ab e3       	ldi	r26, 0x3B	; 59
    4512:	b0 e0       	ldi	r27, 0x00	; 0
    4514:	eb e3       	ldi	r30, 0x3B	; 59
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	80 81       	ld	r24, Z
    451a:	48 2f       	mov	r20, r24
    451c:	8b 81       	ldd	r24, Y+3	; 0x03
    451e:	28 2f       	mov	r18, r24
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	02 2e       	mov	r0, r18
    4528:	02 c0       	rjmp	.+4      	; 0x452e <DIO_enumConnectPullup+0xc4>
    452a:	88 0f       	add	r24, r24
    452c:	99 1f       	adc	r25, r25
    452e:	0a 94       	dec	r0
    4530:	e2 f7       	brpl	.-8      	; 0x452a <DIO_enumConnectPullup+0xc0>
    4532:	84 2b       	or	r24, r20
    4534:	8c 93       	st	X, r24
    4536:	e8 c0       	rjmp	.+464    	; 0x4708 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    4538:	ab e3       	ldi	r26, 0x3B	; 59
    453a:	b0 e0       	ldi	r27, 0x00	; 0
    453c:	eb e3       	ldi	r30, 0x3B	; 59
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	80 81       	ld	r24, Z
    4542:	48 2f       	mov	r20, r24
    4544:	8b 81       	ldd	r24, Y+3	; 0x03
    4546:	28 2f       	mov	r18, r24
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	02 2e       	mov	r0, r18
    4550:	02 c0       	rjmp	.+4      	; 0x4556 <DIO_enumConnectPullup+0xec>
    4552:	88 0f       	add	r24, r24
    4554:	99 1f       	adc	r25, r25
    4556:	0a 94       	dec	r0
    4558:	e2 f7       	brpl	.-8      	; 0x4552 <DIO_enumConnectPullup+0xe8>
    455a:	80 95       	com	r24
    455c:	84 23       	and	r24, r20
    455e:	8c 93       	st	X, r24
    4560:	d3 c0       	rjmp	.+422    	; 0x4708 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    4562:	8c 81       	ldd	r24, Y+4	; 0x04
    4564:	81 30       	cpi	r24, 0x01	; 1
    4566:	71 f5       	brne	.+92     	; 0x45c4 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    4568:	a0 e5       	ldi	r26, 0x50	; 80
    456a:	b0 e0       	ldi	r27, 0x00	; 0
    456c:	e0 e5       	ldi	r30, 0x50	; 80
    456e:	f0 e0       	ldi	r31, 0x00	; 0
    4570:	80 81       	ld	r24, Z
    4572:	8b 7f       	andi	r24, 0xFB	; 251
    4574:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    4576:	a7 e3       	ldi	r26, 0x37	; 55
    4578:	b0 e0       	ldi	r27, 0x00	; 0
    457a:	e7 e3       	ldi	r30, 0x37	; 55
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	80 81       	ld	r24, Z
    4580:	48 2f       	mov	r20, r24
    4582:	8b 81       	ldd	r24, Y+3	; 0x03
    4584:	28 2f       	mov	r18, r24
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	02 c0       	rjmp	.+4      	; 0x4592 <DIO_enumConnectPullup+0x128>
    458e:	88 0f       	add	r24, r24
    4590:	99 1f       	adc	r25, r25
    4592:	2a 95       	dec	r18
    4594:	e2 f7       	brpl	.-8      	; 0x458e <DIO_enumConnectPullup+0x124>
    4596:	80 95       	com	r24
    4598:	84 23       	and	r24, r20
    459a:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    459c:	a8 e3       	ldi	r26, 0x38	; 56
    459e:	b0 e0       	ldi	r27, 0x00	; 0
    45a0:	e8 e3       	ldi	r30, 0x38	; 56
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	80 81       	ld	r24, Z
    45a6:	48 2f       	mov	r20, r24
    45a8:	8b 81       	ldd	r24, Y+3	; 0x03
    45aa:	28 2f       	mov	r18, r24
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	02 2e       	mov	r0, r18
    45b4:	02 c0       	rjmp	.+4      	; 0x45ba <DIO_enumConnectPullup+0x150>
    45b6:	88 0f       	add	r24, r24
    45b8:	99 1f       	adc	r25, r25
    45ba:	0a 94       	dec	r0
    45bc:	e2 f7       	brpl	.-8      	; 0x45b6 <DIO_enumConnectPullup+0x14c>
    45be:	84 2b       	or	r24, r20
    45c0:	8c 93       	st	X, r24
    45c2:	a2 c0       	rjmp	.+324    	; 0x4708 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    45c4:	a8 e3       	ldi	r26, 0x38	; 56
    45c6:	b0 e0       	ldi	r27, 0x00	; 0
    45c8:	e8 e3       	ldi	r30, 0x38	; 56
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	80 81       	ld	r24, Z
    45ce:	48 2f       	mov	r20, r24
    45d0:	8b 81       	ldd	r24, Y+3	; 0x03
    45d2:	28 2f       	mov	r18, r24
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	81 e0       	ldi	r24, 0x01	; 1
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	02 2e       	mov	r0, r18
    45dc:	02 c0       	rjmp	.+4      	; 0x45e2 <DIO_enumConnectPullup+0x178>
    45de:	88 0f       	add	r24, r24
    45e0:	99 1f       	adc	r25, r25
    45e2:	0a 94       	dec	r0
    45e4:	e2 f7       	brpl	.-8      	; 0x45de <DIO_enumConnectPullup+0x174>
    45e6:	80 95       	com	r24
    45e8:	84 23       	and	r24, r20
    45ea:	8c 93       	st	X, r24
    45ec:	8d c0       	rjmp	.+282    	; 0x4708 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    45ee:	8c 81       	ldd	r24, Y+4	; 0x04
    45f0:	81 30       	cpi	r24, 0x01	; 1
    45f2:	71 f5       	brne	.+92     	; 0x4650 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    45f4:	a0 e5       	ldi	r26, 0x50	; 80
    45f6:	b0 e0       	ldi	r27, 0x00	; 0
    45f8:	e0 e5       	ldi	r30, 0x50	; 80
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	80 81       	ld	r24, Z
    45fe:	8b 7f       	andi	r24, 0xFB	; 251
    4600:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    4602:	a4 e3       	ldi	r26, 0x34	; 52
    4604:	b0 e0       	ldi	r27, 0x00	; 0
    4606:	e4 e3       	ldi	r30, 0x34	; 52
    4608:	f0 e0       	ldi	r31, 0x00	; 0
    460a:	80 81       	ld	r24, Z
    460c:	48 2f       	mov	r20, r24
    460e:	8b 81       	ldd	r24, Y+3	; 0x03
    4610:	28 2f       	mov	r18, r24
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	02 c0       	rjmp	.+4      	; 0x461e <DIO_enumConnectPullup+0x1b4>
    461a:	88 0f       	add	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	2a 95       	dec	r18
    4620:	e2 f7       	brpl	.-8      	; 0x461a <DIO_enumConnectPullup+0x1b0>
    4622:	80 95       	com	r24
    4624:	84 23       	and	r24, r20
    4626:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    4628:	a5 e3       	ldi	r26, 0x35	; 53
    462a:	b0 e0       	ldi	r27, 0x00	; 0
    462c:	e5 e3       	ldi	r30, 0x35	; 53
    462e:	f0 e0       	ldi	r31, 0x00	; 0
    4630:	80 81       	ld	r24, Z
    4632:	48 2f       	mov	r20, r24
    4634:	8b 81       	ldd	r24, Y+3	; 0x03
    4636:	28 2f       	mov	r18, r24
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	02 2e       	mov	r0, r18
    4640:	02 c0       	rjmp	.+4      	; 0x4646 <DIO_enumConnectPullup+0x1dc>
    4642:	88 0f       	add	r24, r24
    4644:	99 1f       	adc	r25, r25
    4646:	0a 94       	dec	r0
    4648:	e2 f7       	brpl	.-8      	; 0x4642 <DIO_enumConnectPullup+0x1d8>
    464a:	84 2b       	or	r24, r20
    464c:	8c 93       	st	X, r24
    464e:	5c c0       	rjmp	.+184    	; 0x4708 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    4650:	a5 e3       	ldi	r26, 0x35	; 53
    4652:	b0 e0       	ldi	r27, 0x00	; 0
    4654:	e5 e3       	ldi	r30, 0x35	; 53
    4656:	f0 e0       	ldi	r31, 0x00	; 0
    4658:	80 81       	ld	r24, Z
    465a:	48 2f       	mov	r20, r24
    465c:	8b 81       	ldd	r24, Y+3	; 0x03
    465e:	28 2f       	mov	r18, r24
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	02 2e       	mov	r0, r18
    4668:	02 c0       	rjmp	.+4      	; 0x466e <DIO_enumConnectPullup+0x204>
    466a:	88 0f       	add	r24, r24
    466c:	99 1f       	adc	r25, r25
    466e:	0a 94       	dec	r0
    4670:	e2 f7       	brpl	.-8      	; 0x466a <DIO_enumConnectPullup+0x200>
    4672:	80 95       	com	r24
    4674:	84 23       	and	r24, r20
    4676:	8c 93       	st	X, r24
    4678:	47 c0       	rjmp	.+142    	; 0x4708 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    467a:	8c 81       	ldd	r24, Y+4	; 0x04
    467c:	81 30       	cpi	r24, 0x01	; 1
    467e:	71 f5       	brne	.+92     	; 0x46dc <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    4680:	a0 e5       	ldi	r26, 0x50	; 80
    4682:	b0 e0       	ldi	r27, 0x00	; 0
    4684:	e0 e5       	ldi	r30, 0x50	; 80
    4686:	f0 e0       	ldi	r31, 0x00	; 0
    4688:	80 81       	ld	r24, Z
    468a:	8b 7f       	andi	r24, 0xFB	; 251
    468c:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    468e:	a1 e3       	ldi	r26, 0x31	; 49
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	e1 e3       	ldi	r30, 0x31	; 49
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	80 81       	ld	r24, Z
    4698:	48 2f       	mov	r20, r24
    469a:	8b 81       	ldd	r24, Y+3	; 0x03
    469c:	28 2f       	mov	r18, r24
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	90 e0       	ldi	r25, 0x00	; 0
    46a4:	02 c0       	rjmp	.+4      	; 0x46aa <DIO_enumConnectPullup+0x240>
    46a6:	88 0f       	add	r24, r24
    46a8:	99 1f       	adc	r25, r25
    46aa:	2a 95       	dec	r18
    46ac:	e2 f7       	brpl	.-8      	; 0x46a6 <DIO_enumConnectPullup+0x23c>
    46ae:	80 95       	com	r24
    46b0:	84 23       	and	r24, r20
    46b2:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    46b4:	a2 e3       	ldi	r26, 0x32	; 50
    46b6:	b0 e0       	ldi	r27, 0x00	; 0
    46b8:	e2 e3       	ldi	r30, 0x32	; 50
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	80 81       	ld	r24, Z
    46be:	48 2f       	mov	r20, r24
    46c0:	8b 81       	ldd	r24, Y+3	; 0x03
    46c2:	28 2f       	mov	r18, r24
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	81 e0       	ldi	r24, 0x01	; 1
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	02 2e       	mov	r0, r18
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <DIO_enumConnectPullup+0x268>
    46ce:	88 0f       	add	r24, r24
    46d0:	99 1f       	adc	r25, r25
    46d2:	0a 94       	dec	r0
    46d4:	e2 f7       	brpl	.-8      	; 0x46ce <DIO_enumConnectPullup+0x264>
    46d6:	84 2b       	or	r24, r20
    46d8:	8c 93       	st	X, r24
    46da:	16 c0       	rjmp	.+44     	; 0x4708 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    46dc:	a2 e3       	ldi	r26, 0x32	; 50
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	e2 e3       	ldi	r30, 0x32	; 50
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	80 81       	ld	r24, Z
    46e6:	48 2f       	mov	r20, r24
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	28 2f       	mov	r18, r24
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	02 2e       	mov	r0, r18
    46f4:	02 c0       	rjmp	.+4      	; 0x46fa <DIO_enumConnectPullup+0x290>
    46f6:	88 0f       	add	r24, r24
    46f8:	99 1f       	adc	r25, r25
    46fa:	0a 94       	dec	r0
    46fc:	e2 f7       	brpl	.-8      	; 0x46f6 <DIO_enumConnectPullup+0x28c>
    46fe:	80 95       	com	r24
    4700:	84 23       	and	r24, r20
    4702:	8c 93       	st	X, r24
    4704:	01 c0       	rjmp	.+2      	; 0x4708 <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    4706:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    4708:	89 81       	ldd	r24, Y+1	; 0x01


}
    470a:	26 96       	adiw	r28, 0x06	; 6
    470c:	0f b6       	in	r0, 0x3f	; 63
    470e:	f8 94       	cli
    4710:	de bf       	out	0x3e, r29	; 62
    4712:	0f be       	out	0x3f, r0	; 63
    4714:	cd bf       	out	0x3d, r28	; 61
    4716:	cf 91       	pop	r28
    4718:	df 91       	pop	r29
    471a:	08 95       	ret

0000471c <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
    471c:	df 93       	push	r29
    471e:	cf 93       	push	r28
    4720:	00 d0       	rcall	.+0      	; 0x4722 <DIO_enumSetPortDirection+0x6>
    4722:	00 d0       	rcall	.+0      	; 0x4724 <DIO_enumSetPortDirection+0x8>
    4724:	0f 92       	push	r0
    4726:	cd b7       	in	r28, 0x3d	; 61
    4728:	de b7       	in	r29, 0x3e	; 62
    472a:	8a 83       	std	Y+2, r24	; 0x02
    472c:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    4732:	8a 81       	ldd	r24, Y+2	; 0x02
    4734:	84 30       	cpi	r24, 0x04	; 4
    4736:	a8 f5       	brcc	.+106    	; 0x47a2 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    4738:	8a 81       	ldd	r24, Y+2	; 0x02
    473a:	28 2f       	mov	r18, r24
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	3d 83       	std	Y+5, r19	; 0x05
    4740:	2c 83       	std	Y+4, r18	; 0x04
    4742:	8c 81       	ldd	r24, Y+4	; 0x04
    4744:	9d 81       	ldd	r25, Y+5	; 0x05
    4746:	81 30       	cpi	r24, 0x01	; 1
    4748:	91 05       	cpc	r25, r1
    474a:	d1 f0       	breq	.+52     	; 0x4780 <DIO_enumSetPortDirection+0x64>
    474c:	2c 81       	ldd	r18, Y+4	; 0x04
    474e:	3d 81       	ldd	r19, Y+5	; 0x05
    4750:	22 30       	cpi	r18, 0x02	; 2
    4752:	31 05       	cpc	r19, r1
    4754:	2c f4       	brge	.+10     	; 0x4760 <DIO_enumSetPortDirection+0x44>
    4756:	8c 81       	ldd	r24, Y+4	; 0x04
    4758:	9d 81       	ldd	r25, Y+5	; 0x05
    475a:	00 97       	sbiw	r24, 0x00	; 0
    475c:	61 f0       	breq	.+24     	; 0x4776 <DIO_enumSetPortDirection+0x5a>
    475e:	1f c0       	rjmp	.+62     	; 0x479e <DIO_enumSetPortDirection+0x82>
    4760:	2c 81       	ldd	r18, Y+4	; 0x04
    4762:	3d 81       	ldd	r19, Y+5	; 0x05
    4764:	22 30       	cpi	r18, 0x02	; 2
    4766:	31 05       	cpc	r19, r1
    4768:	81 f0       	breq	.+32     	; 0x478a <DIO_enumSetPortDirection+0x6e>
    476a:	8c 81       	ldd	r24, Y+4	; 0x04
    476c:	9d 81       	ldd	r25, Y+5	; 0x05
    476e:	83 30       	cpi	r24, 0x03	; 3
    4770:	91 05       	cpc	r25, r1
    4772:	81 f0       	breq	.+32     	; 0x4794 <DIO_enumSetPortDirection+0x78>
    4774:	14 c0       	rjmp	.+40     	; 0x479e <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    4776:	ea e3       	ldi	r30, 0x3A	; 58
    4778:	f0 e0       	ldi	r31, 0x00	; 0
    477a:	8b 81       	ldd	r24, Y+3	; 0x03
    477c:	80 83       	st	Z, r24
    477e:	12 c0       	rjmp	.+36     	; 0x47a4 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    4780:	e7 e3       	ldi	r30, 0x37	; 55
    4782:	f0 e0       	ldi	r31, 0x00	; 0
    4784:	8b 81       	ldd	r24, Y+3	; 0x03
    4786:	80 83       	st	Z, r24
    4788:	0d c0       	rjmp	.+26     	; 0x47a4 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    478a:	e4 e3       	ldi	r30, 0x34	; 52
    478c:	f0 e0       	ldi	r31, 0x00	; 0
    478e:	8b 81       	ldd	r24, Y+3	; 0x03
    4790:	80 83       	st	Z, r24
    4792:	08 c0       	rjmp	.+16     	; 0x47a4 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    4794:	e1 e3       	ldi	r30, 0x31	; 49
    4796:	f0 e0       	ldi	r31, 0x00	; 0
    4798:	8b 81       	ldd	r24, Y+3	; 0x03
    479a:	80 83       	st	Z, r24
    479c:	03 c0       	rjmp	.+6      	; 0x47a4 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    479e:	19 82       	std	Y+1, r1	; 0x01
    47a0:	01 c0       	rjmp	.+2      	; 0x47a4 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    47a2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	0f 90       	pop	r0
    47b0:	cf 91       	pop	r28
    47b2:	df 91       	pop	r29
    47b4:	08 95       	ret

000047b6 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    47b6:	df 93       	push	r29
    47b8:	cf 93       	push	r28
    47ba:	00 d0       	rcall	.+0      	; 0x47bc <DIO_enumSetPortValue+0x6>
    47bc:	00 d0       	rcall	.+0      	; 0x47be <DIO_enumSetPortValue+0x8>
    47be:	0f 92       	push	r0
    47c0:	cd b7       	in	r28, 0x3d	; 61
    47c2:	de b7       	in	r29, 0x3e	; 62
    47c4:	8a 83       	std	Y+2, r24	; 0x02
    47c6:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    47cc:	8a 81       	ldd	r24, Y+2	; 0x02
    47ce:	84 30       	cpi	r24, 0x04	; 4
    47d0:	a8 f5       	brcc	.+106    	; 0x483c <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    47d2:	8a 81       	ldd	r24, Y+2	; 0x02
    47d4:	28 2f       	mov	r18, r24
    47d6:	30 e0       	ldi	r19, 0x00	; 0
    47d8:	3d 83       	std	Y+5, r19	; 0x05
    47da:	2c 83       	std	Y+4, r18	; 0x04
    47dc:	8c 81       	ldd	r24, Y+4	; 0x04
    47de:	9d 81       	ldd	r25, Y+5	; 0x05
    47e0:	81 30       	cpi	r24, 0x01	; 1
    47e2:	91 05       	cpc	r25, r1
    47e4:	d1 f0       	breq	.+52     	; 0x481a <DIO_enumSetPortValue+0x64>
    47e6:	2c 81       	ldd	r18, Y+4	; 0x04
    47e8:	3d 81       	ldd	r19, Y+5	; 0x05
    47ea:	22 30       	cpi	r18, 0x02	; 2
    47ec:	31 05       	cpc	r19, r1
    47ee:	2c f4       	brge	.+10     	; 0x47fa <DIO_enumSetPortValue+0x44>
    47f0:	8c 81       	ldd	r24, Y+4	; 0x04
    47f2:	9d 81       	ldd	r25, Y+5	; 0x05
    47f4:	00 97       	sbiw	r24, 0x00	; 0
    47f6:	61 f0       	breq	.+24     	; 0x4810 <DIO_enumSetPortValue+0x5a>
    47f8:	1f c0       	rjmp	.+62     	; 0x4838 <DIO_enumSetPortValue+0x82>
    47fa:	2c 81       	ldd	r18, Y+4	; 0x04
    47fc:	3d 81       	ldd	r19, Y+5	; 0x05
    47fe:	22 30       	cpi	r18, 0x02	; 2
    4800:	31 05       	cpc	r19, r1
    4802:	81 f0       	breq	.+32     	; 0x4824 <DIO_enumSetPortValue+0x6e>
    4804:	8c 81       	ldd	r24, Y+4	; 0x04
    4806:	9d 81       	ldd	r25, Y+5	; 0x05
    4808:	83 30       	cpi	r24, 0x03	; 3
    480a:	91 05       	cpc	r25, r1
    480c:	81 f0       	breq	.+32     	; 0x482e <DIO_enumSetPortValue+0x78>
    480e:	14 c0       	rjmp	.+40     	; 0x4838 <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    4810:	eb e3       	ldi	r30, 0x3B	; 59
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	8b 81       	ldd	r24, Y+3	; 0x03
    4816:	80 83       	st	Z, r24
    4818:	12 c0       	rjmp	.+36     	; 0x483e <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    481a:	e8 e3       	ldi	r30, 0x38	; 56
    481c:	f0 e0       	ldi	r31, 0x00	; 0
    481e:	8b 81       	ldd	r24, Y+3	; 0x03
    4820:	80 83       	st	Z, r24
    4822:	0d c0       	rjmp	.+26     	; 0x483e <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    4824:	e5 e3       	ldi	r30, 0x35	; 53
    4826:	f0 e0       	ldi	r31, 0x00	; 0
    4828:	8b 81       	ldd	r24, Y+3	; 0x03
    482a:	80 83       	st	Z, r24
    482c:	08 c0       	rjmp	.+16     	; 0x483e <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    482e:	e2 e3       	ldi	r30, 0x32	; 50
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	8b 81       	ldd	r24, Y+3	; 0x03
    4834:	80 83       	st	Z, r24
    4836:	03 c0       	rjmp	.+6      	; 0x483e <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    4838:	19 82       	std	Y+1, r1	; 0x01
    483a:	01 c0       	rjmp	.+2      	; 0x483e <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    483c:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    483e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4840:	0f 90       	pop	r0
    4842:	0f 90       	pop	r0
    4844:	0f 90       	pop	r0
    4846:	0f 90       	pop	r0
    4848:	0f 90       	pop	r0
    484a:	cf 91       	pop	r28
    484c:	df 91       	pop	r29
    484e:	08 95       	ret

00004850 <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
    4850:	df 93       	push	r29
    4852:	cf 93       	push	r28
    4854:	00 d0       	rcall	.+0      	; 0x4856 <DIO_enumTogglePortValue+0x6>
    4856:	00 d0       	rcall	.+0      	; 0x4858 <DIO_enumTogglePortValue+0x8>
    4858:	cd b7       	in	r28, 0x3d	; 61
    485a:	de b7       	in	r29, 0x3e	; 62
    485c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    485e:	81 e0       	ldi	r24, 0x01	; 1
    4860:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    4862:	8a 81       	ldd	r24, Y+2	; 0x02
    4864:	84 30       	cpi	r24, 0x04	; 4
    4866:	08 f0       	brcs	.+2      	; 0x486a <DIO_enumTogglePortValue+0x1a>
    4868:	3f c0       	rjmp	.+126    	; 0x48e8 <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    486a:	8a 81       	ldd	r24, Y+2	; 0x02
    486c:	28 2f       	mov	r18, r24
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	3c 83       	std	Y+4, r19	; 0x04
    4872:	2b 83       	std	Y+3, r18	; 0x03
    4874:	8b 81       	ldd	r24, Y+3	; 0x03
    4876:	9c 81       	ldd	r25, Y+4	; 0x04
    4878:	81 30       	cpi	r24, 0x01	; 1
    487a:	91 05       	cpc	r25, r1
    487c:	e9 f0       	breq	.+58     	; 0x48b8 <DIO_enumTogglePortValue+0x68>
    487e:	2b 81       	ldd	r18, Y+3	; 0x03
    4880:	3c 81       	ldd	r19, Y+4	; 0x04
    4882:	22 30       	cpi	r18, 0x02	; 2
    4884:	31 05       	cpc	r19, r1
    4886:	2c f4       	brge	.+10     	; 0x4892 <DIO_enumTogglePortValue+0x42>
    4888:	8b 81       	ldd	r24, Y+3	; 0x03
    488a:	9c 81       	ldd	r25, Y+4	; 0x04
    488c:	00 97       	sbiw	r24, 0x00	; 0
    488e:	61 f0       	breq	.+24     	; 0x48a8 <DIO_enumTogglePortValue+0x58>
    4890:	2c c0       	rjmp	.+88     	; 0x48ea <DIO_enumTogglePortValue+0x9a>
    4892:	2b 81       	ldd	r18, Y+3	; 0x03
    4894:	3c 81       	ldd	r19, Y+4	; 0x04
    4896:	22 30       	cpi	r18, 0x02	; 2
    4898:	31 05       	cpc	r19, r1
    489a:	b1 f0       	breq	.+44     	; 0x48c8 <DIO_enumTogglePortValue+0x78>
    489c:	8b 81       	ldd	r24, Y+3	; 0x03
    489e:	9c 81       	ldd	r25, Y+4	; 0x04
    48a0:	83 30       	cpi	r24, 0x03	; 3
    48a2:	91 05       	cpc	r25, r1
    48a4:	c9 f0       	breq	.+50     	; 0x48d8 <DIO_enumTogglePortValue+0x88>
    48a6:	21 c0       	rjmp	.+66     	; 0x48ea <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    48a8:	ab e3       	ldi	r26, 0x3B	; 59
    48aa:	b0 e0       	ldi	r27, 0x00	; 0
    48ac:	eb e3       	ldi	r30, 0x3B	; 59
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	80 81       	ld	r24, Z
    48b2:	80 95       	com	r24
    48b4:	8c 93       	st	X, r24
    48b6:	19 c0       	rjmp	.+50     	; 0x48ea <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    48b8:	a8 e3       	ldi	r26, 0x38	; 56
    48ba:	b0 e0       	ldi	r27, 0x00	; 0
    48bc:	e8 e3       	ldi	r30, 0x38	; 56
    48be:	f0 e0       	ldi	r31, 0x00	; 0
    48c0:	80 81       	ld	r24, Z
    48c2:	80 95       	com	r24
    48c4:	8c 93       	st	X, r24
    48c6:	11 c0       	rjmp	.+34     	; 0x48ea <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    48c8:	a5 e3       	ldi	r26, 0x35	; 53
    48ca:	b0 e0       	ldi	r27, 0x00	; 0
    48cc:	e5 e3       	ldi	r30, 0x35	; 53
    48ce:	f0 e0       	ldi	r31, 0x00	; 0
    48d0:	80 81       	ld	r24, Z
    48d2:	80 95       	com	r24
    48d4:	8c 93       	st	X, r24
    48d6:	09 c0       	rjmp	.+18     	; 0x48ea <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    48d8:	a2 e3       	ldi	r26, 0x32	; 50
    48da:	b0 e0       	ldi	r27, 0x00	; 0
    48dc:	e2 e3       	ldi	r30, 0x32	; 50
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	80 81       	ld	r24, Z
    48e2:	80 95       	com	r24
    48e4:	8c 93       	st	X, r24
    48e6:	01 c0       	rjmp	.+2      	; 0x48ea <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    48e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    48ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    48ec:	0f 90       	pop	r0
    48ee:	0f 90       	pop	r0
    48f0:	0f 90       	pop	r0
    48f2:	0f 90       	pop	r0
    48f4:	cf 91       	pop	r28
    48f6:	df 91       	pop	r29
    48f8:	08 95       	ret

000048fa <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    48fa:	df 93       	push	r29
    48fc:	cf 93       	push	r28
    48fe:	00 d0       	rcall	.+0      	; 0x4900 <DIO_enumGetPortValue+0x6>
    4900:	00 d0       	rcall	.+0      	; 0x4902 <DIO_enumGetPortValue+0x8>
    4902:	00 d0       	rcall	.+0      	; 0x4904 <DIO_enumGetPortValue+0xa>
    4904:	cd b7       	in	r28, 0x3d	; 61
    4906:	de b7       	in	r29, 0x3e	; 62
    4908:	8a 83       	std	Y+2, r24	; 0x02
    490a:	7c 83       	std	Y+4, r23	; 0x04
    490c:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    4912:	8a 81       	ldd	r24, Y+2	; 0x02
    4914:	84 30       	cpi	r24, 0x04	; 4
    4916:	e8 f5       	brcc	.+122    	; 0x4992 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
    4918:	8a 81       	ldd	r24, Y+2	; 0x02
    491a:	28 2f       	mov	r18, r24
    491c:	30 e0       	ldi	r19, 0x00	; 0
    491e:	3e 83       	std	Y+6, r19	; 0x06
    4920:	2d 83       	std	Y+5, r18	; 0x05
    4922:	8d 81       	ldd	r24, Y+5	; 0x05
    4924:	9e 81       	ldd	r25, Y+6	; 0x06
    4926:	81 30       	cpi	r24, 0x01	; 1
    4928:	91 05       	cpc	r25, r1
    492a:	e1 f0       	breq	.+56     	; 0x4964 <DIO_enumGetPortValue+0x6a>
    492c:	2d 81       	ldd	r18, Y+5	; 0x05
    492e:	3e 81       	ldd	r19, Y+6	; 0x06
    4930:	22 30       	cpi	r18, 0x02	; 2
    4932:	31 05       	cpc	r19, r1
    4934:	2c f4       	brge	.+10     	; 0x4940 <DIO_enumGetPortValue+0x46>
    4936:	8d 81       	ldd	r24, Y+5	; 0x05
    4938:	9e 81       	ldd	r25, Y+6	; 0x06
    493a:	00 97       	sbiw	r24, 0x00	; 0
    493c:	61 f0       	breq	.+24     	; 0x4956 <DIO_enumGetPortValue+0x5c>
    493e:	27 c0       	rjmp	.+78     	; 0x498e <DIO_enumGetPortValue+0x94>
    4940:	2d 81       	ldd	r18, Y+5	; 0x05
    4942:	3e 81       	ldd	r19, Y+6	; 0x06
    4944:	22 30       	cpi	r18, 0x02	; 2
    4946:	31 05       	cpc	r19, r1
    4948:	a1 f0       	breq	.+40     	; 0x4972 <DIO_enumGetPortValue+0x78>
    494a:	8d 81       	ldd	r24, Y+5	; 0x05
    494c:	9e 81       	ldd	r25, Y+6	; 0x06
    494e:	83 30       	cpi	r24, 0x03	; 3
    4950:	91 05       	cpc	r25, r1
    4952:	b1 f0       	breq	.+44     	; 0x4980 <DIO_enumGetPortValue+0x86>
    4954:	1c c0       	rjmp	.+56     	; 0x498e <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    4956:	e9 e3       	ldi	r30, 0x39	; 57
    4958:	f0 e0       	ldi	r31, 0x00	; 0
    495a:	80 81       	ld	r24, Z
    495c:	eb 81       	ldd	r30, Y+3	; 0x03
    495e:	fc 81       	ldd	r31, Y+4	; 0x04
    4960:	80 83       	st	Z, r24
    4962:	18 c0       	rjmp	.+48     	; 0x4994 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    4964:	e6 e3       	ldi	r30, 0x36	; 54
    4966:	f0 e0       	ldi	r31, 0x00	; 0
    4968:	80 81       	ld	r24, Z
    496a:	eb 81       	ldd	r30, Y+3	; 0x03
    496c:	fc 81       	ldd	r31, Y+4	; 0x04
    496e:	80 83       	st	Z, r24
    4970:	11 c0       	rjmp	.+34     	; 0x4994 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    4972:	e3 e3       	ldi	r30, 0x33	; 51
    4974:	f0 e0       	ldi	r31, 0x00	; 0
    4976:	80 81       	ld	r24, Z
    4978:	eb 81       	ldd	r30, Y+3	; 0x03
    497a:	fc 81       	ldd	r31, Y+4	; 0x04
    497c:	80 83       	st	Z, r24
    497e:	0a c0       	rjmp	.+20     	; 0x4994 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    4980:	e0 e3       	ldi	r30, 0x30	; 48
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	80 81       	ld	r24, Z
    4986:	eb 81       	ldd	r30, Y+3	; 0x03
    4988:	fc 81       	ldd	r31, Y+4	; 0x04
    498a:	80 83       	st	Z, r24
    498c:	03 c0       	rjmp	.+6      	; 0x4994 <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
    498e:	19 82       	std	Y+1, r1	; 0x01
    4990:	01 c0       	rjmp	.+2      	; 0x4994 <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    4992:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    4994:	89 81       	ldd	r24, Y+1	; 0x01
}
    4996:	26 96       	adiw	r28, 0x06	; 6
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	f8 94       	cli
    499c:	de bf       	out	0x3e, r29	; 62
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	cd bf       	out	0x3d, r28	; 61
    49a2:	cf 91       	pop	r28
    49a4:	df 91       	pop	r29
    49a6:	08 95       	ret

000049a8 <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    49a8:	df 93       	push	r29
    49aa:	cf 93       	push	r28
    49ac:	00 d0       	rcall	.+0      	; 0x49ae <DIO_voidWriteHighNibbles+0x6>
    49ae:	00 d0       	rcall	.+0      	; 0x49b0 <DIO_voidWriteHighNibbles+0x8>
    49b0:	0f 92       	push	r0
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
    49b6:	8a 83       	std	Y+2, r24	; 0x02
    49b8:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    49be:	8a 81       	ldd	r24, Y+2	; 0x02
    49c0:	84 30       	cpi	r24, 0x04	; 4
    49c2:	08 f0       	brcs	.+2      	; 0x49c6 <DIO_voidWriteHighNibbles+0x1e>
    49c4:	63 c0       	rjmp	.+198    	; 0x4a8c <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    49c6:	8b 81       	ldd	r24, Y+3	; 0x03
    49c8:	82 95       	swap	r24
    49ca:	80 7f       	andi	r24, 0xF0	; 240
    49cc:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    49ce:	8a 81       	ldd	r24, Y+2	; 0x02
    49d0:	28 2f       	mov	r18, r24
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	3d 83       	std	Y+5, r19	; 0x05
    49d6:	2c 83       	std	Y+4, r18	; 0x04
    49d8:	8c 81       	ldd	r24, Y+4	; 0x04
    49da:	9d 81       	ldd	r25, Y+5	; 0x05
    49dc:	81 30       	cpi	r24, 0x01	; 1
    49de:	91 05       	cpc	r25, r1
    49e0:	29 f1       	breq	.+74     	; 0x4a2c <DIO_voidWriteHighNibbles+0x84>
    49e2:	2c 81       	ldd	r18, Y+4	; 0x04
    49e4:	3d 81       	ldd	r19, Y+5	; 0x05
    49e6:	22 30       	cpi	r18, 0x02	; 2
    49e8:	31 05       	cpc	r19, r1
    49ea:	2c f4       	brge	.+10     	; 0x49f6 <DIO_voidWriteHighNibbles+0x4e>
    49ec:	8c 81       	ldd	r24, Y+4	; 0x04
    49ee:	9d 81       	ldd	r25, Y+5	; 0x05
    49f0:	00 97       	sbiw	r24, 0x00	; 0
    49f2:	61 f0       	breq	.+24     	; 0x4a0c <DIO_voidWriteHighNibbles+0x64>
    49f4:	4c c0       	rjmp	.+152    	; 0x4a8e <DIO_voidWriteHighNibbles+0xe6>
    49f6:	2c 81       	ldd	r18, Y+4	; 0x04
    49f8:	3d 81       	ldd	r19, Y+5	; 0x05
    49fa:	22 30       	cpi	r18, 0x02	; 2
    49fc:	31 05       	cpc	r19, r1
    49fe:	31 f1       	breq	.+76     	; 0x4a4c <DIO_voidWriteHighNibbles+0xa4>
    4a00:	8c 81       	ldd	r24, Y+4	; 0x04
    4a02:	9d 81       	ldd	r25, Y+5	; 0x05
    4a04:	83 30       	cpi	r24, 0x03	; 3
    4a06:	91 05       	cpc	r25, r1
    4a08:	89 f1       	breq	.+98     	; 0x4a6c <DIO_voidWriteHighNibbles+0xc4>
    4a0a:	41 c0       	rjmp	.+130    	; 0x4a8e <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    4a0c:	ab e3       	ldi	r26, 0x3B	; 59
    4a0e:	b0 e0       	ldi	r27, 0x00	; 0
    4a10:	eb e3       	ldi	r30, 0x3B	; 59
    4a12:	f0 e0       	ldi	r31, 0x00	; 0
    4a14:	80 81       	ld	r24, Z
    4a16:	8f 70       	andi	r24, 0x0F	; 15
    4a18:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    4a1a:	ab e3       	ldi	r26, 0x3B	; 59
    4a1c:	b0 e0       	ldi	r27, 0x00	; 0
    4a1e:	eb e3       	ldi	r30, 0x3B	; 59
    4a20:	f0 e0       	ldi	r31, 0x00	; 0
    4a22:	90 81       	ld	r25, Z
    4a24:	8b 81       	ldd	r24, Y+3	; 0x03
    4a26:	89 2b       	or	r24, r25
    4a28:	8c 93       	st	X, r24
    4a2a:	31 c0       	rjmp	.+98     	; 0x4a8e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    4a2c:	a8 e3       	ldi	r26, 0x38	; 56
    4a2e:	b0 e0       	ldi	r27, 0x00	; 0
    4a30:	e8 e3       	ldi	r30, 0x38	; 56
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	80 81       	ld	r24, Z
    4a36:	8f 70       	andi	r24, 0x0F	; 15
    4a38:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    4a3a:	a8 e3       	ldi	r26, 0x38	; 56
    4a3c:	b0 e0       	ldi	r27, 0x00	; 0
    4a3e:	e8 e3       	ldi	r30, 0x38	; 56
    4a40:	f0 e0       	ldi	r31, 0x00	; 0
    4a42:	90 81       	ld	r25, Z
    4a44:	8b 81       	ldd	r24, Y+3	; 0x03
    4a46:	89 2b       	or	r24, r25
    4a48:	8c 93       	st	X, r24
    4a4a:	21 c0       	rjmp	.+66     	; 0x4a8e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    4a4c:	a5 e3       	ldi	r26, 0x35	; 53
    4a4e:	b0 e0       	ldi	r27, 0x00	; 0
    4a50:	e5 e3       	ldi	r30, 0x35	; 53
    4a52:	f0 e0       	ldi	r31, 0x00	; 0
    4a54:	80 81       	ld	r24, Z
    4a56:	8f 70       	andi	r24, 0x0F	; 15
    4a58:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    4a5a:	a5 e3       	ldi	r26, 0x35	; 53
    4a5c:	b0 e0       	ldi	r27, 0x00	; 0
    4a5e:	e5 e3       	ldi	r30, 0x35	; 53
    4a60:	f0 e0       	ldi	r31, 0x00	; 0
    4a62:	90 81       	ld	r25, Z
    4a64:	8b 81       	ldd	r24, Y+3	; 0x03
    4a66:	89 2b       	or	r24, r25
    4a68:	8c 93       	st	X, r24
    4a6a:	11 c0       	rjmp	.+34     	; 0x4a8e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    4a6c:	a2 e3       	ldi	r26, 0x32	; 50
    4a6e:	b0 e0       	ldi	r27, 0x00	; 0
    4a70:	e2 e3       	ldi	r30, 0x32	; 50
    4a72:	f0 e0       	ldi	r31, 0x00	; 0
    4a74:	80 81       	ld	r24, Z
    4a76:	8f 70       	andi	r24, 0x0F	; 15
    4a78:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    4a7a:	a2 e3       	ldi	r26, 0x32	; 50
    4a7c:	b0 e0       	ldi	r27, 0x00	; 0
    4a7e:	e2 e3       	ldi	r30, 0x32	; 50
    4a80:	f0 e0       	ldi	r31, 0x00	; 0
    4a82:	90 81       	ld	r25, Z
    4a84:	8b 81       	ldd	r24, Y+3	; 0x03
    4a86:	89 2b       	or	r24, r25
    4a88:	8c 93       	st	X, r24
    4a8a:	01 c0       	rjmp	.+2      	; 0x4a8e <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    4a8c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4a90:	0f 90       	pop	r0
    4a92:	0f 90       	pop	r0
    4a94:	0f 90       	pop	r0
    4a96:	0f 90       	pop	r0
    4a98:	0f 90       	pop	r0
    4a9a:	cf 91       	pop	r28
    4a9c:	df 91       	pop	r29
    4a9e:	08 95       	ret

00004aa0 <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    4aa0:	df 93       	push	r29
    4aa2:	cf 93       	push	r28
    4aa4:	00 d0       	rcall	.+0      	; 0x4aa6 <DIO_voidWriteLowNibbles+0x6>
    4aa6:	00 d0       	rcall	.+0      	; 0x4aa8 <DIO_voidWriteLowNibbles+0x8>
    4aa8:	0f 92       	push	r0
    4aaa:	cd b7       	in	r28, 0x3d	; 61
    4aac:	de b7       	in	r29, 0x3e	; 62
    4aae:	8a 83       	std	Y+2, r24	; 0x02
    4ab0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
    4ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab8:	84 30       	cpi	r24, 0x04	; 4
    4aba:	08 f0       	brcs	.+2      	; 0x4abe <DIO_voidWriteLowNibbles+0x1e>
    4abc:	62 c0       	rjmp	.+196    	; 0x4b82 <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
    4abe:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac0:	8f 70       	andi	r24, 0x0F	; 15
    4ac2:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    4ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac6:	28 2f       	mov	r18, r24
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	3d 83       	std	Y+5, r19	; 0x05
    4acc:	2c 83       	std	Y+4, r18	; 0x04
    4ace:	8c 81       	ldd	r24, Y+4	; 0x04
    4ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    4ad2:	81 30       	cpi	r24, 0x01	; 1
    4ad4:	91 05       	cpc	r25, r1
    4ad6:	29 f1       	breq	.+74     	; 0x4b22 <DIO_voidWriteLowNibbles+0x82>
    4ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    4ada:	3d 81       	ldd	r19, Y+5	; 0x05
    4adc:	22 30       	cpi	r18, 0x02	; 2
    4ade:	31 05       	cpc	r19, r1
    4ae0:	2c f4       	brge	.+10     	; 0x4aec <DIO_voidWriteLowNibbles+0x4c>
    4ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ae6:	00 97       	sbiw	r24, 0x00	; 0
    4ae8:	61 f0       	breq	.+24     	; 0x4b02 <DIO_voidWriteLowNibbles+0x62>
    4aea:	4c c0       	rjmp	.+152    	; 0x4b84 <DIO_voidWriteLowNibbles+0xe4>
    4aec:	2c 81       	ldd	r18, Y+4	; 0x04
    4aee:	3d 81       	ldd	r19, Y+5	; 0x05
    4af0:	22 30       	cpi	r18, 0x02	; 2
    4af2:	31 05       	cpc	r19, r1
    4af4:	31 f1       	breq	.+76     	; 0x4b42 <DIO_voidWriteLowNibbles+0xa2>
    4af6:	8c 81       	ldd	r24, Y+4	; 0x04
    4af8:	9d 81       	ldd	r25, Y+5	; 0x05
    4afa:	83 30       	cpi	r24, 0x03	; 3
    4afc:	91 05       	cpc	r25, r1
    4afe:	89 f1       	breq	.+98     	; 0x4b62 <DIO_voidWriteLowNibbles+0xc2>
    4b00:	41 c0       	rjmp	.+130    	; 0x4b84 <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    4b02:	ab e3       	ldi	r26, 0x3B	; 59
    4b04:	b0 e0       	ldi	r27, 0x00	; 0
    4b06:	eb e3       	ldi	r30, 0x3B	; 59
    4b08:	f0 e0       	ldi	r31, 0x00	; 0
    4b0a:	80 81       	ld	r24, Z
    4b0c:	80 7f       	andi	r24, 0xF0	; 240
    4b0e:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
    4b10:	ab e3       	ldi	r26, 0x3B	; 59
    4b12:	b0 e0       	ldi	r27, 0x00	; 0
    4b14:	eb e3       	ldi	r30, 0x3B	; 59
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	90 81       	ld	r25, Z
    4b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1c:	89 2b       	or	r24, r25
    4b1e:	8c 93       	st	X, r24
    4b20:	31 c0       	rjmp	.+98     	; 0x4b84 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    4b22:	a8 e3       	ldi	r26, 0x38	; 56
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	e8 e3       	ldi	r30, 0x38	; 56
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	80 81       	ld	r24, Z
    4b2c:	80 7f       	andi	r24, 0xF0	; 240
    4b2e:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
    4b30:	a8 e3       	ldi	r26, 0x38	; 56
    4b32:	b0 e0       	ldi	r27, 0x00	; 0
    4b34:	e8 e3       	ldi	r30, 0x38	; 56
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	90 81       	ld	r25, Z
    4b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3c:	89 2b       	or	r24, r25
    4b3e:	8c 93       	st	X, r24
    4b40:	21 c0       	rjmp	.+66     	; 0x4b84 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    4b42:	a5 e3       	ldi	r26, 0x35	; 53
    4b44:	b0 e0       	ldi	r27, 0x00	; 0
    4b46:	e5 e3       	ldi	r30, 0x35	; 53
    4b48:	f0 e0       	ldi	r31, 0x00	; 0
    4b4a:	80 81       	ld	r24, Z
    4b4c:	80 7f       	andi	r24, 0xF0	; 240
    4b4e:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
    4b50:	a5 e3       	ldi	r26, 0x35	; 53
    4b52:	b0 e0       	ldi	r27, 0x00	; 0
    4b54:	e5 e3       	ldi	r30, 0x35	; 53
    4b56:	f0 e0       	ldi	r31, 0x00	; 0
    4b58:	90 81       	ld	r25, Z
    4b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b5c:	89 2b       	or	r24, r25
    4b5e:	8c 93       	st	X, r24
    4b60:	11 c0       	rjmp	.+34     	; 0x4b84 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    4b62:	a2 e3       	ldi	r26, 0x32	; 50
    4b64:	b0 e0       	ldi	r27, 0x00	; 0
    4b66:	e2 e3       	ldi	r30, 0x32	; 50
    4b68:	f0 e0       	ldi	r31, 0x00	; 0
    4b6a:	80 81       	ld	r24, Z
    4b6c:	80 7f       	andi	r24, 0xF0	; 240
    4b6e:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
    4b70:	a2 e3       	ldi	r26, 0x32	; 50
    4b72:	b0 e0       	ldi	r27, 0x00	; 0
    4b74:	e2 e3       	ldi	r30, 0x32	; 50
    4b76:	f0 e0       	ldi	r31, 0x00	; 0
    4b78:	90 81       	ld	r25, Z
    4b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b7c:	89 2b       	or	r24, r25
    4b7e:	8c 93       	st	X, r24
    4b80:	01 c0       	rjmp	.+2      	; 0x4b84 <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
    4b82:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    4b84:	89 81       	ldd	r24, Y+1	; 0x01

}
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	0f 90       	pop	r0
    4b90:	cf 91       	pop	r28
    4b92:	df 91       	pop	r29
    4b94:	08 95       	ret

00004b96 <GIE_VoidEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
*/
void GIE_VoidEnable (void)
{
    4b96:	df 93       	push	r29
    4b98:	cf 93       	push	r28
    4b9a:	cd b7       	in	r28, 0x3d	; 61
    4b9c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (SREG , SREG_I) ;
    4b9e:	af e5       	ldi	r26, 0x5F	; 95
    4ba0:	b0 e0       	ldi	r27, 0x00	; 0
    4ba2:	ef e5       	ldi	r30, 0x5F	; 95
    4ba4:	f0 e0       	ldi	r31, 0x00	; 0
    4ba6:	80 81       	ld	r24, Z
    4ba8:	80 68       	ori	r24, 0x80	; 128
    4baa:	8c 93       	st	X, r24
}
    4bac:	cf 91       	pop	r28
    4bae:	df 91       	pop	r29
    4bb0:	08 95       	ret

00004bb2 <GIE_VoidDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
*/
void GIE_VoidDisable (void)
{
    4bb2:	df 93       	push	r29
    4bb4:	cf 93       	push	r28
    4bb6:	cd b7       	in	r28, 0x3d	; 61
    4bb8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT (SREG , SREG_I) ;
    4bba:	af e5       	ldi	r26, 0x5F	; 95
    4bbc:	b0 e0       	ldi	r27, 0x00	; 0
    4bbe:	ef e5       	ldi	r30, 0x5F	; 95
    4bc0:	f0 e0       	ldi	r31, 0x00	; 0
    4bc2:	80 81       	ld	r24, Z
    4bc4:	8f 77       	andi	r24, 0x7F	; 127
    4bc6:	8c 93       	st	X, r24
}
    4bc8:	cf 91       	pop	r28
    4bca:	df 91       	pop	r29
    4bcc:	08 95       	ret

00004bce <PIR_init>:
PIR_ConfigType Config_Ptr_PIR = {DIO_PORTC,DIO_PIN2 };
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PIR_init(const PIR_ConfigType *Config_Ptr_PIR) {
    4bce:	df 93       	push	r29
    4bd0:	cf 93       	push	r28
    4bd2:	00 d0       	rcall	.+0      	; 0x4bd4 <PIR_init+0x6>
    4bd4:	cd b7       	in	r28, 0x3d	; 61
    4bd6:	de b7       	in	r29, 0x3e	; 62
    4bd8:	9a 83       	std	Y+2, r25	; 0x02
    4bda:	89 83       	std	Y+1, r24	; 0x01
	/* Configure PIR sensor pin as input */
	DIO_enumSetPinDirection(Config_Ptr_PIR->port, Config_Ptr_PIR->pin,DIO_PIN_OUTPUT);
    4bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    4bde:	fa 81       	ldd	r31, Y+2	; 0x02
    4be0:	80 81       	ld	r24, Z
    4be2:	e9 81       	ldd	r30, Y+1	; 0x01
    4be4:	fa 81       	ldd	r31, Y+2	; 0x02
    4be6:	91 81       	ldd	r25, Z+1	; 0x01
    4be8:	69 2f       	mov	r22, r25
    4bea:	41 e0       	ldi	r20, 0x01	; 1
    4bec:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <DIO_enumSetPinDirection>
}
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	cf 91       	pop	r28
    4bf6:	df 91       	pop	r29
    4bf8:	08 95       	ret

00004bfa <PIR_getState>:

u8 PIR_getState(const PIR_ConfigType *Config_Ptr_PIR) {
    4bfa:	df 93       	push	r29
    4bfc:	cf 93       	push	r28
    4bfe:	00 d0       	rcall	.+0      	; 0x4c00 <PIR_getState+0x6>
    4c00:	0f 92       	push	r0
    4c02:	cd b7       	in	r28, 0x3d	; 61
    4c04:	de b7       	in	r29, 0x3e	; 62
    4c06:	9b 83       	std	Y+3, r25	; 0x03
    4c08:	8a 83       	std	Y+2, r24	; 0x02
	/* Return the PIR sensor state (HIGH if motion detected, LOW otherwise) */
	u8 k;
	DIO_enumGetPinValue(Config_Ptr_PIR->port,Config_Ptr_PIR->pin,&k);
    4c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    4c0c:	fb 81       	ldd	r31, Y+3	; 0x03
    4c0e:	80 81       	ld	r24, Z
    4c10:	ea 81       	ldd	r30, Y+2	; 0x02
    4c12:	fb 81       	ldd	r31, Y+3	; 0x03
    4c14:	91 81       	ldd	r25, Z+1	; 0x01
    4c16:	69 2f       	mov	r22, r25
    4c18:	9e 01       	movw	r18, r28
    4c1a:	2f 5f       	subi	r18, 0xFF	; 255
    4c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c1e:	a9 01       	movw	r20, r18
    4c20:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <DIO_enumGetPinValue>
	return k;
    4c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c26:	0f 90       	pop	r0
    4c28:	0f 90       	pop	r0
    4c2a:	0f 90       	pop	r0
    4c2c:	cf 91       	pop	r28
    4c2e:	df 91       	pop	r29
    4c30:	08 95       	ret

00004c32 <PWM_Timer0_Start>:
#include "PWM.h"

#include <avr/io.h>
#include "DIO_interface.h"

void PWM_Timer0_Start(u8 duty_cycle) {
    4c32:	df 93       	push	r29
    4c34:	cf 93       	push	r28
    4c36:	0f 92       	push	r0
    4c38:	cd b7       	in	r28, 0x3d	; 61
    4c3a:	de b7       	in	r29, 0x3e	; 62
    4c3c:	89 83       	std	Y+1, r24	; 0x01

	DDRB |= (1 << PB3);  /* Set PB3 (OC0) as output for PWM */
    4c3e:	a7 e3       	ldi	r26, 0x37	; 55
    4c40:	b0 e0       	ldi	r27, 0x00	; 0
    4c42:	e7 e3       	ldi	r30, 0x37	; 55
    4c44:	f0 e0       	ldi	r31, 0x00	; 0
    4c46:	80 81       	ld	r24, Z
    4c48:	88 60       	ori	r24, 0x08	; 8
    4c4a:	8c 93       	st	X, r24
		TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01); /* Set Fast PWM mode and clear on compare match */
    4c4c:	e3 e5       	ldi	r30, 0x53	; 83
    4c4e:	f0 e0       	ldi	r31, 0x00	; 0
    4c50:	88 e6       	ldi	r24, 0x68	; 104
    4c52:	80 83       	st	Z, r24
		TCCR0 = ((TCCR0 & PWM_RESET_PRESCALER_BITS) | PWM_F_CPU_64); /* Start Timer0 with prescaler of 1024 */
    4c54:	a3 e5       	ldi	r26, 0x53	; 83
    4c56:	b0 e0       	ldi	r27, 0x00	; 0
    4c58:	e3 e5       	ldi	r30, 0x53	; 83
    4c5a:	f0 e0       	ldi	r31, 0x00	; 0
    4c5c:	80 81       	ld	r24, Z
    4c5e:	88 7f       	andi	r24, 0xF8	; 248
    4c60:	83 60       	ori	r24, 0x03	; 3
    4c62:	8c 93       	st	X, r24
		OCR0 = (u8) (((u16) duty_cycle * 255) / 100); /* Set the duty cycle when the given is percentage (0/100)% */
    4c64:	ec e5       	ldi	r30, 0x5C	; 92
    4c66:	f0 e0       	ldi	r31, 0x00	; 0
    4c68:	89 81       	ldd	r24, Y+1	; 0x01
    4c6a:	48 2f       	mov	r20, r24
    4c6c:	50 e0       	ldi	r21, 0x00	; 0
    4c6e:	ca 01       	movw	r24, r20
    4c70:	9c 01       	movw	r18, r24
    4c72:	22 0f       	add	r18, r18
    4c74:	33 1f       	adc	r19, r19
    4c76:	c9 01       	movw	r24, r18
    4c78:	96 95       	lsr	r25
    4c7a:	98 2f       	mov	r25, r24
    4c7c:	88 27       	eor	r24, r24
    4c7e:	97 95       	ror	r25
    4c80:	87 95       	ror	r24
    4c82:	82 1b       	sub	r24, r18
    4c84:	93 0b       	sbc	r25, r19
    4c86:	84 0f       	add	r24, r20
    4c88:	95 1f       	adc	r25, r21
    4c8a:	24 e6       	ldi	r18, 0x64	; 100
    4c8c:	30 e0       	ldi	r19, 0x00	; 0
    4c8e:	b9 01       	movw	r22, r18
    4c90:	0e 94 9f 31 	call	0x633e	; 0x633e <__udivmodhi4>
    4c94:	cb 01       	movw	r24, r22
    4c96:	80 83       	st	Z, r24
	}
    4c98:	0f 90       	pop	r0
    4c9a:	cf 91       	pop	r28
    4c9c:	df 91       	pop	r29
    4c9e:	08 95       	ret

00004ca0 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
    4ca0:	df 93       	push	r29
    4ca2:	cf 93       	push	r28
    4ca4:	cd b7       	in	r28, 0x3d	; 61
    4ca6:	de b7       	in	r29, 0x3e	; 62
			OCR0 = TIMER0_CTC_VAL ;

		#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    4ca8:	a3 e5       	ldi	r26, 0x53	; 83
    4caa:	b0 e0       	ldi	r27, 0x00	; 0
    4cac:	e3 e5       	ldi	r30, 0x53	; 83
    4cae:	f0 e0       	ldi	r31, 0x00	; 0
    4cb0:	80 81       	ld	r24, Z
    4cb2:	8f 7b       	andi	r24, 0xBF	; 191
    4cb4:	8c 93       	st	X, r24
			SET_BIT(TCCR0 , TCCR0_WGM01) ;
    4cb6:	a3 e5       	ldi	r26, 0x53	; 83
    4cb8:	b0 e0       	ldi	r27, 0x00	; 0
    4cba:	e3 e5       	ldi	r30, 0x53	; 83
    4cbc:	f0 e0       	ldi	r31, 0x00	; 0
    4cbe:	80 81       	ld	r24, Z
    4cc0:	88 60       	ori	r24, 0x08	; 8
    4cc2:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR0 = TIMER0_CTC_VAL ;
    4cc4:	ec e5       	ldi	r30, 0x5C	; 92
    4cc6:	f0 e0       	ldi	r31, 0x00	; 0
    4cc8:	85 e8       	ldi	r24, 0x85	; 133
    4cca:	80 83       	st	Z, r24

			/*Timer0 Compare Match Interrupt Enable*/
			#if TIMER0_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE0) ;
			#elif TIMER0_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE0) ;
    4ccc:	a9 e5       	ldi	r26, 0x59	; 89
    4cce:	b0 e0       	ldi	r27, 0x00	; 0
    4cd0:	e9 e5       	ldi	r30, 0x59	; 89
    4cd2:	f0 e0       	ldi	r31, 0x00	; 0
    4cd4:	80 81       	ld	r24, Z
    4cd6:	82 60       	ori	r24, 0x02	; 2
    4cd8:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    4cda:	a3 e5       	ldi	r26, 0x53	; 83
    4cdc:	b0 e0       	ldi	r27, 0x00	; 0
    4cde:	e3 e5       	ldi	r30, 0x53	; 83
    4ce0:	f0 e0       	ldi	r31, 0x00	; 0
    4ce2:	80 81       	ld	r24, Z
    4ce4:	88 7f       	andi	r24, 0xF8	; 248
    4ce6:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    4ce8:	a3 e5       	ldi	r26, 0x53	; 83
    4cea:	b0 e0       	ldi	r27, 0x00	; 0
    4cec:	e3 e5       	ldi	r30, 0x53	; 83
    4cee:	f0 e0       	ldi	r31, 0x00	; 0
    4cf0:	80 81       	ld	r24, Z
    4cf2:	85 60       	ori	r24, 0x05	; 5
    4cf4:	8c 93       	st	X, r24
}
    4cf6:	cf 91       	pop	r28
    4cf8:	df 91       	pop	r29
    4cfa:	08 95       	ret

00004cfc <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    4cfc:	df 93       	push	r29
    4cfe:	cf 93       	push	r28
    4d00:	cd b7       	in	r28, 0x3d	; 61
    4d02:	de b7       	in	r29, 0x3e	; 62
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
				CLR_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_CTC_OCR1A_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    4d04:	af e4       	ldi	r26, 0x4F	; 79
    4d06:	b0 e0       	ldi	r27, 0x00	; 0
    4d08:	ef e4       	ldi	r30, 0x4F	; 79
    4d0a:	f0 e0       	ldi	r31, 0x00	; 0
    4d0c:	80 81       	ld	r24, Z
    4d0e:	8e 7f       	andi	r24, 0xFE	; 254
    4d10:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A,TCCR1A_WGM11);
    4d12:	af e4       	ldi	r26, 0x4F	; 79
    4d14:	b0 e0       	ldi	r27, 0x00	; 0
    4d16:	ef e4       	ldi	r30, 0x4F	; 79
    4d18:	f0 e0       	ldi	r31, 0x00	; 0
    4d1a:	80 81       	ld	r24, Z
    4d1c:	8d 7f       	andi	r24, 0xFD	; 253
    4d1e:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    4d20:	ae e4       	ldi	r26, 0x4E	; 78
    4d22:	b0 e0       	ldi	r27, 0x00	; 0
    4d24:	ee e4       	ldi	r30, 0x4E	; 78
    4d26:	f0 e0       	ldi	r31, 0x00	; 0
    4d28:	80 81       	ld	r24, Z
    4d2a:	88 60       	ori	r24, 0x08	; 8
    4d2c:	8c 93       	st	X, r24
				CLR_BIT(TCCR1B,TCCR1B_WGM13);
    4d2e:	ae e4       	ldi	r26, 0x4E	; 78
    4d30:	b0 e0       	ldi	r27, 0x00	; 0
    4d32:	ee e4       	ldi	r30, 0x4E	; 78
    4d34:	f0 e0       	ldi	r31, 0x00	; 0
    4d36:	80 81       	ld	r24, Z
    4d38:	8f 7e       	andi	r24, 0xEF	; 239
    4d3a:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    4d3c:	ea e4       	ldi	r30, 0x4A	; 74
    4d3e:	f0 e0       	ldi	r31, 0x00	; 0
    4d40:	85 e8       	ldi	r24, 0x85	; 133
    4d42:	9e e1       	ldi	r25, 0x1E	; 30
    4d44:	91 83       	std	Z+1, r25	; 0x01
    4d46:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    4d48:	e8 e4       	ldi	r30, 0x48	; 72
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	11 82       	std	Z+1, r1	; 0x01
    4d4e:	10 82       	st	Z, r1
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_OC_TOGGEL
				SET_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_OC_LOW
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    4d50:	af e4       	ldi	r26, 0x4F	; 79
    4d52:	b0 e0       	ldi	r27, 0x00	; 0
    4d54:	ef e4       	ldi	r30, 0x4F	; 79
    4d56:	f0 e0       	ldi	r31, 0x00	; 0
    4d58:	80 81       	ld	r24, Z
    4d5a:	8f 7b       	andi	r24, 0xBF	; 191
    4d5c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    4d5e:	af e4       	ldi	r26, 0x4F	; 79
    4d60:	b0 e0       	ldi	r27, 0x00	; 0
    4d62:	ef e4       	ldi	r30, 0x4F	; 79
    4d64:	f0 e0       	ldi	r31, 0x00	; 0
    4d66:	80 81       	ld	r24, Z
    4d68:	80 68       	ori	r24, 0x80	; 128
    4d6a:	8c 93       	st	X, r24
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_OC_TOGGEL
				SET_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_OC_LOW
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    4d6c:	af e4       	ldi	r26, 0x4F	; 79
    4d6e:	b0 e0       	ldi	r27, 0x00	; 0
    4d70:	ef e4       	ldi	r30, 0x4F	; 79
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	80 81       	ld	r24, Z
    4d76:	8f 7e       	andi	r24, 0xEF	; 239
    4d78:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    4d7a:	af e4       	ldi	r26, 0x4F	; 79
    4d7c:	b0 e0       	ldi	r27, 0x00	; 0
    4d7e:	ef e4       	ldi	r30, 0x4F	; 79
    4d80:	f0 e0       	ldi	r31, 0x00	; 0
    4d82:	80 81       	ld	r24, Z
    4d84:	80 62       	ori	r24, 0x20	; 32
    4d86:	8c 93       	st	X, r24

			/*Timer1 CTC Interrupt Enable*/
			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
			#elif TIMER1_CTCA_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE1A) ;
    4d88:	a9 e5       	ldi	r26, 0x59	; 89
    4d8a:	b0 e0       	ldi	r27, 0x00	; 0
    4d8c:	e9 e5       	ldi	r30, 0x59	; 89
    4d8e:	f0 e0       	ldi	r31, 0x00	; 0
    4d90:	80 81       	ld	r24, Z
    4d92:	80 61       	ori	r24, 0x10	; 16
    4d94:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    4d96:	a9 e5       	ldi	r26, 0x59	; 89
    4d98:	b0 e0       	ldi	r27, 0x00	; 0
    4d9a:	e9 e5       	ldi	r30, 0x59	; 89
    4d9c:	f0 e0       	ldi	r31, 0x00	; 0
    4d9e:	80 81       	ld	r24, Z
    4da0:	87 7f       	andi	r24, 0xF7	; 247
    4da2:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    4da4:	ae e4       	ldi	r26, 0x4E	; 78
    4da6:	b0 e0       	ldi	r27, 0x00	; 0
    4da8:	ee e4       	ldi	r30, 0x4E	; 78
    4daa:	f0 e0       	ldi	r31, 0x00	; 0
    4dac:	80 81       	ld	r24, Z
    4dae:	88 7f       	andi	r24, 0xF8	; 248
    4db0:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    4db2:	ae e4       	ldi	r26, 0x4E	; 78
    4db4:	b0 e0       	ldi	r27, 0x00	; 0
    4db6:	ee e4       	ldi	r30, 0x4E	; 78
    4db8:	f0 e0       	ldi	r31, 0x00	; 0
    4dba:	80 81       	ld	r24, Z
    4dbc:	85 60       	ori	r24, 0x05	; 5
    4dbe:	8c 93       	st	X, r24


}
    4dc0:	cf 91       	pop	r28
    4dc2:	df 91       	pop	r29
    4dc4:	08 95       	ret

00004dc6 <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    4dc6:	df 93       	push	r29
    4dc8:	cf 93       	push	r28
    4dca:	cd b7       	in	r28, 0x3d	; 61
    4dcc:	de b7       	in	r29, 0x3e	; 62
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    4dce:	a5 e4       	ldi	r26, 0x45	; 69
    4dd0:	b0 e0       	ldi	r27, 0x00	; 0
    4dd2:	e5 e4       	ldi	r30, 0x45	; 69
    4dd4:	f0 e0       	ldi	r31, 0x00	; 0
    4dd6:	80 81       	ld	r24, Z
    4dd8:	8f 7b       	andi	r24, 0xBF	; 191
    4dda:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    4ddc:	a5 e4       	ldi	r26, 0x45	; 69
    4dde:	b0 e0       	ldi	r27, 0x00	; 0
    4de0:	e5 e4       	ldi	r30, 0x45	; 69
    4de2:	f0 e0       	ldi	r31, 0x00	; 0
    4de4:	80 81       	ld	r24, Z
    4de6:	88 60       	ori	r24, 0x08	; 8
    4de8:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    4dea:	e3 e4       	ldi	r30, 0x43	; 67
    4dec:	f0 e0       	ldi	r31, 0x00	; 0
    4dee:	85 e8       	ldi	r24, 0x85	; 133
    4df0:	80 83       	st	Z, r24

			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
    4df2:	a9 e5       	ldi	r26, 0x59	; 89
    4df4:	b0 e0       	ldi	r27, 0x00	; 0
    4df6:	e9 e5       	ldi	r30, 0x59	; 89
    4df8:	f0 e0       	ldi	r31, 0x00	; 0
    4dfa:	80 81       	ld	r24, Z
    4dfc:	80 68       	ori	r24, 0x80	; 128
    4dfe:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    4e00:	a5 e4       	ldi	r26, 0x45	; 69
    4e02:	b0 e0       	ldi	r27, 0x00	; 0
    4e04:	e5 e4       	ldi	r30, 0x45	; 69
    4e06:	f0 e0       	ldi	r31, 0x00	; 0
    4e08:	80 81       	ld	r24, Z
    4e0a:	88 7f       	andi	r24, 0xF8	; 248
    4e0c:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    4e0e:	a5 e4       	ldi	r26, 0x45	; 69
    4e10:	b0 e0       	ldi	r27, 0x00	; 0
    4e12:	e5 e4       	ldi	r30, 0x45	; 69
    4e14:	f0 e0       	ldi	r31, 0x00	; 0
    4e16:	80 81       	ld	r24, Z
    4e18:	85 60       	ori	r24, 0x05	; 5
    4e1a:	8c 93       	st	X, r24
}
    4e1c:	cf 91       	pop	r28
    4e1e:	df 91       	pop	r29
    4e20:	08 95       	ret

00004e22 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    4e22:	df 93       	push	r29
    4e24:	cf 93       	push	r28
    4e26:	0f 92       	push	r0
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    4e2e:	e2 e5       	ldi	r30, 0x52	; 82
    4e30:	f0 e0       	ldi	r31, 0x00	; 0
    4e32:	89 81       	ldd	r24, Y+1	; 0x01
    4e34:	80 83       	st	Z, r24
}
    4e36:	0f 90       	pop	r0
    4e38:	cf 91       	pop	r28
    4e3a:	df 91       	pop	r29
    4e3c:	08 95       	ret

00004e3e <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    4e3e:	df 93       	push	r29
    4e40:	cf 93       	push	r28
    4e42:	00 d0       	rcall	.+0      	; 0x4e44 <TIMER1_voidSetPreload+0x6>
    4e44:	cd b7       	in	r28, 0x3d	; 61
    4e46:	de b7       	in	r29, 0x3e	; 62
    4e48:	9a 83       	std	Y+2, r25	; 0x02
    4e4a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    4e4c:	ec e4       	ldi	r30, 0x4C	; 76
    4e4e:	f0 e0       	ldi	r31, 0x00	; 0
    4e50:	89 81       	ldd	r24, Y+1	; 0x01
    4e52:	9a 81       	ldd	r25, Y+2	; 0x02
    4e54:	91 83       	std	Z+1, r25	; 0x01
    4e56:	80 83       	st	Z, r24
}
    4e58:	0f 90       	pop	r0
    4e5a:	0f 90       	pop	r0
    4e5c:	cf 91       	pop	r28
    4e5e:	df 91       	pop	r29
    4e60:	08 95       	ret

00004e62 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
    4e62:	df 93       	push	r29
    4e64:	cf 93       	push	r28
    4e66:	0f 92       	push	r0
    4e68:	cd b7       	in	r28, 0x3d	; 61
    4e6a:	de b7       	in	r29, 0x3e	; 62
    4e6c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    4e6e:	e4 e4       	ldi	r30, 0x44	; 68
    4e70:	f0 e0       	ldi	r31, 0x00	; 0
    4e72:	89 81       	ldd	r24, Y+1	; 0x01
    4e74:	80 83       	st	Z, r24
}
    4e76:	0f 90       	pop	r0
    4e78:	cf 91       	pop	r28
    4e7a:	df 91       	pop	r29
    4e7c:	08 95       	ret

00004e7e <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    4e7e:	df 93       	push	r29
    4e80:	cf 93       	push	r28
    4e82:	0f 92       	push	r0
    4e84:	cd b7       	in	r28, 0x3d	; 61
    4e86:	de b7       	in	r29, 0x3e	; 62
    4e88:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    4e8a:	ec e5       	ldi	r30, 0x5C	; 92
    4e8c:	f0 e0       	ldi	r31, 0x00	; 0
    4e8e:	89 81       	ldd	r24, Y+1	; 0x01
    4e90:	80 83       	st	Z, r24
}
    4e92:	0f 90       	pop	r0
    4e94:	cf 91       	pop	r28
    4e96:	df 91       	pop	r29
    4e98:	08 95       	ret

00004e9a <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
    4e9a:	df 93       	push	r29
    4e9c:	cf 93       	push	r28
    4e9e:	00 d0       	rcall	.+0      	; 0x4ea0 <TIMER1_voidSetCTCA+0x6>
    4ea0:	cd b7       	in	r28, 0x3d	; 61
    4ea2:	de b7       	in	r29, 0x3e	; 62
    4ea4:	9a 83       	std	Y+2, r25	; 0x02
    4ea6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    4ea8:	ea e4       	ldi	r30, 0x4A	; 74
    4eaa:	f0 e0       	ldi	r31, 0x00	; 0
    4eac:	89 81       	ldd	r24, Y+1	; 0x01
    4eae:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb0:	91 83       	std	Z+1, r25	; 0x01
    4eb2:	80 83       	st	Z, r24
}
    4eb4:	0f 90       	pop	r0
    4eb6:	0f 90       	pop	r0
    4eb8:	cf 91       	pop	r28
    4eba:	df 91       	pop	r29
    4ebc:	08 95       	ret

00004ebe <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
    4ebe:	df 93       	push	r29
    4ec0:	cf 93       	push	r28
    4ec2:	00 d0       	rcall	.+0      	; 0x4ec4 <TIMER1_voidSetCTCB+0x6>
    4ec4:	cd b7       	in	r28, 0x3d	; 61
    4ec6:	de b7       	in	r29, 0x3e	; 62
    4ec8:	9a 83       	std	Y+2, r25	; 0x02
    4eca:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    4ecc:	e8 e4       	ldi	r30, 0x48	; 72
    4ece:	f0 e0       	ldi	r31, 0x00	; 0
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ed4:	91 83       	std	Z+1, r25	; 0x01
    4ed6:	80 83       	st	Z, r24
}
    4ed8:	0f 90       	pop	r0
    4eda:	0f 90       	pop	r0
    4edc:	cf 91       	pop	r28
    4ede:	df 91       	pop	r29
    4ee0:	08 95       	ret

00004ee2 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
    4ee2:	df 93       	push	r29
    4ee4:	cf 93       	push	r28
    4ee6:	0f 92       	push	r0
    4ee8:	cd b7       	in	r28, 0x3d	; 61
    4eea:	de b7       	in	r29, 0x3e	; 62
    4eec:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    4eee:	e3 e4       	ldi	r30, 0x43	; 67
    4ef0:	f0 e0       	ldi	r31, 0x00	; 0
    4ef2:	89 81       	ldd	r24, Y+1	; 0x01
    4ef4:	80 83       	st	Z, r24
}
    4ef6:	0f 90       	pop	r0
    4ef8:	cf 91       	pop	r28
    4efa:	df 91       	pop	r29
    4efc:	08 95       	ret

00004efe <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    4efe:	df 93       	push	r29
    4f00:	cf 93       	push	r28
    4f02:	00 d0       	rcall	.+0      	; 0x4f04 <TIMER1_voidSetICR1+0x6>
    4f04:	cd b7       	in	r28, 0x3d	; 61
    4f06:	de b7       	in	r29, 0x3e	; 62
    4f08:	9a 83       	std	Y+2, r25	; 0x02
    4f0a:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    4f0c:	e6 e4       	ldi	r30, 0x46	; 70
    4f0e:	f0 e0       	ldi	r31, 0x00	; 0
    4f10:	89 81       	ldd	r24, Y+1	; 0x01
    4f12:	9a 81       	ldd	r25, Y+2	; 0x02
    4f14:	91 83       	std	Z+1, r25	; 0x01
    4f16:	80 83       	st	Z, r24
}
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	cf 91       	pop	r28
    4f1e:	df 91       	pop	r29
    4f20:	08 95       	ret

00004f22 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    4f22:	df 93       	push	r29
    4f24:	cf 93       	push	r28
    4f26:	cd b7       	in	r28, 0x3d	; 61
    4f28:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    4f2a:	e2 e5       	ldi	r30, 0x52	; 82
    4f2c:	f0 e0       	ldi	r31, 0x00	; 0
    4f2e:	80 81       	ld	r24, Z
}
    4f30:	cf 91       	pop	r28
    4f32:	df 91       	pop	r29
    4f34:	08 95       	ret

00004f36 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    4f36:	df 93       	push	r29
    4f38:	cf 93       	push	r28
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    4f3e:	ec e4       	ldi	r30, 0x4C	; 76
    4f40:	f0 e0       	ldi	r31, 0x00	; 0
    4f42:	80 81       	ld	r24, Z
    4f44:	91 81       	ldd	r25, Z+1	; 0x01
}
    4f46:	cf 91       	pop	r28
    4f48:	df 91       	pop	r29
    4f4a:	08 95       	ret

00004f4c <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    4f4c:	df 93       	push	r29
    4f4e:	cf 93       	push	r28
    4f50:	cd b7       	in	r28, 0x3d	; 61
    4f52:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    4f54:	e4 e4       	ldi	r30, 0x44	; 68
    4f56:	f0 e0       	ldi	r31, 0x00	; 0
    4f58:	80 81       	ld	r24, Z
}
    4f5a:	cf 91       	pop	r28
    4f5c:	df 91       	pop	r29
    4f5e:	08 95       	ret

00004f60 <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
    4f60:	df 93       	push	r29
    4f62:	cf 93       	push	r28
    4f64:	00 d0       	rcall	.+0      	; 0x4f66 <TIMER_voidSetPWM+0x6>
    4f66:	cd b7       	in	r28, 0x3d	; 61
    4f68:	de b7       	in	r29, 0x3e	; 62
    4f6a:	9a 83       	std	Y+2, r25	; 0x02
    4f6c:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    4f6e:	ea e4       	ldi	r30, 0x4A	; 74
    4f70:	f0 e0       	ldi	r31, 0x00	; 0
    4f72:	89 81       	ldd	r24, Y+1	; 0x01
    4f74:	9a 81       	ldd	r25, Y+2	; 0x02
    4f76:	91 83       	std	Z+1, r25	; 0x01
    4f78:	80 83       	st	Z, r24
}
    4f7a:	0f 90       	pop	r0
    4f7c:	0f 90       	pop	r0
    4f7e:	cf 91       	pop	r28
    4f80:	df 91       	pop	r29
    4f82:	08 95       	ret

00004f84 <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)
{
    4f84:	df 93       	push	r29
    4f86:	cf 93       	push	r28
    4f88:	cd b7       	in	r28, 0x3d	; 61
    4f8a:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4f8c:	ae e4       	ldi	r26, 0x4E	; 78
    4f8e:	b0 e0       	ldi	r27, 0x00	; 0
    4f90:	ee e4       	ldi	r30, 0x4E	; 78
    4f92:	f0 e0       	ldi	r31, 0x00	; 0
    4f94:	80 81       	ld	r24, Z
    4f96:	80 64       	ori	r24, 0x40	; 64
    4f98:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    4f9a:	a9 e5       	ldi	r26, 0x59	; 89
    4f9c:	b0 e0       	ldi	r27, 0x00	; 0
    4f9e:	e9 e5       	ldi	r30, 0x59	; 89
    4fa0:	f0 e0       	ldi	r31, 0x00	; 0
    4fa2:	80 81       	ld	r24, Z
    4fa4:	80 62       	ori	r24, 0x20	; 32
    4fa6:	8c 93       	st	X, r24
}
    4fa8:	cf 91       	pop	r28
    4faa:	df 91       	pop	r29
    4fac:	08 95       	ret

00004fae <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    4fae:	df 93       	push	r29
    4fb0:	cf 93       	push	r28
    4fb2:	00 d0       	rcall	.+0      	; 0x4fb4 <TIMER_voidICUSetTriggerEdge+0x6>
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    4fba:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    4fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    4fbe:	81 30       	cpi	r24, 0x01	; 1
    4fc0:	41 f4       	brne	.+16     	; 0x4fd2 <TIMER_voidICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    4fc2:	ae e4       	ldi	r26, 0x4E	; 78
    4fc4:	b0 e0       	ldi	r27, 0x00	; 0
    4fc6:	ee e4       	ldi	r30, 0x4E	; 78
    4fc8:	f0 e0       	ldi	r31, 0x00	; 0
    4fca:	80 81       	ld	r24, Z
    4fcc:	80 64       	ori	r24, 0x40	; 64
    4fce:	8c 93       	st	X, r24
    4fd0:	0d c0       	rjmp	.+26     	; 0x4fec <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    4fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fd4:	88 23       	and	r24, r24
    4fd6:	41 f4       	brne	.+16     	; 0x4fe8 <TIMER_voidICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    4fd8:	ae e4       	ldi	r26, 0x4E	; 78
    4fda:	b0 e0       	ldi	r27, 0x00	; 0
    4fdc:	ee e4       	ldi	r30, 0x4E	; 78
    4fde:	f0 e0       	ldi	r31, 0x00	; 0
    4fe0:	80 81       	ld	r24, Z
    4fe2:	8f 7b       	andi	r24, 0xBF	; 191
    4fe4:	8c 93       	st	X, r24
    4fe6:	02 c0       	rjmp	.+4      	; 0x4fec <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    4fe8:	81 e0       	ldi	r24, 0x01	; 1
    4fea:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    4fec:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	cf 91       	pop	r28
    4ff4:	df 91       	pop	r29
    4ff6:	08 95       	ret

00004ff8 <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
    4ff8:	df 93       	push	r29
    4ffa:	cf 93       	push	r28
    4ffc:	cd b7       	in	r28, 0x3d	; 61
    4ffe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    5000:	a9 e5       	ldi	r26, 0x59	; 89
    5002:	b0 e0       	ldi	r27, 0x00	; 0
    5004:	e9 e5       	ldi	r30, 0x59	; 89
    5006:	f0 e0       	ldi	r31, 0x00	; 0
    5008:	80 81       	ld	r24, Z
    500a:	80 62       	ori	r24, 0x20	; 32
    500c:	8c 93       	st	X, r24
}
    500e:	cf 91       	pop	r28
    5010:	df 91       	pop	r29
    5012:	08 95       	ret

00005014 <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
    5014:	df 93       	push	r29
    5016:	cf 93       	push	r28
    5018:	cd b7       	in	r28, 0x3d	; 61
    501a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    501c:	a9 e5       	ldi	r26, 0x59	; 89
    501e:	b0 e0       	ldi	r27, 0x00	; 0
    5020:	e9 e5       	ldi	r30, 0x59	; 89
    5022:	f0 e0       	ldi	r31, 0x00	; 0
    5024:	80 81       	ld	r24, Z
    5026:	8f 7d       	andi	r24, 0xDF	; 223
    5028:	8c 93       	st	X, r24
}
    502a:	cf 91       	pop	r28
    502c:	df 91       	pop	r29
    502e:	08 95       	ret

00005030 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    5030:	df 93       	push	r29
    5032:	cf 93       	push	r28
    5034:	cd b7       	in	r28, 0x3d	; 61
    5036:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    5038:	e6 e4       	ldi	r30, 0x46	; 70
    503a:	f0 e0       	ldi	r31, 0x00	; 0
    503c:	80 81       	ld	r24, Z
    503e:	91 81       	ldd	r25, Z+1	; 0x01
}
    5040:	cf 91       	pop	r28
    5042:	df 91       	pop	r29
    5044:	08 95       	ret

00005046 <TIMER_voidWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
    5046:	df 93       	push	r29
    5048:	cf 93       	push	r28
    504a:	cd b7       	in	r28, 0x3d	; 61
    504c:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    504e:	a1 e4       	ldi	r26, 0x41	; 65
    5050:	b0 e0       	ldi	r27, 0x00	; 0
    5052:	e1 e4       	ldi	r30, 0x41	; 65
    5054:	f0 e0       	ldi	r31, 0x00	; 0
    5056:	80 81       	ld	r24, Z
    5058:	88 7f       	andi	r24, 0xF8	; 248
    505a:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    505c:	a1 e4       	ldi	r26, 0x41	; 65
    505e:	b0 e0       	ldi	r27, 0x00	; 0
    5060:	e1 e4       	ldi	r30, 0x41	; 65
    5062:	f0 e0       	ldi	r31, 0x00	; 0
    5064:	80 81       	ld	r24, Z
    5066:	86 60       	ori	r24, 0x06	; 6
    5068:	8c 93       	st	X, r24
}
    506a:	cf 91       	pop	r28
    506c:	df 91       	pop	r29
    506e:	08 95       	ret

00005070 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
    5070:	df 93       	push	r29
    5072:	cf 93       	push	r28
    5074:	cd b7       	in	r28, 0x3d	; 61
    5076:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    5078:	a1 e4       	ldi	r26, 0x41	; 65
    507a:	b0 e0       	ldi	r27, 0x00	; 0
    507c:	e1 e4       	ldi	r30, 0x41	; 65
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	80 81       	ld	r24, Z
    5082:	88 60       	ori	r24, 0x08	; 8
    5084:	8c 93       	st	X, r24
}
    5086:	cf 91       	pop	r28
    5088:	df 91       	pop	r29
    508a:	08 95       	ret

0000508c <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
    508c:	df 93       	push	r29
    508e:	cf 93       	push	r28
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    5094:	a1 e4       	ldi	r26, 0x41	; 65
    5096:	b0 e0       	ldi	r27, 0x00	; 0
    5098:	e1 e4       	ldi	r30, 0x41	; 65
    509a:	f0 e0       	ldi	r31, 0x00	; 0
    509c:	80 81       	ld	r24, Z
    509e:	88 61       	ori	r24, 0x18	; 24
    50a0:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    50a2:	e1 e4       	ldi	r30, 0x41	; 65
    50a4:	f0 e0       	ldi	r31, 0x00	; 0
    50a6:	10 82       	st	Z, r1
}
    50a8:	cf 91       	pop	r28
    50aa:	df 91       	pop	r29
    50ac:	08 95       	ret

000050ae <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    50ae:	df 93       	push	r29
    50b0:	cf 93       	push	r28
    50b2:	00 d0       	rcall	.+0      	; 0x50b4 <TIMER_u8SetCallBack+0x6>
    50b4:	00 d0       	rcall	.+0      	; 0x50b6 <TIMER_u8SetCallBack+0x8>
    50b6:	cd b7       	in	r28, 0x3d	; 61
    50b8:	de b7       	in	r29, 0x3e	; 62
    50ba:	9b 83       	std	Y+3, r25	; 0x03
    50bc:	8a 83       	std	Y+2, r24	; 0x02
    50be:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    50c0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    50c2:	8a 81       	ldd	r24, Y+2	; 0x02
    50c4:	9b 81       	ldd	r25, Y+3	; 0x03
    50c6:	00 97       	sbiw	r24, 0x00	; 0
    50c8:	69 f0       	breq	.+26     	; 0x50e4 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    50ca:	8c 81       	ldd	r24, Y+4	; 0x04
    50cc:	88 2f       	mov	r24, r24
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	88 0f       	add	r24, r24
    50d2:	99 1f       	adc	r25, r25
    50d4:	fc 01       	movw	r30, r24
    50d6:	ee 53       	subi	r30, 0x3E	; 62
    50d8:	fe 4f       	sbci	r31, 0xFE	; 254
    50da:	8a 81       	ldd	r24, Y+2	; 0x02
    50dc:	9b 81       	ldd	r25, Y+3	; 0x03
    50de:	91 83       	std	Z+1, r25	; 0x01
    50e0:	80 83       	st	Z, r24
    50e2:	02 c0       	rjmp	.+4      	; 0x50e8 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    50e4:	82 e0       	ldi	r24, 0x02	; 2
    50e6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    50e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    50ee:	0f 90       	pop	r0
    50f0:	0f 90       	pop	r0
    50f2:	cf 91       	pop	r28
    50f4:	df 91       	pop	r29
    50f6:	08 95       	ret

000050f8 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    50f8:	1f 92       	push	r1
    50fa:	0f 92       	push	r0
    50fc:	0f b6       	in	r0, 0x3f	; 63
    50fe:	0f 92       	push	r0
    5100:	11 24       	eor	r1, r1
    5102:	2f 93       	push	r18
    5104:	3f 93       	push	r19
    5106:	4f 93       	push	r20
    5108:	5f 93       	push	r21
    510a:	6f 93       	push	r22
    510c:	7f 93       	push	r23
    510e:	8f 93       	push	r24
    5110:	9f 93       	push	r25
    5112:	af 93       	push	r26
    5114:	bf 93       	push	r27
    5116:	ef 93       	push	r30
    5118:	ff 93       	push	r31
    511a:	df 93       	push	r29
    511c:	cf 93       	push	r28
    511e:	cd b7       	in	r28, 0x3d	; 61
    5120:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    5122:	80 91 d8 01 	lds	r24, 0x01D8
    5126:	90 91 d9 01 	lds	r25, 0x01D9
    512a:	00 97       	sbiw	r24, 0x00	; 0
    512c:	29 f0       	breq	.+10     	; 0x5138 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    512e:	e0 91 d8 01 	lds	r30, 0x01D8
    5132:	f0 91 d9 01 	lds	r31, 0x01D9
    5136:	09 95       	icall
	}
}
    5138:	cf 91       	pop	r28
    513a:	df 91       	pop	r29
    513c:	ff 91       	pop	r31
    513e:	ef 91       	pop	r30
    5140:	bf 91       	pop	r27
    5142:	af 91       	pop	r26
    5144:	9f 91       	pop	r25
    5146:	8f 91       	pop	r24
    5148:	7f 91       	pop	r23
    514a:	6f 91       	pop	r22
    514c:	5f 91       	pop	r21
    514e:	4f 91       	pop	r20
    5150:	3f 91       	pop	r19
    5152:	2f 91       	pop	r18
    5154:	0f 90       	pop	r0
    5156:	0f be       	out	0x3f, r0	; 63
    5158:	0f 90       	pop	r0
    515a:	1f 90       	pop	r1
    515c:	18 95       	reti

0000515e <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    515e:	1f 92       	push	r1
    5160:	0f 92       	push	r0
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	0f 92       	push	r0
    5166:	11 24       	eor	r1, r1
    5168:	2f 93       	push	r18
    516a:	3f 93       	push	r19
    516c:	4f 93       	push	r20
    516e:	5f 93       	push	r21
    5170:	6f 93       	push	r22
    5172:	7f 93       	push	r23
    5174:	8f 93       	push	r24
    5176:	9f 93       	push	r25
    5178:	af 93       	push	r26
    517a:	bf 93       	push	r27
    517c:	ef 93       	push	r30
    517e:	ff 93       	push	r31
    5180:	df 93       	push	r29
    5182:	cf 93       	push	r28
    5184:	cd b7       	in	r28, 0x3d	; 61
    5186:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    5188:	80 91 d6 01 	lds	r24, 0x01D6
    518c:	90 91 d7 01 	lds	r25, 0x01D7
    5190:	00 97       	sbiw	r24, 0x00	; 0
    5192:	29 f0       	breq	.+10     	; 0x519e <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    5194:	e0 91 d6 01 	lds	r30, 0x01D6
    5198:	f0 91 d7 01 	lds	r31, 0x01D7
    519c:	09 95       	icall
	}
}
    519e:	cf 91       	pop	r28
    51a0:	df 91       	pop	r29
    51a2:	ff 91       	pop	r31
    51a4:	ef 91       	pop	r30
    51a6:	bf 91       	pop	r27
    51a8:	af 91       	pop	r26
    51aa:	9f 91       	pop	r25
    51ac:	8f 91       	pop	r24
    51ae:	7f 91       	pop	r23
    51b0:	6f 91       	pop	r22
    51b2:	5f 91       	pop	r21
    51b4:	4f 91       	pop	r20
    51b6:	3f 91       	pop	r19
    51b8:	2f 91       	pop	r18
    51ba:	0f 90       	pop	r0
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	0f 90       	pop	r0
    51c0:	1f 90       	pop	r1
    51c2:	18 95       	reti

000051c4 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    51c4:	1f 92       	push	r1
    51c6:	0f 92       	push	r0
    51c8:	0f b6       	in	r0, 0x3f	; 63
    51ca:	0f 92       	push	r0
    51cc:	11 24       	eor	r1, r1
    51ce:	2f 93       	push	r18
    51d0:	3f 93       	push	r19
    51d2:	4f 93       	push	r20
    51d4:	5f 93       	push	r21
    51d6:	6f 93       	push	r22
    51d8:	7f 93       	push	r23
    51da:	8f 93       	push	r24
    51dc:	9f 93       	push	r25
    51de:	af 93       	push	r26
    51e0:	bf 93       	push	r27
    51e2:	ef 93       	push	r30
    51e4:	ff 93       	push	r31
    51e6:	df 93       	push	r29
    51e8:	cf 93       	push	r28
    51ea:	cd b7       	in	r28, 0x3d	; 61
    51ec:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    51ee:	80 91 d4 01 	lds	r24, 0x01D4
    51f2:	90 91 d5 01 	lds	r25, 0x01D5
    51f6:	00 97       	sbiw	r24, 0x00	; 0
    51f8:	29 f0       	breq	.+10     	; 0x5204 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    51fa:	e0 91 d4 01 	lds	r30, 0x01D4
    51fe:	f0 91 d5 01 	lds	r31, 0x01D5
    5202:	09 95       	icall
	}
}
    5204:	cf 91       	pop	r28
    5206:	df 91       	pop	r29
    5208:	ff 91       	pop	r31
    520a:	ef 91       	pop	r30
    520c:	bf 91       	pop	r27
    520e:	af 91       	pop	r26
    5210:	9f 91       	pop	r25
    5212:	8f 91       	pop	r24
    5214:	7f 91       	pop	r23
    5216:	6f 91       	pop	r22
    5218:	5f 91       	pop	r21
    521a:	4f 91       	pop	r20
    521c:	3f 91       	pop	r19
    521e:	2f 91       	pop	r18
    5220:	0f 90       	pop	r0
    5222:	0f be       	out	0x3f, r0	; 63
    5224:	0f 90       	pop	r0
    5226:	1f 90       	pop	r1
    5228:	18 95       	reti

0000522a <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    522a:	1f 92       	push	r1
    522c:	0f 92       	push	r0
    522e:	0f b6       	in	r0, 0x3f	; 63
    5230:	0f 92       	push	r0
    5232:	11 24       	eor	r1, r1
    5234:	2f 93       	push	r18
    5236:	3f 93       	push	r19
    5238:	4f 93       	push	r20
    523a:	5f 93       	push	r21
    523c:	6f 93       	push	r22
    523e:	7f 93       	push	r23
    5240:	8f 93       	push	r24
    5242:	9f 93       	push	r25
    5244:	af 93       	push	r26
    5246:	bf 93       	push	r27
    5248:	ef 93       	push	r30
    524a:	ff 93       	push	r31
    524c:	df 93       	push	r29
    524e:	cf 93       	push	r28
    5250:	cd b7       	in	r28, 0x3d	; 61
    5252:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    5254:	80 91 d2 01 	lds	r24, 0x01D2
    5258:	90 91 d3 01 	lds	r25, 0x01D3
    525c:	00 97       	sbiw	r24, 0x00	; 0
    525e:	29 f0       	breq	.+10     	; 0x526a <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    5260:	e0 91 d2 01 	lds	r30, 0x01D2
    5264:	f0 91 d3 01 	lds	r31, 0x01D3
    5268:	09 95       	icall
	}
}
    526a:	cf 91       	pop	r28
    526c:	df 91       	pop	r29
    526e:	ff 91       	pop	r31
    5270:	ef 91       	pop	r30
    5272:	bf 91       	pop	r27
    5274:	af 91       	pop	r26
    5276:	9f 91       	pop	r25
    5278:	8f 91       	pop	r24
    527a:	7f 91       	pop	r23
    527c:	6f 91       	pop	r22
    527e:	5f 91       	pop	r21
    5280:	4f 91       	pop	r20
    5282:	3f 91       	pop	r19
    5284:	2f 91       	pop	r18
    5286:	0f 90       	pop	r0
    5288:	0f be       	out	0x3f, r0	; 63
    528a:	0f 90       	pop	r0
    528c:	1f 90       	pop	r1
    528e:	18 95       	reti

00005290 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    5290:	1f 92       	push	r1
    5292:	0f 92       	push	r0
    5294:	0f b6       	in	r0, 0x3f	; 63
    5296:	0f 92       	push	r0
    5298:	11 24       	eor	r1, r1
    529a:	2f 93       	push	r18
    529c:	3f 93       	push	r19
    529e:	4f 93       	push	r20
    52a0:	5f 93       	push	r21
    52a2:	6f 93       	push	r22
    52a4:	7f 93       	push	r23
    52a6:	8f 93       	push	r24
    52a8:	9f 93       	push	r25
    52aa:	af 93       	push	r26
    52ac:	bf 93       	push	r27
    52ae:	ef 93       	push	r30
    52b0:	ff 93       	push	r31
    52b2:	df 93       	push	r29
    52b4:	cf 93       	push	r28
    52b6:	cd b7       	in	r28, 0x3d	; 61
    52b8:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    52ba:	80 91 d0 01 	lds	r24, 0x01D0
    52be:	90 91 d1 01 	lds	r25, 0x01D1
    52c2:	00 97       	sbiw	r24, 0x00	; 0
    52c4:	29 f0       	breq	.+10     	; 0x52d0 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    52c6:	e0 91 d0 01 	lds	r30, 0x01D0
    52ca:	f0 91 d1 01 	lds	r31, 0x01D1
    52ce:	09 95       	icall
	}
}
    52d0:	cf 91       	pop	r28
    52d2:	df 91       	pop	r29
    52d4:	ff 91       	pop	r31
    52d6:	ef 91       	pop	r30
    52d8:	bf 91       	pop	r27
    52da:	af 91       	pop	r26
    52dc:	9f 91       	pop	r25
    52de:	8f 91       	pop	r24
    52e0:	7f 91       	pop	r23
    52e2:	6f 91       	pop	r22
    52e4:	5f 91       	pop	r21
    52e6:	4f 91       	pop	r20
    52e8:	3f 91       	pop	r19
    52ea:	2f 91       	pop	r18
    52ec:	0f 90       	pop	r0
    52ee:	0f be       	out	0x3f, r0	; 63
    52f0:	0f 90       	pop	r0
    52f2:	1f 90       	pop	r1
    52f4:	18 95       	reti

000052f6 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    52f6:	1f 92       	push	r1
    52f8:	0f 92       	push	r0
    52fa:	0f b6       	in	r0, 0x3f	; 63
    52fc:	0f 92       	push	r0
    52fe:	11 24       	eor	r1, r1
    5300:	2f 93       	push	r18
    5302:	3f 93       	push	r19
    5304:	4f 93       	push	r20
    5306:	5f 93       	push	r21
    5308:	6f 93       	push	r22
    530a:	7f 93       	push	r23
    530c:	8f 93       	push	r24
    530e:	9f 93       	push	r25
    5310:	af 93       	push	r26
    5312:	bf 93       	push	r27
    5314:	ef 93       	push	r30
    5316:	ff 93       	push	r31
    5318:	df 93       	push	r29
    531a:	cf 93       	push	r28
    531c:	cd b7       	in	r28, 0x3d	; 61
    531e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    5320:	80 91 ce 01 	lds	r24, 0x01CE
    5324:	90 91 cf 01 	lds	r25, 0x01CF
    5328:	00 97       	sbiw	r24, 0x00	; 0
    532a:	29 f0       	breq	.+10     	; 0x5336 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    532c:	e0 91 ce 01 	lds	r30, 0x01CE
    5330:	f0 91 cf 01 	lds	r31, 0x01CF
    5334:	09 95       	icall
	}
}
    5336:	cf 91       	pop	r28
    5338:	df 91       	pop	r29
    533a:	ff 91       	pop	r31
    533c:	ef 91       	pop	r30
    533e:	bf 91       	pop	r27
    5340:	af 91       	pop	r26
    5342:	9f 91       	pop	r25
    5344:	8f 91       	pop	r24
    5346:	7f 91       	pop	r23
    5348:	6f 91       	pop	r22
    534a:	5f 91       	pop	r21
    534c:	4f 91       	pop	r20
    534e:	3f 91       	pop	r19
    5350:	2f 91       	pop	r18
    5352:	0f 90       	pop	r0
    5354:	0f be       	out	0x3f, r0	; 63
    5356:	0f 90       	pop	r0
    5358:	1f 90       	pop	r1
    535a:	18 95       	reti

0000535c <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    535c:	1f 92       	push	r1
    535e:	0f 92       	push	r0
    5360:	0f b6       	in	r0, 0x3f	; 63
    5362:	0f 92       	push	r0
    5364:	11 24       	eor	r1, r1
    5366:	2f 93       	push	r18
    5368:	3f 93       	push	r19
    536a:	4f 93       	push	r20
    536c:	5f 93       	push	r21
    536e:	6f 93       	push	r22
    5370:	7f 93       	push	r23
    5372:	8f 93       	push	r24
    5374:	9f 93       	push	r25
    5376:	af 93       	push	r26
    5378:	bf 93       	push	r27
    537a:	ef 93       	push	r30
    537c:	ff 93       	push	r31
    537e:	df 93       	push	r29
    5380:	cf 93       	push	r28
    5382:	cd b7       	in	r28, 0x3d	; 61
    5384:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    5386:	80 91 cc 01 	lds	r24, 0x01CC
    538a:	90 91 cd 01 	lds	r25, 0x01CD
    538e:	00 97       	sbiw	r24, 0x00	; 0
    5390:	29 f0       	breq	.+10     	; 0x539c <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    5392:	e0 91 cc 01 	lds	r30, 0x01CC
    5396:	f0 91 cd 01 	lds	r31, 0x01CD
    539a:	09 95       	icall
	}
}
    539c:	cf 91       	pop	r28
    539e:	df 91       	pop	r29
    53a0:	ff 91       	pop	r31
    53a2:	ef 91       	pop	r30
    53a4:	bf 91       	pop	r27
    53a6:	af 91       	pop	r26
    53a8:	9f 91       	pop	r25
    53aa:	8f 91       	pop	r24
    53ac:	7f 91       	pop	r23
    53ae:	6f 91       	pop	r22
    53b0:	5f 91       	pop	r21
    53b2:	4f 91       	pop	r20
    53b4:	3f 91       	pop	r19
    53b6:	2f 91       	pop	r18
    53b8:	0f 90       	pop	r0
    53ba:	0f be       	out	0x3f, r0	; 63
    53bc:	0f 90       	pop	r0
    53be:	1f 90       	pop	r1
    53c0:	18 95       	reti

000053c2 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    53c2:	1f 92       	push	r1
    53c4:	0f 92       	push	r0
    53c6:	0f b6       	in	r0, 0x3f	; 63
    53c8:	0f 92       	push	r0
    53ca:	11 24       	eor	r1, r1
    53cc:	2f 93       	push	r18
    53ce:	3f 93       	push	r19
    53d0:	4f 93       	push	r20
    53d2:	5f 93       	push	r21
    53d4:	6f 93       	push	r22
    53d6:	7f 93       	push	r23
    53d8:	8f 93       	push	r24
    53da:	9f 93       	push	r25
    53dc:	af 93       	push	r26
    53de:	bf 93       	push	r27
    53e0:	ef 93       	push	r30
    53e2:	ff 93       	push	r31
    53e4:	df 93       	push	r29
    53e6:	cf 93       	push	r28
    53e8:	cd b7       	in	r28, 0x3d	; 61
    53ea:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    53ec:	80 91 ca 01 	lds	r24, 0x01CA
    53f0:	90 91 cb 01 	lds	r25, 0x01CB
    53f4:	00 97       	sbiw	r24, 0x00	; 0
    53f6:	29 f0       	breq	.+10     	; 0x5402 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    53f8:	e0 91 ca 01 	lds	r30, 0x01CA
    53fc:	f0 91 cb 01 	lds	r31, 0x01CB
    5400:	09 95       	icall
	}
}
    5402:	cf 91       	pop	r28
    5404:	df 91       	pop	r29
    5406:	ff 91       	pop	r31
    5408:	ef 91       	pop	r30
    540a:	bf 91       	pop	r27
    540c:	af 91       	pop	r26
    540e:	9f 91       	pop	r25
    5410:	8f 91       	pop	r24
    5412:	7f 91       	pop	r23
    5414:	6f 91       	pop	r22
    5416:	5f 91       	pop	r21
    5418:	4f 91       	pop	r20
    541a:	3f 91       	pop	r19
    541c:	2f 91       	pop	r18
    541e:	0f 90       	pop	r0
    5420:	0f be       	out	0x3f, r0	; 63
    5422:	0f 90       	pop	r0
    5424:	1f 90       	pop	r1
    5426:	18 95       	reti

00005428 <USART_voidInit>:
 * Breif : This Function initialize USART depend on config.h
 * Parameters :  Nothing
 * return : Nothing
 */
void USART_voidInit (void)
{
    5428:	df 93       	push	r29
    542a:	cf 93       	push	r28
    542c:	00 d0       	rcall	.+0      	; 0x542e <USART_voidInit+0x6>
    542e:	0f 92       	push	r0
    5430:	cd b7       	in	r28, 0x3d	; 61
    5432:	de b7       	in	r29, 0x3e	; 62
	/* We will adjust this value according to the configrations then store it in UCSRC in one operation */
	u8 Local_u8UCSRC = 0 ;
    5434:	1b 82       	std	Y+3, r1	; 0x03
	
	/*Calculate The Baud Rate From The Equation */
	u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1) ;
    5436:	83 e3       	ldi	r24, 0x33	; 51
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	9a 83       	std	Y+2, r25	; 0x02
    543c:	89 83       	std	Y+1, r24	; 0x01
	
	/*
		$ Set Baud Rate
		Hint : UBRRH then UBRRL to avoid problems
	*/
	UBRRH = (u8)(Local_u16UBRR >> 8) ; /* MSBs at Local_u16UBRR */
    543e:	e0 e4       	ldi	r30, 0x40	; 64
    5440:	f0 e0       	ldi	r31, 0x00	; 0
    5442:	89 81       	ldd	r24, Y+1	; 0x01
    5444:	9a 81       	ldd	r25, Y+2	; 0x02
    5446:	89 2f       	mov	r24, r25
    5448:	99 27       	eor	r25, r25
    544a:	80 83       	st	Z, r24
	UBRRL = (u8)Local_u16UBRR ;	
    544c:	e9 e2       	ldi	r30, 0x29	; 41
    544e:	f0 e0       	ldi	r31, 0x00	; 0
    5450:	89 81       	ldd	r24, Y+1	; 0x01
    5452:	80 83       	st	Z, r24
	
	
	/***** Check 3 Modes   *****/
	#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1)

		CLR_BIT(UCSRA , UCSRA_U2X) ;
    5454:	ab e2       	ldi	r26, 0x2B	; 43
    5456:	b0 e0       	ldi	r27, 0x00	; 0
    5458:	eb e2       	ldi	r30, 0x2B	; 43
    545a:	f0 e0       	ldi	r31, 0x00	; 0
    545c:	80 81       	ld	r24, Z
    545e:	8d 7f       	andi	r24, 0xFD	; 253
    5460:	8c 93       	st	X, r24
	
	

	/*Multi-Processor Communication mode*/
	#if USART_MPCM == DISABLE
		CLR_BIT(UCSRA , UCSRA_MPCM) ;
    5462:	ab e2       	ldi	r26, 0x2B	; 43
    5464:	b0 e0       	ldi	r27, 0x00	; 0
    5466:	eb e2       	ldi	r30, 0x2B	; 43
    5468:	f0 e0       	ldi	r31, 0x00	; 0
    546a:	80 81       	ld	r24, Z
    546c:	8e 7f       	andi	r24, 0xFE	; 254
    546e:	8c 93       	st	X, r24

	/*UCSRC Register Config*/

	/*USART Mode*/
	#if USART_MODE == ASYNCHRONOUS
		CLR_BIT(Local_u8UCSRC , UCSRC_UMSEL) ;
    5470:	8b 81       	ldd	r24, Y+3	; 0x03
    5472:	8f 7b       	andi	r24, 0xBF	; 191
    5474:	8b 83       	std	Y+3, r24	; 0x03
		#error "Wrong USART_MODE config"
	#endif

	/*Parity Mode*/
	#if USART_PARITY_MODE == DISABLE
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM0) ;
    5476:	8b 81       	ldd	r24, Y+3	; 0x03
    5478:	8f 7e       	andi	r24, 0xEF	; 239
    547a:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM1) ;
    547c:	8b 81       	ldd	r24, Y+3	; 0x03
    547e:	8f 7d       	andi	r24, 0xDF	; 223
    5480:	8b 83       	std	Y+3, r24	; 0x03
		#error "Wrong USART_PARITY_MODE config"
	#endif

	/*Stop Bit*/
	#if USART_STOP_BIT == STOP_BIT_1
		CLR_BIT(Local_u8UCSRC , UCSRC_USBS) ;
    5482:	8b 81       	ldd	r24, Y+3	; 0x03
    5484:	87 7f       	andi	r24, 0xF7	; 247
    5486:	8b 83       	std	Y+3, r24	; 0x03
	#elif USART_DATA_SIZE == DATA_SIZE_7_BIT
		CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
	#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
    5488:	8b 81       	ldd	r24, Y+3	; 0x03
    548a:	82 60       	ori	r24, 0x02	; 2
    548c:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
    548e:	8b 81       	ldd	r24, Y+3	; 0x03
    5490:	84 60       	ori	r24, 0x04	; 4
    5492:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
    5494:	aa e2       	ldi	r26, 0x2A	; 42
    5496:	b0 e0       	ldi	r27, 0x00	; 0
    5498:	ea e2       	ldi	r30, 0x2A	; 42
    549a:	f0 e0       	ldi	r31, 0x00	; 0
    549c:	80 81       	ld	r24, Z
    549e:	8b 7f       	andi	r24, 0xFB	; 251
    54a0:	8c 93       	st	X, r24
			#error "Wrong USART_STOP_BIT config"
		#endif
	#endif

	/*Set UCSRC Mode*/
	SET_BIT(Local_u8UCSRC , UCSRC_URSEL) ;
    54a2:	8b 81       	ldd	r24, Y+3	; 0x03
    54a4:	80 68       	ori	r24, 0x80	; 128
    54a6:	8b 83       	std	Y+3, r24	; 0x03

	/*Store the value in UCSRC Register (one operation) */
	UCSRC = Local_u8UCSRC ;
    54a8:	e0 e4       	ldi	r30, 0x40	; 64
    54aa:	f0 e0       	ldi	r31, 0x00	; 0
    54ac:	8b 81       	ldd	r24, Y+3	; 0x03
    54ae:	80 83       	st	Z, r24
	
	/* Finally Enable the components */
	
	/*RX Complete Interrupt Enable*/
	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    54b0:	aa e2       	ldi	r26, 0x2A	; 42
    54b2:	b0 e0       	ldi	r27, 0x00	; 0
    54b4:	ea e2       	ldi	r30, 0x2A	; 42
    54b6:	f0 e0       	ldi	r31, 0x00	; 0
    54b8:	80 81       	ld	r24, Z
    54ba:	8f 77       	andi	r24, 0x7F	; 127
    54bc:	8c 93       	st	X, r24
		#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
	#endif

	/*TX Complete Interrupt Enable*/
	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    54be:	aa e2       	ldi	r26, 0x2A	; 42
    54c0:	b0 e0       	ldi	r27, 0x00	; 0
    54c2:	ea e2       	ldi	r30, 0x2A	; 42
    54c4:	f0 e0       	ldi	r31, 0x00	; 0
    54c6:	80 81       	ld	r24, Z
    54c8:	8f 7b       	andi	r24, 0xBF	; 191
    54ca:	8c 93       	st	X, r24
		#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
	#endif

	/*UDR Empty Interrupt Enable*/
	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_UDRIE) ;
    54cc:	aa e2       	ldi	r26, 0x2A	; 42
    54ce:	b0 e0       	ldi	r27, 0x00	; 0
    54d0:	ea e2       	ldi	r30, 0x2A	; 42
    54d2:	f0 e0       	ldi	r31, 0x00	; 0
    54d4:	80 81       	ld	r24, Z
    54d6:	8f 7d       	andi	r24, 0xDF	; 223
    54d8:	8c 93       	st	X, r24

	/*Receive Enable*/
	#if USART_RECEIVER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXEN) ;
	#elif USART_RECEIVER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_RXEN) ;
    54da:	aa e2       	ldi	r26, 0x2A	; 42
    54dc:	b0 e0       	ldi	r27, 0x00	; 0
    54de:	ea e2       	ldi	r30, 0x2A	; 42
    54e0:	f0 e0       	ldi	r31, 0x00	; 0
    54e2:	80 81       	ld	r24, Z
    54e4:	80 61       	ori	r24, 0x10	; 16
    54e6:	8c 93       	st	X, r24

	/*Transmitter Enable*/
	#if USART_TRANSMITTER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXEN) ;
	#elif USART_TRANSMITTER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_TXEN) ;
    54e8:	aa e2       	ldi	r26, 0x2A	; 42
    54ea:	b0 e0       	ldi	r27, 0x00	; 0
    54ec:	ea e2       	ldi	r30, 0x2A	; 42
    54ee:	f0 e0       	ldi	r31, 0x00	; 0
    54f0:	80 81       	ld	r24, Z
    54f2:	88 60       	ori	r24, 0x08	; 8
    54f4:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TRANSMITTER_ENABLE config"
	#endif
}
    54f6:	0f 90       	pop	r0
    54f8:	0f 90       	pop	r0
    54fa:	0f 90       	pop	r0
    54fc:	cf 91       	pop	r28
    54fe:	df 91       	pop	r29
    5500:	08 95       	ret

00005502 <USART_u8SendData>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8SendData (u8 Copy_u8Data)
{
    5502:	df 93       	push	r29
    5504:	cf 93       	push	r28
    5506:	00 d0       	rcall	.+0      	; 0x5508 <USART_u8SendData+0x6>
    5508:	00 d0       	rcall	.+0      	; 0x550a <USART_u8SendData+0x8>
    550a:	00 d0       	rcall	.+0      	; 0x550c <USART_u8SendData+0xa>
    550c:	cd b7       	in	r28, 0x3d	; 61
    550e:	de b7       	in	r29, 0x3e	; 62
    5510:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = OK ;
    5512:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
    5514:	19 82       	std	Y+1, r1	; 0x01
    5516:	1a 82       	std	Y+2, r1	; 0x02
    5518:	1b 82       	std	Y+3, r1	; 0x03
    551a:	1c 82       	std	Y+4, r1	; 0x04
	if (USART_u8State == IDLE)
    551c:	80 91 e8 01 	lds	r24, 0x01E8
    5520:	88 23       	and	r24, r24
    5522:	09 f0       	breq	.+2      	; 0x5526 <USART_u8SendData+0x24>
    5524:	44 c0       	rjmp	.+136    	; 0x55ae <USART_u8SendData+0xac>
	{
		USART_u8State = BUSY ;
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	80 93 e8 01 	sts	0x01E8, r24
    552c:	0b c0       	rjmp	.+22     	; 0x5544 <USART_u8SendData+0x42>
			Hint : TIMEOUT to avoid infinity loop
		*/
		/*Wait until a Receiving complete or Timing out*/
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++ ;
    552e:	89 81       	ldd	r24, Y+1	; 0x01
    5530:	9a 81       	ldd	r25, Y+2	; 0x02
    5532:	ab 81       	ldd	r26, Y+3	; 0x03
    5534:	bc 81       	ldd	r27, Y+4	; 0x04
    5536:	01 96       	adiw	r24, 0x01	; 1
    5538:	a1 1d       	adc	r26, r1
    553a:	b1 1d       	adc	r27, r1
    553c:	89 83       	std	Y+1, r24	; 0x01
    553e:	9a 83       	std	Y+2, r25	; 0x02
    5540:	ab 83       	std	Y+3, r26	; 0x03
    5542:	bc 83       	std	Y+4, r27	; 0x04

		/*
			Hint : TIMEOUT to avoid infinity loop
		*/
		/*Wait until a Receiving complete or Timing out*/
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    5544:	eb e2       	ldi	r30, 0x2B	; 43
    5546:	f0 e0       	ldi	r31, 0x00	; 0
    5548:	80 81       	ld	r24, Z
    554a:	88 2f       	mov	r24, r24
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	80 72       	andi	r24, 0x20	; 32
    5550:	90 70       	andi	r25, 0x00	; 0
    5552:	95 95       	asr	r25
    5554:	87 95       	ror	r24
    5556:	95 95       	asr	r25
    5558:	87 95       	ror	r24
    555a:	95 95       	asr	r25
    555c:	87 95       	ror	r24
    555e:	95 95       	asr	r25
    5560:	87 95       	ror	r24
    5562:	95 95       	asr	r25
    5564:	87 95       	ror	r24
    5566:	00 97       	sbiw	r24, 0x00	; 0
    5568:	61 f4       	brne	.+24     	; 0x5582 <USART_u8SendData+0x80>
    556a:	89 81       	ldd	r24, Y+1	; 0x01
    556c:	9a 81       	ldd	r25, Y+2	; 0x02
    556e:	ab 81       	ldd	r26, Y+3	; 0x03
    5570:	bc 81       	ldd	r27, Y+4	; 0x04
    5572:	80 31       	cpi	r24, 0x10	; 16
    5574:	27 e2       	ldi	r18, 0x27	; 39
    5576:	92 07       	cpc	r25, r18
    5578:	20 e0       	ldi	r18, 0x00	; 0
    557a:	a2 07       	cpc	r26, r18
    557c:	20 e0       	ldi	r18, 0x00	; 0
    557e:	b2 07       	cpc	r27, r18
    5580:	b1 f6       	brne	.-84     	; 0x552e <USART_u8SendData+0x2c>
		{
			Local_u32TimeoutCounter++ ;
		}

		if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    5582:	89 81       	ldd	r24, Y+1	; 0x01
    5584:	9a 81       	ldd	r25, Y+2	; 0x02
    5586:	ab 81       	ldd	r26, Y+3	; 0x03
    5588:	bc 81       	ldd	r27, Y+4	; 0x04
    558a:	80 31       	cpi	r24, 0x10	; 16
    558c:	27 e2       	ldi	r18, 0x27	; 39
    558e:	92 07       	cpc	r25, r18
    5590:	20 e0       	ldi	r18, 0x00	; 0
    5592:	a2 07       	cpc	r26, r18
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	b2 07       	cpc	r27, r18
    5598:	19 f4       	brne	.+6      	; 0x55a0 <USART_u8SendData+0x9e>
		{
			Local_u8ErrorState = TIMEOUT_STATE ;
    559a:	84 e0       	ldi	r24, 0x04	; 4
    559c:	8d 83       	std	Y+5, r24	; 0x05
    559e:	04 c0       	rjmp	.+8      	; 0x55a8 <USART_u8SendData+0xa6>
		}
		else
		{
			UDR = Copy_u8Data ;
    55a0:	ec e2       	ldi	r30, 0x2C	; 44
    55a2:	f0 e0       	ldi	r31, 0x00	; 0
    55a4:	8e 81       	ldd	r24, Y+6	; 0x06
    55a6:	80 83       	st	Z, r24
		}

		USART_u8State = IDLE ;
    55a8:	10 92 e8 01 	sts	0x01E8, r1
    55ac:	02 c0       	rjmp	.+4      	; 0x55b2 <USART_u8SendData+0xb0>
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
    55ae:	83 e0       	ldi	r24, 0x03	; 3
    55b0:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState ;
    55b2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    55b4:	26 96       	adiw	r28, 0x06	; 6
    55b6:	0f b6       	in	r0, 0x3f	; 63
    55b8:	f8 94       	cli
    55ba:	de bf       	out	0x3e, r29	; 62
    55bc:	0f be       	out	0x3f, r0	; 63
    55be:	cd bf       	out	0x3d, r28	; 61
    55c0:	cf 91       	pop	r28
    55c2:	df 91       	pop	r29
    55c4:	08 95       	ret

000055c6 <USART_u8RecevieData>:

//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8RecevieData (u8 * Copy_u8ReceviedData)
{
    55c6:	df 93       	push	r29
    55c8:	cf 93       	push	r28
    55ca:	cd b7       	in	r28, 0x3d	; 61
    55cc:	de b7       	in	r29, 0x3e	; 62
    55ce:	27 97       	sbiw	r28, 0x07	; 7
    55d0:	0f b6       	in	r0, 0x3f	; 63
    55d2:	f8 94       	cli
    55d4:	de bf       	out	0x3e, r29	; 62
    55d6:	0f be       	out	0x3f, r0	; 63
    55d8:	cd bf       	out	0x3d, r28	; 61
    55da:	9f 83       	std	Y+7, r25	; 0x07
    55dc:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState ;
	u32 Local_u32TimeoutCounter = 0 ;
    55de:	19 82       	std	Y+1, r1	; 0x01
    55e0:	1a 82       	std	Y+2, r1	; 0x02
    55e2:	1b 82       	std	Y+3, r1	; 0x03
    55e4:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_u8ReceviedData != NULL)
    55e6:	8e 81       	ldd	r24, Y+6	; 0x06
    55e8:	9f 81       	ldd	r25, Y+7	; 0x07
    55ea:	00 97       	sbiw	r24, 0x00	; 0
    55ec:	09 f4       	brne	.+2      	; 0x55f0 <USART_u8RecevieData+0x2a>
    55ee:	46 c0       	rjmp	.+140    	; 0x567c <USART_u8RecevieData+0xb6>
	{
		if (USART_u8State == IDLE)
    55f0:	80 91 e8 01 	lds	r24, 0x01E8
    55f4:	88 23       	and	r24, r24
    55f6:	09 f0       	breq	.+2      	; 0x55fa <USART_u8RecevieData+0x34>
    55f8:	3e c0       	rjmp	.+124    	; 0x5676 <USART_u8RecevieData+0xb0>
		{
			USART_u8State = BUSY ;
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	80 93 e8 01 	sts	0x01E8, r24
    5600:	0b c0       	rjmp	.+22     	; 0x5618 <USART_u8RecevieData+0x52>

			/*Wait until a receive complete*/
			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++ ;
    5602:	89 81       	ldd	r24, Y+1	; 0x01
    5604:	9a 81       	ldd	r25, Y+2	; 0x02
    5606:	ab 81       	ldd	r26, Y+3	; 0x03
    5608:	bc 81       	ldd	r27, Y+4	; 0x04
    560a:	01 96       	adiw	r24, 0x01	; 1
    560c:	a1 1d       	adc	r26, r1
    560e:	b1 1d       	adc	r27, r1
    5610:	89 83       	std	Y+1, r24	; 0x01
    5612:	9a 83       	std	Y+2, r25	; 0x02
    5614:	ab 83       	std	Y+3, r26	; 0x03
    5616:	bc 83       	std	Y+4, r27	; 0x04
		if (USART_u8State == IDLE)
		{
			USART_u8State = BUSY ;

			/*Wait until a receive complete*/
			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    5618:	eb e2       	ldi	r30, 0x2B	; 43
    561a:	f0 e0       	ldi	r31, 0x00	; 0
    561c:	80 81       	ld	r24, Z
    561e:	88 1f       	adc	r24, r24
    5620:	88 27       	eor	r24, r24
    5622:	88 1f       	adc	r24, r24
    5624:	88 2f       	mov	r24, r24
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	90 70       	andi	r25, 0x00	; 0
    562a:	00 97       	sbiw	r24, 0x00	; 0
    562c:	61 f4       	brne	.+24     	; 0x5646 <USART_u8RecevieData+0x80>
    562e:	89 81       	ldd	r24, Y+1	; 0x01
    5630:	9a 81       	ldd	r25, Y+2	; 0x02
    5632:	ab 81       	ldd	r26, Y+3	; 0x03
    5634:	bc 81       	ldd	r27, Y+4	; 0x04
    5636:	80 31       	cpi	r24, 0x10	; 16
    5638:	27 e2       	ldi	r18, 0x27	; 39
    563a:	92 07       	cpc	r25, r18
    563c:	20 e0       	ldi	r18, 0x00	; 0
    563e:	a2 07       	cpc	r26, r18
    5640:	20 e0       	ldi	r18, 0x00	; 0
    5642:	b2 07       	cpc	r27, r18
    5644:	f1 f6       	brne	.-68     	; 0x5602 <USART_u8RecevieData+0x3c>
			{
				Local_u32TimeoutCounter++ ;
			}

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    5646:	89 81       	ldd	r24, Y+1	; 0x01
    5648:	9a 81       	ldd	r25, Y+2	; 0x02
    564a:	ab 81       	ldd	r26, Y+3	; 0x03
    564c:	bc 81       	ldd	r27, Y+4	; 0x04
    564e:	80 31       	cpi	r24, 0x10	; 16
    5650:	27 e2       	ldi	r18, 0x27	; 39
    5652:	92 07       	cpc	r25, r18
    5654:	20 e0       	ldi	r18, 0x00	; 0
    5656:	a2 07       	cpc	r26, r18
    5658:	20 e0       	ldi	r18, 0x00	; 0
    565a:	b2 07       	cpc	r27, r18
    565c:	19 f4       	brne	.+6      	; 0x5664 <USART_u8RecevieData+0x9e>
			{
				Local_u8ErrorState = TIMEOUT_STATE ;
    565e:	84 e0       	ldi	r24, 0x04	; 4
    5660:	8d 83       	std	Y+5, r24	; 0x05
    5662:	06 c0       	rjmp	.+12     	; 0x5670 <USART_u8RecevieData+0xaa>
			}
			else
			{
				* Copy_u8ReceviedData = UDR ;
    5664:	ec e2       	ldi	r30, 0x2C	; 44
    5666:	f0 e0       	ldi	r31, 0x00	; 0
    5668:	80 81       	ld	r24, Z
    566a:	ee 81       	ldd	r30, Y+6	; 0x06
    566c:	ff 81       	ldd	r31, Y+7	; 0x07
    566e:	80 83       	st	Z, r24
			}

			USART_u8State = IDLE ;
    5670:	10 92 e8 01 	sts	0x01E8, r1
    5674:	05 c0       	rjmp	.+10     	; 0x5680 <USART_u8RecevieData+0xba>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
    5676:	83 e0       	ldi	r24, 0x03	; 3
    5678:	8d 83       	std	Y+5, r24	; 0x05
    567a:	02 c0       	rjmp	.+4      	; 0x5680 <USART_u8RecevieData+0xba>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    567c:	82 e0       	ldi	r24, 0x02	; 2
    567e:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState ;
    5680:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5682:	27 96       	adiw	r28, 0x07	; 7
    5684:	0f b6       	in	r0, 0x3f	; 63
    5686:	f8 94       	cli
    5688:	de bf       	out	0x3e, r29	; 62
    568a:	0f be       	out	0x3f, r0	; 63
    568c:	cd bf       	out	0x3d, r28	; 61
    568e:	cf 91       	pop	r28
    5690:	df 91       	pop	r29
    5692:	08 95       	ret

00005694 <USART_u8SendStringSynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8SendStringSynch (const u8 * Copy_pchString)
{
    5694:	df 93       	push	r29
    5696:	cf 93       	push	r28
    5698:	cd b7       	in	r28, 0x3d	; 61
    569a:	de b7       	in	r29, 0x3e	; 62
    569c:	28 97       	sbiw	r28, 0x08	; 8
    569e:	0f b6       	in	r0, 0x3f	; 63
    56a0:	f8 94       	cli
    56a2:	de bf       	out	0x3e, r29	; 62
    56a4:	0f be       	out	0x3f, r0	; 63
    56a6:	cd bf       	out	0x3d, r28	; 61
    56a8:	9f 83       	std	Y+7, r25	; 0x07
    56aa:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = OK ;
    56ac:	1d 82       	std	Y+5, r1	; 0x05

	u32 Local_u32Index = 0 ;
    56ae:	19 82       	std	Y+1, r1	; 0x01
    56b0:	1a 82       	std	Y+2, r1	; 0x02
    56b2:	1b 82       	std	Y+3, r1	; 0x03
    56b4:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_pchString != NULL)
    56b6:	8e 81       	ldd	r24, Y+6	; 0x06
    56b8:	9f 81       	ldd	r25, Y+7	; 0x07
    56ba:	00 97       	sbiw	r24, 0x00	; 0
    56bc:	41 f1       	breq	.+80     	; 0x570e <USART_u8SendStringSynch+0x7a>
    56be:	1c c0       	rjmp	.+56     	; 0x56f8 <USART_u8SendStringSynch+0x64>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
		{
			Local_u8ErrorState = USART_u8SendData(Copy_pchString[Local_u32Index]) ;
    56c0:	29 81       	ldd	r18, Y+1	; 0x01
    56c2:	3a 81       	ldd	r19, Y+2	; 0x02
    56c4:	8e 81       	ldd	r24, Y+6	; 0x06
    56c6:	9f 81       	ldd	r25, Y+7	; 0x07
    56c8:	fc 01       	movw	r30, r24
    56ca:	e2 0f       	add	r30, r18
    56cc:	f3 1f       	adc	r31, r19
    56ce:	80 81       	ld	r24, Z
    56d0:	0e 94 81 2a 	call	0x5502	; 0x5502 <USART_u8SendData>
    56d4:	8d 83       	std	Y+5, r24	; 0x05
			Local_u32Index++ ;
    56d6:	89 81       	ldd	r24, Y+1	; 0x01
    56d8:	9a 81       	ldd	r25, Y+2	; 0x02
    56da:	ab 81       	ldd	r26, Y+3	; 0x03
    56dc:	bc 81       	ldd	r27, Y+4	; 0x04
    56de:	01 96       	adiw	r24, 0x01	; 1
    56e0:	a1 1d       	adc	r26, r1
    56e2:	b1 1d       	adc	r27, r1
    56e4:	89 83       	std	Y+1, r24	; 0x01
    56e6:	9a 83       	std	Y+2, r25	; 0x02
    56e8:	ab 83       	std	Y+3, r26	; 0x03
    56ea:	bc 83       	std	Y+4, r27	; 0x04
			if (Local_u8ErrorState != OK)
    56ec:	8d 81       	ldd	r24, Y+5	; 0x05
    56ee:	88 23       	and	r24, r24
    56f0:	19 f0       	breq	.+6      	; 0x56f8 <USART_u8SendStringSynch+0x64>
			{
				return Local_u8ErrorState ;
    56f2:	8d 81       	ldd	r24, Y+5	; 0x05
    56f4:	88 87       	std	Y+8, r24	; 0x08
    56f6:	0f c0       	rjmp	.+30     	; 0x5716 <USART_u8SendStringSynch+0x82>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    56f8:	29 81       	ldd	r18, Y+1	; 0x01
    56fa:	3a 81       	ldd	r19, Y+2	; 0x02
    56fc:	8e 81       	ldd	r24, Y+6	; 0x06
    56fe:	9f 81       	ldd	r25, Y+7	; 0x07
    5700:	fc 01       	movw	r30, r24
    5702:	e2 0f       	add	r30, r18
    5704:	f3 1f       	adc	r31, r19
    5706:	80 81       	ld	r24, Z
    5708:	88 23       	and	r24, r24
    570a:	d1 f6       	brne	.-76     	; 0x56c0 <USART_u8SendStringSynch+0x2c>
    570c:	02 c0       	rjmp	.+4      	; 0x5712 <USART_u8SendStringSynch+0x7e>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    570e:	82 e0       	ldi	r24, 0x02	; 2
    5710:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState ;
    5712:	8d 81       	ldd	r24, Y+5	; 0x05
    5714:	88 87       	std	Y+8, r24	; 0x08
    5716:	88 85       	ldd	r24, Y+8	; 0x08
}
    5718:	28 96       	adiw	r28, 0x08	; 8
    571a:	0f b6       	in	r0, 0x3f	; 63
    571c:	f8 94       	cli
    571e:	de bf       	out	0x3e, r29	; 62
    5720:	0f be       	out	0x3f, r0	; 63
    5722:	cd bf       	out	0x3d, r28	; 61
    5724:	cf 91       	pop	r28
    5726:	df 91       	pop	r29
    5728:	08 95       	ret

0000572a <USART_u8SendStringAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8   USART_u8SendStringAsynch (const char * Copy_pchString , void (* NotificationFunc)(void))
{
    572a:	df 93       	push	r29
    572c:	cf 93       	push	r28
    572e:	00 d0       	rcall	.+0      	; 0x5730 <USART_u8SendStringAsynch+0x6>
    5730:	00 d0       	rcall	.+0      	; 0x5732 <USART_u8SendStringAsynch+0x8>
    5732:	0f 92       	push	r0
    5734:	cd b7       	in	r28, 0x3d	; 61
    5736:	de b7       	in	r29, 0x3e	; 62
    5738:	9b 83       	std	Y+3, r25	; 0x03
    573a:	8a 83       	std	Y+2, r24	; 0x02
    573c:	7d 83       	std	Y+5, r23	; 0x05
    573e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    5740:	19 82       	std	Y+1, r1	; 0x01

	if (USART_u8State == IDLE)
    5742:	80 91 e8 01 	lds	r24, 0x01E8
    5746:	88 23       	and	r24, r24
    5748:	99 f5       	brne	.+102    	; 0x57b0 <USART_u8SendStringAsynch+0x86>
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    574a:	8a 81       	ldd	r24, Y+2	; 0x02
    574c:	9b 81       	ldd	r25, Y+3	; 0x03
    574e:	00 97       	sbiw	r24, 0x00	; 0
    5750:	61 f1       	breq	.+88     	; 0x57aa <USART_u8SendStringAsynch+0x80>
    5752:	8c 81       	ldd	r24, Y+4	; 0x04
    5754:	9d 81       	ldd	r25, Y+5	; 0x05
    5756:	00 97       	sbiw	r24, 0x00	; 0
    5758:	41 f1       	breq	.+80     	; 0x57aa <USART_u8SendStringAsynch+0x80>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    575a:	81 e0       	ldi	r24, 0x01	; 1
    575c:	80 93 e8 01 	sts	0x01E8, r24

			/*Assign the USART data globally*/
			USART_pu8SendData = Copy_pchString ;
    5760:	8a 81       	ldd	r24, Y+2	; 0x02
    5762:	9b 81       	ldd	r25, Y+3	; 0x03
    5764:	90 93 e3 01 	sts	0x01E3, r25
    5768:	80 93 e2 01 	sts	0x01E2, r24
			USART_pvNotificationFunc = NotificationFunc ;
    576c:	8c 81       	ldd	r24, Y+4	; 0x04
    576e:	9d 81       	ldd	r25, Y+5	; 0x05
    5770:	90 93 e7 01 	sts	0x01E7, r25
    5774:	80 93 e6 01 	sts	0x01E6, r24

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    5778:	10 92 ea 01 	sts	0x01EA, r1

			/*Send first Data */
			UDR = USART_pu8SendData[USART_u8Index] ;
    577c:	ac e2       	ldi	r26, 0x2C	; 44
    577e:	b0 e0       	ldi	r27, 0x00	; 0
    5780:	20 91 e2 01 	lds	r18, 0x01E2
    5784:	30 91 e3 01 	lds	r19, 0x01E3
    5788:	80 91 ea 01 	lds	r24, 0x01EA
    578c:	88 2f       	mov	r24, r24
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	f9 01       	movw	r30, r18
    5792:	e8 0f       	add	r30, r24
    5794:	f9 1f       	adc	r31, r25
    5796:	80 81       	ld	r24, Z
    5798:	8c 93       	st	X, r24

			/*USART Transmit Interrupt Enable*/
			SET_BIT(UCSRB , UCSRB_TXCIE) ;
    579a:	aa e2       	ldi	r26, 0x2A	; 42
    579c:	b0 e0       	ldi	r27, 0x00	; 0
    579e:	ea e2       	ldi	r30, 0x2A	; 42
    57a0:	f0 e0       	ldi	r31, 0x00	; 0
    57a2:	80 81       	ld	r24, Z
    57a4:	80 64       	ori	r24, 0x40	; 64
    57a6:	8c 93       	st	X, r24
    57a8:	05 c0       	rjmp	.+10     	; 0x57b4 <USART_u8SendStringAsynch+0x8a>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER ;
    57aa:	82 e0       	ldi	r24, 0x02	; 2
    57ac:	89 83       	std	Y+1, r24	; 0x01
    57ae:	02 c0       	rjmp	.+4      	; 0x57b4 <USART_u8SendStringAsynch+0x8a>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
    57b0:	83 e0       	ldi	r24, 0x03	; 3
    57b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    57b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    57b6:	0f 90       	pop	r0
    57b8:	0f 90       	pop	r0
    57ba:	0f 90       	pop	r0
    57bc:	0f 90       	pop	r0
    57be:	0f 90       	pop	r0
    57c0:	cf 91       	pop	r28
    57c2:	df 91       	pop	r29
    57c4:	08 95       	ret

000057c6 <USART_u8ReceiveBufferSynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferSynch (u8 * Copy_pchString , u32 Copy_u32BufferSize)
{
    57c6:	df 93       	push	r29
    57c8:	cf 93       	push	r28
    57ca:	cd b7       	in	r28, 0x3d	; 61
    57cc:	de b7       	in	r29, 0x3e	; 62
    57ce:	2c 97       	sbiw	r28, 0x0c	; 12
    57d0:	0f b6       	in	r0, 0x3f	; 63
    57d2:	f8 94       	cli
    57d4:	de bf       	out	0x3e, r29	; 62
    57d6:	0f be       	out	0x3f, r0	; 63
    57d8:	cd bf       	out	0x3d, r28	; 61
    57da:	9f 83       	std	Y+7, r25	; 0x07
    57dc:	8e 83       	std	Y+6, r24	; 0x06
    57de:	48 87       	std	Y+8, r20	; 0x08
    57e0:	59 87       	std	Y+9, r21	; 0x09
    57e2:	6a 87       	std	Y+10, r22	; 0x0a
    57e4:	7b 87       	std	Y+11, r23	; 0x0b
	u8 Local_u8ErrorState = OK ;
    57e6:	1d 82       	std	Y+5, r1	; 0x05

	u32 Local_u32Index = 0 ;
    57e8:	19 82       	std	Y+1, r1	; 0x01
    57ea:	1a 82       	std	Y+2, r1	; 0x02
    57ec:	1b 82       	std	Y+3, r1	; 0x03
    57ee:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_pchString != NULL)
    57f0:	8e 81       	ldd	r24, Y+6	; 0x06
    57f2:	9f 81       	ldd	r25, Y+7	; 0x07
    57f4:	00 97       	sbiw	r24, 0x00	; 0
    57f6:	49 f1       	breq	.+82     	; 0x584a <USART_u8ReceiveBufferSynch+0x84>
    57f8:	1a c0       	rjmp	.+52     	; 0x582e <USART_u8ReceiveBufferSynch+0x68>
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
    57fa:	29 81       	ldd	r18, Y+1	; 0x01
    57fc:	3a 81       	ldd	r19, Y+2	; 0x02
    57fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5800:	9f 81       	ldd	r25, Y+7	; 0x07
    5802:	82 0f       	add	r24, r18
    5804:	93 1f       	adc	r25, r19
    5806:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
    580a:	8d 83       	std	Y+5, r24	; 0x05
			Local_u32Index++ ;
    580c:	89 81       	ldd	r24, Y+1	; 0x01
    580e:	9a 81       	ldd	r25, Y+2	; 0x02
    5810:	ab 81       	ldd	r26, Y+3	; 0x03
    5812:	bc 81       	ldd	r27, Y+4	; 0x04
    5814:	01 96       	adiw	r24, 0x01	; 1
    5816:	a1 1d       	adc	r26, r1
    5818:	b1 1d       	adc	r27, r1
    581a:	89 83       	std	Y+1, r24	; 0x01
    581c:	9a 83       	std	Y+2, r25	; 0x02
    581e:	ab 83       	std	Y+3, r26	; 0x03
    5820:	bc 83       	std	Y+4, r27	; 0x04

			if (Local_u8ErrorState != OK)
    5822:	8d 81       	ldd	r24, Y+5	; 0x05
    5824:	88 23       	and	r24, r24
    5826:	19 f0       	breq	.+6      	; 0x582e <USART_u8ReceiveBufferSynch+0x68>
			{
				return Local_u8ErrorState ;
    5828:	8d 81       	ldd	r24, Y+5	; 0x05
    582a:	8c 87       	std	Y+12, r24	; 0x0c
    582c:	12 c0       	rjmp	.+36     	; 0x5852 <USART_u8ReceiveBufferSynch+0x8c>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    582e:	29 81       	ldd	r18, Y+1	; 0x01
    5830:	3a 81       	ldd	r19, Y+2	; 0x02
    5832:	4b 81       	ldd	r20, Y+3	; 0x03
    5834:	5c 81       	ldd	r21, Y+4	; 0x04
    5836:	88 85       	ldd	r24, Y+8	; 0x08
    5838:	99 85       	ldd	r25, Y+9	; 0x09
    583a:	aa 85       	ldd	r26, Y+10	; 0x0a
    583c:	bb 85       	ldd	r27, Y+11	; 0x0b
    583e:	28 17       	cp	r18, r24
    5840:	39 07       	cpc	r19, r25
    5842:	4a 07       	cpc	r20, r26
    5844:	5b 07       	cpc	r21, r27
    5846:	c8 f2       	brcs	.-78     	; 0x57fa <USART_u8ReceiveBufferSynch+0x34>
    5848:	02 c0       	rjmp	.+4      	; 0x584e <USART_u8ReceiveBufferSynch+0x88>
			}
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    584a:	82 e0       	ldi	r24, 0x02	; 2
    584c:	8d 83       	std	Y+5, r24	; 0x05
	}

	return Local_u8ErrorState ;
    584e:	8d 81       	ldd	r24, Y+5	; 0x05
    5850:	8c 87       	std	Y+12, r24	; 0x0c
    5852:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    5854:	2c 96       	adiw	r28, 0x0c	; 12
    5856:	0f b6       	in	r0, 0x3f	; 63
    5858:	f8 94       	cli
    585a:	de bf       	out	0x3e, r29	; 62
    585c:	0f be       	out	0x3f, r0	; 63
    585e:	cd bf       	out	0x3d, r28	; 61
    5860:	cf 91       	pop	r28
    5862:	df 91       	pop	r29
    5864:	08 95       	ret

00005866 <USART_u8ReceiveBufferAsynch>:


//-------------------------------------------------------------------------------------------------------------------------------

u8 USART_u8ReceiveBufferAsynch (u8 * Copy_pchString , u32 Copy_u32BufferSize , void (* NotificationFunc)(void))
{
    5866:	df 93       	push	r29
    5868:	cf 93       	push	r28
    586a:	cd b7       	in	r28, 0x3d	; 61
    586c:	de b7       	in	r29, 0x3e	; 62
    586e:	29 97       	sbiw	r28, 0x09	; 9
    5870:	0f b6       	in	r0, 0x3f	; 63
    5872:	f8 94       	cli
    5874:	de bf       	out	0x3e, r29	; 62
    5876:	0f be       	out	0x3f, r0	; 63
    5878:	cd bf       	out	0x3d, r28	; 61
    587a:	9b 83       	std	Y+3, r25	; 0x03
    587c:	8a 83       	std	Y+2, r24	; 0x02
    587e:	4c 83       	std	Y+4, r20	; 0x04
    5880:	5d 83       	std	Y+5, r21	; 0x05
    5882:	6e 83       	std	Y+6, r22	; 0x06
    5884:	7f 83       	std	Y+7, r23	; 0x07
    5886:	39 87       	std	Y+9, r19	; 0x09
    5888:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = OK ;
    588a:	19 82       	std	Y+1, r1	; 0x01

	if (USART_u8State == IDLE)
    588c:	80 91 e8 01 	lds	r24, 0x01E8
    5890:	88 23       	and	r24, r24
    5892:	21 f5       	brne	.+72     	; 0x58dc <USART_u8ReceiveBufferAsynch+0x76>
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    5894:	8a 81       	ldd	r24, Y+2	; 0x02
    5896:	9b 81       	ldd	r25, Y+3	; 0x03
    5898:	00 97       	sbiw	r24, 0x00	; 0
    589a:	e9 f0       	breq	.+58     	; 0x58d6 <USART_u8ReceiveBufferAsynch+0x70>
    589c:	88 85       	ldd	r24, Y+8	; 0x08
    589e:	99 85       	ldd	r25, Y+9	; 0x09
    58a0:	00 97       	sbiw	r24, 0x00	; 0
    58a2:	c9 f0       	breq	.+50     	; 0x58d6 <USART_u8ReceiveBufferAsynch+0x70>
		{
			/*USART is now Busy*/
			USART_u8State = BUSY ;
    58a4:	81 e0       	ldi	r24, 0x01	; 1
    58a6:	80 93 e8 01 	sts	0x01E8, r24

			/*Assign the USART data globally*/
			USART_pu8ReceiveData = Copy_pchString ;
    58aa:	8a 81       	ldd	r24, Y+2	; 0x02
    58ac:	9b 81       	ldd	r25, Y+3	; 0x03
    58ae:	90 93 e5 01 	sts	0x01E5, r25
    58b2:	80 93 e4 01 	sts	0x01E4, r24
			USART_pvNotificationFunc = NotificationFunc ;
    58b6:	88 85       	ldd	r24, Y+8	; 0x08
    58b8:	99 85       	ldd	r25, Y+9	; 0x09
    58ba:	90 93 e7 01 	sts	0x01E7, r25
    58be:	80 93 e6 01 	sts	0x01E6, r24

			/*Set Index to first element*/
			USART_u8Index = 0 ;
    58c2:	10 92 ea 01 	sts	0x01EA, r1

			/*USART Transmit Interrupt Enable*/
			SET_BIT(UCSRB , UCSRB_RXCIE) ;
    58c6:	aa e2       	ldi	r26, 0x2A	; 42
    58c8:	b0 e0       	ldi	r27, 0x00	; 0
    58ca:	ea e2       	ldi	r30, 0x2A	; 42
    58cc:	f0 e0       	ldi	r31, 0x00	; 0
    58ce:	80 81       	ld	r24, Z
    58d0:	80 68       	ori	r24, 0x80	; 128
    58d2:	8c 93       	st	X, r24
    58d4:	05 c0       	rjmp	.+10     	; 0x58e0 <USART_u8ReceiveBufferAsynch+0x7a>
		}
		else
		{
			Local_u8ErrorState = NULL_POINTER ;
    58d6:	82 e0       	ldi	r24, 0x02	; 2
    58d8:	89 83       	std	Y+1, r24	; 0x01
    58da:	02 c0       	rjmp	.+4      	; 0x58e0 <USART_u8ReceiveBufferAsynch+0x7a>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_STATE ;
    58dc:	83 e0       	ldi	r24, 0x03	; 3
    58de:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    58e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    58e2:	29 96       	adiw	r28, 0x09	; 9
    58e4:	0f b6       	in	r0, 0x3f	; 63
    58e6:	f8 94       	cli
    58e8:	de bf       	out	0x3e, r29	; 62
    58ea:	0f be       	out	0x3f, r0	; 63
    58ec:	cd bf       	out	0x3d, r28	; 61
    58ee:	cf 91       	pop	r28
    58f0:	df 91       	pop	r29
    58f2:	08 95       	ret

000058f4 <__vector_13>:

//-------------------------------------------------------------------------------------------------------------------------------

void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    58f4:	1f 92       	push	r1
    58f6:	0f 92       	push	r0
    58f8:	0f b6       	in	r0, 0x3f	; 63
    58fa:	0f 92       	push	r0
    58fc:	11 24       	eor	r1, r1
    58fe:	2f 93       	push	r18
    5900:	3f 93       	push	r19
    5902:	4f 93       	push	r20
    5904:	5f 93       	push	r21
    5906:	6f 93       	push	r22
    5908:	7f 93       	push	r23
    590a:	8f 93       	push	r24
    590c:	9f 93       	push	r25
    590e:	af 93       	push	r26
    5910:	bf 93       	push	r27
    5912:	ef 93       	push	r30
    5914:	ff 93       	push	r31
    5916:	df 93       	push	r29
    5918:	cf 93       	push	r28
    591a:	cd b7       	in	r28, 0x3d	; 61
    591c:	de b7       	in	r29, 0x3e	; 62
	/*Increment Data index of the buffer*/
	USART_u8Index++ ;
    591e:	80 91 ea 01 	lds	r24, 0x01EA
    5922:	8f 5f       	subi	r24, 0xFF	; 255
    5924:	80 93 ea 01 	sts	0x01EA, r24

	if (USART_u8Index == USART_u8BufferSize)
    5928:	90 91 ea 01 	lds	r25, 0x01EA
    592c:	80 91 e9 01 	lds	r24, 0x01E9
    5930:	98 17       	cp	r25, r24
    5932:	79 f4       	brne	.+30     	; 0x5952 <__vector_13+0x5e>
	{
		/*Send Data Complete*/

		/*USART is now IDLE*/
		USART_u8State = IDLE ;
    5934:	10 92 e8 01 	sts	0x01E8, r1

		/*Call Notification Function*/
		USART_pvNotificationFunc() ;
    5938:	e0 91 e6 01 	lds	r30, 0x01E6
    593c:	f0 91 e7 01 	lds	r31, 0x01E7
    5940:	09 95       	icall

		/*USART Transmit Interrupt Enable*/
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    5942:	aa e2       	ldi	r26, 0x2A	; 42
    5944:	b0 e0       	ldi	r27, 0x00	; 0
    5946:	ea e2       	ldi	r30, 0x2A	; 42
    5948:	f0 e0       	ldi	r31, 0x00	; 0
    594a:	80 81       	ld	r24, Z
    594c:	8f 77       	andi	r24, 0x7F	; 127
    594e:	8c 93       	st	X, r24
    5950:	0f c0       	rjmp	.+30     	; 0x5970 <__vector_13+0x7c>
	else
	{
		/*Send Data not Complete*/

		/*Send next Data*/
		UDR = USART_pu8SendData[USART_u8Index] ;
    5952:	ac e2       	ldi	r26, 0x2C	; 44
    5954:	b0 e0       	ldi	r27, 0x00	; 0
    5956:	20 91 e2 01 	lds	r18, 0x01E2
    595a:	30 91 e3 01 	lds	r19, 0x01E3
    595e:	80 91 ea 01 	lds	r24, 0x01EA
    5962:	88 2f       	mov	r24, r24
    5964:	90 e0       	ldi	r25, 0x00	; 0
    5966:	f9 01       	movw	r30, r18
    5968:	e8 0f       	add	r30, r24
    596a:	f9 1f       	adc	r31, r25
    596c:	80 81       	ld	r24, Z
    596e:	8c 93       	st	X, r24
	}
}
    5970:	cf 91       	pop	r28
    5972:	df 91       	pop	r29
    5974:	ff 91       	pop	r31
    5976:	ef 91       	pop	r30
    5978:	bf 91       	pop	r27
    597a:	af 91       	pop	r26
    597c:	9f 91       	pop	r25
    597e:	8f 91       	pop	r24
    5980:	7f 91       	pop	r23
    5982:	6f 91       	pop	r22
    5984:	5f 91       	pop	r21
    5986:	4f 91       	pop	r20
    5988:	3f 91       	pop	r19
    598a:	2f 91       	pop	r18
    598c:	0f 90       	pop	r0
    598e:	0f be       	out	0x3f, r0	; 63
    5990:	0f 90       	pop	r0
    5992:	1f 90       	pop	r1
    5994:	18 95       	reti

00005996 <__vector_15>:

void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    5996:	1f 92       	push	r1
    5998:	0f 92       	push	r0
    599a:	0f b6       	in	r0, 0x3f	; 63
    599c:	0f 92       	push	r0
    599e:	11 24       	eor	r1, r1
    59a0:	2f 93       	push	r18
    59a2:	3f 93       	push	r19
    59a4:	4f 93       	push	r20
    59a6:	5f 93       	push	r21
    59a8:	6f 93       	push	r22
    59aa:	7f 93       	push	r23
    59ac:	8f 93       	push	r24
    59ae:	9f 93       	push	r25
    59b0:	af 93       	push	r26
    59b2:	bf 93       	push	r27
    59b4:	ef 93       	push	r30
    59b6:	ff 93       	push	r31
    59b8:	df 93       	push	r29
    59ba:	cf 93       	push	r28
    59bc:	cd b7       	in	r28, 0x3d	; 61
    59be:	de b7       	in	r29, 0x3e	; 62
	/*Receive next Data*/
	USART_pu8ReceiveData[USART_u8Index] = UDR ;
    59c0:	20 91 e4 01 	lds	r18, 0x01E4
    59c4:	30 91 e5 01 	lds	r19, 0x01E5
    59c8:	80 91 ea 01 	lds	r24, 0x01EA
    59cc:	88 2f       	mov	r24, r24
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	d9 01       	movw	r26, r18
    59d2:	a8 0f       	add	r26, r24
    59d4:	b9 1f       	adc	r27, r25
    59d6:	ec e2       	ldi	r30, 0x2C	; 44
    59d8:	f0 e0       	ldi	r31, 0x00	; 0
    59da:	80 81       	ld	r24, Z
    59dc:	8c 93       	st	X, r24

	/*Increment Data index of the buffer*/
	USART_u8Index++ ;
    59de:	80 91 ea 01 	lds	r24, 0x01EA
    59e2:	8f 5f       	subi	r24, 0xFF	; 255
    59e4:	80 93 ea 01 	sts	0x01EA, r24

	if (USART_pu8ReceiveData[USART_u8Index] == USART_u8BufferSize)
    59e8:	20 91 e4 01 	lds	r18, 0x01E4
    59ec:	30 91 e5 01 	lds	r19, 0x01E5
    59f0:	80 91 ea 01 	lds	r24, 0x01EA
    59f4:	88 2f       	mov	r24, r24
    59f6:	90 e0       	ldi	r25, 0x00	; 0
    59f8:	f9 01       	movw	r30, r18
    59fa:	e8 0f       	add	r30, r24
    59fc:	f9 1f       	adc	r31, r25
    59fe:	90 81       	ld	r25, Z
    5a00:	80 91 e9 01 	lds	r24, 0x01E9
    5a04:	98 17       	cp	r25, r24
    5a06:	71 f4       	brne	.+28     	; 0x5a24 <__vector_15+0x8e>
	{
		/*Receive Data Complete*/

		/*USART is now IDLE*/
		USART_u8State = IDLE ;
    5a08:	10 92 e8 01 	sts	0x01E8, r1

		/*Call Notification Function*/
		USART_pvNotificationFunc() ;
    5a0c:	e0 91 e6 01 	lds	r30, 0x01E6
    5a10:	f0 91 e7 01 	lds	r31, 0x01E7
    5a14:	09 95       	icall

		/*USART Receive Interrupt Enable*/
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    5a16:	aa e2       	ldi	r26, 0x2A	; 42
    5a18:	b0 e0       	ldi	r27, 0x00	; 0
    5a1a:	ea e2       	ldi	r30, 0x2A	; 42
    5a1c:	f0 e0       	ldi	r31, 0x00	; 0
    5a1e:	80 81       	ld	r24, Z
    5a20:	8f 7b       	andi	r24, 0xBF	; 191
    5a22:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Noting*/
	}
}
    5a24:	cf 91       	pop	r28
    5a26:	df 91       	pop	r29
    5a28:	ff 91       	pop	r31
    5a2a:	ef 91       	pop	r30
    5a2c:	bf 91       	pop	r27
    5a2e:	af 91       	pop	r26
    5a30:	9f 91       	pop	r25
    5a32:	8f 91       	pop	r24
    5a34:	7f 91       	pop	r23
    5a36:	6f 91       	pop	r22
    5a38:	5f 91       	pop	r21
    5a3a:	4f 91       	pop	r20
    5a3c:	3f 91       	pop	r19
    5a3e:	2f 91       	pop	r18
    5a40:	0f 90       	pop	r0
    5a42:	0f be       	out	0x3f, r0	; 63
    5a44:	0f 90       	pop	r0
    5a46:	1f 90       	pop	r1
    5a48:	18 95       	reti

00005a4a <EEPROM_writeByte>:
#include <util/delay.h>
#include "twi.h"
#define PASSWORD_ADDRESS	(0x0311)

u8 EEPROM_writeByte(u16 u16addr, u8 u8data)
{
    5a4a:	df 93       	push	r29
    5a4c:	cf 93       	push	r28
    5a4e:	00 d0       	rcall	.+0      	; 0x5a50 <EEPROM_writeByte+0x6>
    5a50:	00 d0       	rcall	.+0      	; 0x5a52 <EEPROM_writeByte+0x8>
    5a52:	cd b7       	in	r28, 0x3d	; 61
    5a54:	de b7       	in	r29, 0x3e	; 62
    5a56:	9a 83       	std	Y+2, r25	; 0x02
    5a58:	89 83       	std	Y+1, r24	; 0x01
    5a5a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    5a5c:	0e 94 38 31 	call	0x6270	; 0x6270 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    5a60:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5a64:	88 30       	cpi	r24, 0x08	; 8
    5a66:	11 f0       	breq	.+4      	; 0x5a6c <EEPROM_writeByte+0x22>
        return ERROR;
    5a68:	1c 82       	std	Y+4, r1	; 0x04
    5a6a:	28 c0       	rjmp	.+80     	; 0x5abc <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((u8)(0xA0 | ((u16addr & 0x0700)>>7)));
    5a6c:	89 81       	ldd	r24, Y+1	; 0x01
    5a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    5a70:	80 70       	andi	r24, 0x00	; 0
    5a72:	97 70       	andi	r25, 0x07	; 7
    5a74:	88 0f       	add	r24, r24
    5a76:	89 2f       	mov	r24, r25
    5a78:	88 1f       	adc	r24, r24
    5a7a:	99 0b       	sbc	r25, r25
    5a7c:	91 95       	neg	r25
    5a7e:	80 6a       	ori	r24, 0xA0	; 160
    5a80:	0e 94 53 31 	call	0x62a6	; 0x62a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    5a84:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5a88:	88 31       	cpi	r24, 0x18	; 24
    5a8a:	11 f0       	breq	.+4      	; 0x5a90 <EEPROM_writeByte+0x46>
        return ERROR; 
    5a8c:	1c 82       	std	Y+4, r1	; 0x04
    5a8e:	16 c0       	rjmp	.+44     	; 0x5abc <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((u8)(u16addr));
    5a90:	89 81       	ldd	r24, Y+1	; 0x01
    5a92:	0e 94 53 31 	call	0x62a6	; 0x62a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    5a96:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5a9a:	88 32       	cpi	r24, 0x28	; 40
    5a9c:	11 f0       	breq	.+4      	; 0x5aa2 <EEPROM_writeByte+0x58>
        return ERROR;
    5a9e:	1c 82       	std	Y+4, r1	; 0x04
    5aa0:	0d c0       	rjmp	.+26     	; 0x5abc <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    5aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    5aa4:	0e 94 53 31 	call	0x62a6	; 0x62a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    5aa8:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5aac:	88 32       	cpi	r24, 0x28	; 40
    5aae:	11 f0       	breq	.+4      	; 0x5ab4 <EEPROM_writeByte+0x6a>
        return ERROR;
    5ab0:	1c 82       	std	Y+4, r1	; 0x04
    5ab2:	04 c0       	rjmp	.+8      	; 0x5abc <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    5ab4:	0e 94 48 31 	call	0x6290	; 0x6290 <TWI_stop>
	
    return SUCCESS;
    5ab8:	81 e0       	ldi	r24, 0x01	; 1
    5aba:	8c 83       	std	Y+4, r24	; 0x04
    5abc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5abe:	0f 90       	pop	r0
    5ac0:	0f 90       	pop	r0
    5ac2:	0f 90       	pop	r0
    5ac4:	0f 90       	pop	r0
    5ac6:	cf 91       	pop	r28
    5ac8:	df 91       	pop	r29
    5aca:	08 95       	ret

00005acc <EEPROM_readByte>:

u8 EEPROM_readByte(u16 u16addr, u8 *u8data)
{
    5acc:	df 93       	push	r29
    5ace:	cf 93       	push	r28
    5ad0:	00 d0       	rcall	.+0      	; 0x5ad2 <EEPROM_readByte+0x6>
    5ad2:	00 d0       	rcall	.+0      	; 0x5ad4 <EEPROM_readByte+0x8>
    5ad4:	0f 92       	push	r0
    5ad6:	cd b7       	in	r28, 0x3d	; 61
    5ad8:	de b7       	in	r29, 0x3e	; 62
    5ada:	9a 83       	std	Y+2, r25	; 0x02
    5adc:	89 83       	std	Y+1, r24	; 0x01
    5ade:	7c 83       	std	Y+4, r23	; 0x04
    5ae0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    5ae2:	0e 94 38 31 	call	0x6270	; 0x6270 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    5ae6:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5aea:	88 30       	cpi	r24, 0x08	; 8
    5aec:	11 f0       	breq	.+4      	; 0x5af2 <EEPROM_readByte+0x26>
        return ERROR;
    5aee:	1d 82       	std	Y+5, r1	; 0x05
    5af0:	44 c0       	rjmp	.+136    	; 0x5b7a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((u8)((0xA0) | ((u16addr & 0x0700)>>7)));
    5af2:	89 81       	ldd	r24, Y+1	; 0x01
    5af4:	9a 81       	ldd	r25, Y+2	; 0x02
    5af6:	80 70       	andi	r24, 0x00	; 0
    5af8:	97 70       	andi	r25, 0x07	; 7
    5afa:	88 0f       	add	r24, r24
    5afc:	89 2f       	mov	r24, r25
    5afe:	88 1f       	adc	r24, r24
    5b00:	99 0b       	sbc	r25, r25
    5b02:	91 95       	neg	r25
    5b04:	80 6a       	ori	r24, 0xA0	; 160
    5b06:	0e 94 53 31 	call	0x62a6	; 0x62a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    5b0a:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5b0e:	88 31       	cpi	r24, 0x18	; 24
    5b10:	11 f0       	breq	.+4      	; 0x5b16 <EEPROM_readByte+0x4a>
        return ERROR;
    5b12:	1d 82       	std	Y+5, r1	; 0x05
    5b14:	32 c0       	rjmp	.+100    	; 0x5b7a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((u8)(u16addr));
    5b16:	89 81       	ldd	r24, Y+1	; 0x01
    5b18:	0e 94 53 31 	call	0x62a6	; 0x62a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    5b1c:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5b20:	88 32       	cpi	r24, 0x28	; 40
    5b22:	11 f0       	breq	.+4      	; 0x5b28 <EEPROM_readByte+0x5c>
        return ERROR;
    5b24:	1d 82       	std	Y+5, r1	; 0x05
    5b26:	29 c0       	rjmp	.+82     	; 0x5b7a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    5b28:	0e 94 38 31 	call	0x6270	; 0x6270 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    5b2c:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5b30:	80 31       	cpi	r24, 0x10	; 16
    5b32:	11 f0       	breq	.+4      	; 0x5b38 <EEPROM_readByte+0x6c>
        return ERROR;
    5b34:	1d 82       	std	Y+5, r1	; 0x05
    5b36:	21 c0       	rjmp	.+66     	; 0x5b7a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((u8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    5b38:	89 81       	ldd	r24, Y+1	; 0x01
    5b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b3c:	80 70       	andi	r24, 0x00	; 0
    5b3e:	97 70       	andi	r25, 0x07	; 7
    5b40:	88 0f       	add	r24, r24
    5b42:	89 2f       	mov	r24, r25
    5b44:	88 1f       	adc	r24, r24
    5b46:	99 0b       	sbc	r25, r25
    5b48:	91 95       	neg	r25
    5b4a:	81 6a       	ori	r24, 0xA1	; 161
    5b4c:	0e 94 53 31 	call	0x62a6	; 0x62a6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    5b50:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5b54:	80 34       	cpi	r24, 0x40	; 64
    5b56:	11 f0       	breq	.+4      	; 0x5b5c <EEPROM_readByte+0x90>
        return ERROR;
    5b58:	1d 82       	std	Y+5, r1	; 0x05
    5b5a:	0f c0       	rjmp	.+30     	; 0x5b7a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    5b5c:	0e 94 7d 31 	call	0x62fa	; 0x62fa <TWI_readByteWithNACK>
    5b60:	eb 81       	ldd	r30, Y+3	; 0x03
    5b62:	fc 81       	ldd	r31, Y+4	; 0x04
    5b64:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    5b66:	0e 94 90 31 	call	0x6320	; 0x6320 <TWI_getStatus>
    5b6a:	88 35       	cpi	r24, 0x58	; 88
    5b6c:	11 f0       	breq	.+4      	; 0x5b72 <EEPROM_readByte+0xa6>
        return ERROR;
    5b6e:	1d 82       	std	Y+5, r1	; 0x05
    5b70:	04 c0       	rjmp	.+8      	; 0x5b7a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    5b72:	0e 94 48 31 	call	0x6290	; 0x6290 <TWI_stop>

    return SUCCESS;
    5b76:	81 e0       	ldi	r24, 0x01	; 1
    5b78:	8d 83       	std	Y+5, r24	; 0x05
    5b7a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5b7c:	0f 90       	pop	r0
    5b7e:	0f 90       	pop	r0
    5b80:	0f 90       	pop	r0
    5b82:	0f 90       	pop	r0
    5b84:	0f 90       	pop	r0
    5b86:	cf 91       	pop	r28
    5b88:	df 91       	pop	r29
    5b8a:	08 95       	ret

00005b8c <EEPROM_writeString>:
u8 EEPROM_writeString(u16 u16addr, const u8 *str)
{
    5b8c:	df 93       	push	r29
    5b8e:	cf 93       	push	r28
    5b90:	cd b7       	in	r28, 0x3d	; 61
    5b92:	de b7       	in	r29, 0x3e	; 62
    5b94:	a0 97       	sbiw	r28, 0x20	; 32
    5b96:	0f b6       	in	r0, 0x3f	; 63
    5b98:	f8 94       	cli
    5b9a:	de bf       	out	0x3e, r29	; 62
    5b9c:	0f be       	out	0x3f, r0	; 63
    5b9e:	cd bf       	out	0x3d, r28	; 61
    5ba0:	9e 8f       	std	Y+30, r25	; 0x1e
    5ba2:	8d 8f       	std	Y+29, r24	; 0x1d
    5ba4:	78 a3       	std	Y+32, r23	; 0x20
    5ba6:	6f 8f       	std	Y+31, r22	; 0x1f
    5ba8:	85 c0       	rjmp	.+266    	; 0x5cb4 <EEPROM_writeString+0x128>
    while (*str)
    {
        /* Write each character in the string to EEPROM */
        EEPROM_writeByte(u16addr++, *str++);
    5baa:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5bac:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5bae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5bb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5bb2:	01 96       	adiw	r24, 0x01	; 1
    5bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    5bb6:	8d 8f       	std	Y+29, r24	; 0x1d
    5bb8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    5bba:	f8 a1       	ldd	r31, Y+32	; 0x20
    5bbc:	40 81       	ld	r20, Z
    5bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5bc0:	98 a1       	ldd	r25, Y+32	; 0x20
    5bc2:	01 96       	adiw	r24, 0x01	; 1
    5bc4:	98 a3       	std	Y+32, r25	; 0x20
    5bc6:	8f 8f       	std	Y+31, r24	; 0x1f
    5bc8:	c9 01       	movw	r24, r18
    5bca:	64 2f       	mov	r22, r20
    5bcc:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <EEPROM_writeByte>
    5bd0:	80 e0       	ldi	r24, 0x00	; 0
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
    5bd4:	a0 e2       	ldi	r26, 0x20	; 32
    5bd6:	b1 e4       	ldi	r27, 0x41	; 65
    5bd8:	89 8f       	std	Y+25, r24	; 0x19
    5bda:	9a 8f       	std	Y+26, r25	; 0x1a
    5bdc:	ab 8f       	std	Y+27, r26	; 0x1b
    5bde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5be0:	69 8d       	ldd	r22, Y+25	; 0x19
    5be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5be8:	20 e0       	ldi	r18, 0x00	; 0
    5bea:	30 e0       	ldi	r19, 0x00	; 0
    5bec:	4a ef       	ldi	r20, 0xFA	; 250
    5bee:	54 e4       	ldi	r21, 0x44	; 68
    5bf0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	cb 01       	movw	r24, r22
    5bf8:	8d 8b       	std	Y+21, r24	; 0x15
    5bfa:	9e 8b       	std	Y+22, r25	; 0x16
    5bfc:	af 8b       	std	Y+23, r26	; 0x17
    5bfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5c00:	6d 89       	ldd	r22, Y+21	; 0x15
    5c02:	7e 89       	ldd	r23, Y+22	; 0x16
    5c04:	8f 89       	ldd	r24, Y+23	; 0x17
    5c06:	98 8d       	ldd	r25, Y+24	; 0x18
    5c08:	20 e0       	ldi	r18, 0x00	; 0
    5c0a:	30 e0       	ldi	r19, 0x00	; 0
    5c0c:	40 e8       	ldi	r20, 0x80	; 128
    5c0e:	5f e3       	ldi	r21, 0x3F	; 63
    5c10:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5c14:	88 23       	and	r24, r24
    5c16:	2c f4       	brge	.+10     	; 0x5c22 <EEPROM_writeString+0x96>
		__ticks = 1;
    5c18:	81 e0       	ldi	r24, 0x01	; 1
    5c1a:	90 e0       	ldi	r25, 0x00	; 0
    5c1c:	9c 8b       	std	Y+20, r25	; 0x14
    5c1e:	8b 8b       	std	Y+19, r24	; 0x13
    5c20:	3f c0       	rjmp	.+126    	; 0x5ca0 <EEPROM_writeString+0x114>
	else if (__tmp > 65535)
    5c22:	6d 89       	ldd	r22, Y+21	; 0x15
    5c24:	7e 89       	ldd	r23, Y+22	; 0x16
    5c26:	8f 89       	ldd	r24, Y+23	; 0x17
    5c28:	98 8d       	ldd	r25, Y+24	; 0x18
    5c2a:	20 e0       	ldi	r18, 0x00	; 0
    5c2c:	3f ef       	ldi	r19, 0xFF	; 255
    5c2e:	4f e7       	ldi	r20, 0x7F	; 127
    5c30:	57 e4       	ldi	r21, 0x47	; 71
    5c32:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5c36:	18 16       	cp	r1, r24
    5c38:	4c f5       	brge	.+82     	; 0x5c8c <EEPROM_writeString+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c3a:	69 8d       	ldd	r22, Y+25	; 0x19
    5c3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5c3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5c40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5c42:	20 e0       	ldi	r18, 0x00	; 0
    5c44:	30 e0       	ldi	r19, 0x00	; 0
    5c46:	40 e2       	ldi	r20, 0x20	; 32
    5c48:	51 e4       	ldi	r21, 0x41	; 65
    5c4a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5c4e:	dc 01       	movw	r26, r24
    5c50:	cb 01       	movw	r24, r22
    5c52:	bc 01       	movw	r22, r24
    5c54:	cd 01       	movw	r24, r26
    5c56:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c5a:	dc 01       	movw	r26, r24
    5c5c:	cb 01       	movw	r24, r22
    5c5e:	9c 8b       	std	Y+20, r25	; 0x14
    5c60:	8b 8b       	std	Y+19, r24	; 0x13
    5c62:	0f c0       	rjmp	.+30     	; 0x5c82 <EEPROM_writeString+0xf6>
    5c64:	88 ec       	ldi	r24, 0xC8	; 200
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	9a 8b       	std	Y+18, r25	; 0x12
    5c6a:	89 8b       	std	Y+17, r24	; 0x11
    5c6c:	89 89       	ldd	r24, Y+17	; 0x11
    5c6e:	9a 89       	ldd	r25, Y+18	; 0x12
    5c70:	01 97       	sbiw	r24, 0x01	; 1
    5c72:	f1 f7       	brne	.-4      	; 0x5c70 <EEPROM_writeString+0xe4>
    5c74:	9a 8b       	std	Y+18, r25	; 0x12
    5c76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c78:	8b 89       	ldd	r24, Y+19	; 0x13
    5c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    5c7c:	01 97       	sbiw	r24, 0x01	; 1
    5c7e:	9c 8b       	std	Y+20, r25	; 0x14
    5c80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c82:	8b 89       	ldd	r24, Y+19	; 0x13
    5c84:	9c 89       	ldd	r25, Y+20	; 0x14
    5c86:	00 97       	sbiw	r24, 0x00	; 0
    5c88:	69 f7       	brne	.-38     	; 0x5c64 <EEPROM_writeString+0xd8>
    5c8a:	14 c0       	rjmp	.+40     	; 0x5cb4 <EEPROM_writeString+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    5c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    5c90:	8f 89       	ldd	r24, Y+23	; 0x17
    5c92:	98 8d       	ldd	r25, Y+24	; 0x18
    5c94:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c98:	dc 01       	movw	r26, r24
    5c9a:	cb 01       	movw	r24, r22
    5c9c:	9c 8b       	std	Y+20, r25	; 0x14
    5c9e:	8b 8b       	std	Y+19, r24	; 0x13
    5ca0:	8b 89       	ldd	r24, Y+19	; 0x13
    5ca2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ca4:	98 8b       	std	Y+16, r25	; 0x10
    5ca6:	8f 87       	std	Y+15, r24	; 0x0f
    5ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    5caa:	98 89       	ldd	r25, Y+16	; 0x10
    5cac:	01 97       	sbiw	r24, 0x01	; 1
    5cae:	f1 f7       	brne	.-4      	; 0x5cac <EEPROM_writeString+0x120>
    5cb0:	98 8b       	std	Y+16, r25	; 0x10
    5cb2:	8f 87       	std	Y+15, r24	; 0x0f

    return SUCCESS;
}
u8 EEPROM_writeString(u16 u16addr, const u8 *str)
{
    while (*str)
    5cb4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    5cb6:	f8 a1       	ldd	r31, Y+32	; 0x20
    5cb8:	80 81       	ld	r24, Z
    5cba:	88 23       	and	r24, r24
    5cbc:	09 f0       	breq	.+2      	; 0x5cc0 <EEPROM_writeString+0x134>
    5cbe:	75 cf       	rjmp	.-278    	; 0x5baa <EEPROM_writeString+0x1e>
        /* Write each character in the string to EEPROM */
        EEPROM_writeByte(u16addr++, *str++);
        _delay_ms(10);
    }
    /* Write null terminator to indicate end of string */
    EEPROM_writeByte(u16addr, '\0');
    5cc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5cc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5cc4:	60 e0       	ldi	r22, 0x00	; 0
    5cc6:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <EEPROM_writeByte>
    5cca:	80 e0       	ldi	r24, 0x00	; 0
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	a0 e2       	ldi	r26, 0x20	; 32
    5cd0:	b1 e4       	ldi	r27, 0x41	; 65
    5cd2:	8b 87       	std	Y+11, r24	; 0x0b
    5cd4:	9c 87       	std	Y+12, r25	; 0x0c
    5cd6:	ad 87       	std	Y+13, r26	; 0x0d
    5cd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ce2:	20 e0       	ldi	r18, 0x00	; 0
    5ce4:	30 e0       	ldi	r19, 0x00	; 0
    5ce6:	4a ef       	ldi	r20, 0xFA	; 250
    5ce8:	54 e4       	ldi	r21, 0x44	; 68
    5cea:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5cee:	dc 01       	movw	r26, r24
    5cf0:	cb 01       	movw	r24, r22
    5cf2:	8f 83       	std	Y+7, r24	; 0x07
    5cf4:	98 87       	std	Y+8, r25	; 0x08
    5cf6:	a9 87       	std	Y+9, r26	; 0x09
    5cf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    5cfc:	78 85       	ldd	r23, Y+8	; 0x08
    5cfe:	89 85       	ldd	r24, Y+9	; 0x09
    5d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d02:	20 e0       	ldi	r18, 0x00	; 0
    5d04:	30 e0       	ldi	r19, 0x00	; 0
    5d06:	40 e8       	ldi	r20, 0x80	; 128
    5d08:	5f e3       	ldi	r21, 0x3F	; 63
    5d0a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5d0e:	88 23       	and	r24, r24
    5d10:	2c f4       	brge	.+10     	; 0x5d1c <EEPROM_writeString+0x190>
		__ticks = 1;
    5d12:	81 e0       	ldi	r24, 0x01	; 1
    5d14:	90 e0       	ldi	r25, 0x00	; 0
    5d16:	9e 83       	std	Y+6, r25	; 0x06
    5d18:	8d 83       	std	Y+5, r24	; 0x05
    5d1a:	3f c0       	rjmp	.+126    	; 0x5d9a <EEPROM_writeString+0x20e>
	else if (__tmp > 65535)
    5d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    5d1e:	78 85       	ldd	r23, Y+8	; 0x08
    5d20:	89 85       	ldd	r24, Y+9	; 0x09
    5d22:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d24:	20 e0       	ldi	r18, 0x00	; 0
    5d26:	3f ef       	ldi	r19, 0xFF	; 255
    5d28:	4f e7       	ldi	r20, 0x7F	; 127
    5d2a:	57 e4       	ldi	r21, 0x47	; 71
    5d2c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5d30:	18 16       	cp	r1, r24
    5d32:	4c f5       	brge	.+82     	; 0x5d86 <EEPROM_writeString+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d3c:	20 e0       	ldi	r18, 0x00	; 0
    5d3e:	30 e0       	ldi	r19, 0x00	; 0
    5d40:	40 e2       	ldi	r20, 0x20	; 32
    5d42:	51 e4       	ldi	r21, 0x41	; 65
    5d44:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5d48:	dc 01       	movw	r26, r24
    5d4a:	cb 01       	movw	r24, r22
    5d4c:	bc 01       	movw	r22, r24
    5d4e:	cd 01       	movw	r24, r26
    5d50:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d54:	dc 01       	movw	r26, r24
    5d56:	cb 01       	movw	r24, r22
    5d58:	9e 83       	std	Y+6, r25	; 0x06
    5d5a:	8d 83       	std	Y+5, r24	; 0x05
    5d5c:	0f c0       	rjmp	.+30     	; 0x5d7c <EEPROM_writeString+0x1f0>
    5d5e:	88 ec       	ldi	r24, 0xC8	; 200
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	9c 83       	std	Y+4, r25	; 0x04
    5d64:	8b 83       	std	Y+3, r24	; 0x03
    5d66:	8b 81       	ldd	r24, Y+3	; 0x03
    5d68:	9c 81       	ldd	r25, Y+4	; 0x04
    5d6a:	01 97       	sbiw	r24, 0x01	; 1
    5d6c:	f1 f7       	brne	.-4      	; 0x5d6a <EEPROM_writeString+0x1de>
    5d6e:	9c 83       	std	Y+4, r25	; 0x04
    5d70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d72:	8d 81       	ldd	r24, Y+5	; 0x05
    5d74:	9e 81       	ldd	r25, Y+6	; 0x06
    5d76:	01 97       	sbiw	r24, 0x01	; 1
    5d78:	9e 83       	std	Y+6, r25	; 0x06
    5d7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d80:	00 97       	sbiw	r24, 0x00	; 0
    5d82:	69 f7       	brne	.-38     	; 0x5d5e <EEPROM_writeString+0x1d2>
    5d84:	14 c0       	rjmp	.+40     	; 0x5dae <EEPROM_writeString+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d86:	6f 81       	ldd	r22, Y+7	; 0x07
    5d88:	78 85       	ldd	r23, Y+8	; 0x08
    5d8a:	89 85       	ldd	r24, Y+9	; 0x09
    5d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d8e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d92:	dc 01       	movw	r26, r24
    5d94:	cb 01       	movw	r24, r22
    5d96:	9e 83       	std	Y+6, r25	; 0x06
    5d98:	8d 83       	std	Y+5, r24	; 0x05
    5d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    5d9e:	9a 83       	std	Y+2, r25	; 0x02
    5da0:	89 83       	std	Y+1, r24	; 0x01
    5da2:	89 81       	ldd	r24, Y+1	; 0x01
    5da4:	9a 81       	ldd	r25, Y+2	; 0x02
    5da6:	01 97       	sbiw	r24, 0x01	; 1
    5da8:	f1 f7       	brne	.-4      	; 0x5da6 <EEPROM_writeString+0x21a>
    5daa:	9a 83       	std	Y+2, r25	; 0x02
    5dac:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
    return SUCCESS;
    5dae:	81 e0       	ldi	r24, 0x01	; 1
}
    5db0:	a0 96       	adiw	r28, 0x20	; 32
    5db2:	0f b6       	in	r0, 0x3f	; 63
    5db4:	f8 94       	cli
    5db6:	de bf       	out	0x3e, r29	; 62
    5db8:	0f be       	out	0x3f, r0	; 63
    5dba:	cd bf       	out	0x3d, r28	; 61
    5dbc:	cf 91       	pop	r28
    5dbe:	df 91       	pop	r29
    5dc0:	08 95       	ret

00005dc2 <EEPROM_readString>:

/*
 * Read String from EEPROM at a specific address
 */
u8 EEPROM_readString(u16 u16addr, u8 *str, u8 maxLen)
{
    5dc2:	df 93       	push	r29
    5dc4:	cf 93       	push	r28
    5dc6:	cd b7       	in	r28, 0x3d	; 61
    5dc8:	de b7       	in	r29, 0x3e	; 62
    5dca:	28 97       	sbiw	r28, 0x08	; 8
    5dcc:	0f b6       	in	r0, 0x3f	; 63
    5dce:	f8 94       	cli
    5dd0:	de bf       	out	0x3e, r29	; 62
    5dd2:	0f be       	out	0x3f, r0	; 63
    5dd4:	cd bf       	out	0x3d, r28	; 61
    5dd6:	9c 83       	std	Y+4, r25	; 0x04
    5dd8:	8b 83       	std	Y+3, r24	; 0x03
    5dda:	7e 83       	std	Y+6, r23	; 0x06
    5ddc:	6d 83       	std	Y+5, r22	; 0x05
    5dde:	4f 83       	std	Y+7, r20	; 0x07
    u8 i = 0;
    5de0:	19 82       	std	Y+1, r1	; 0x01
    u8 data;

    /* Read each character from EEPROM until null terminator or maxLen */
    for (i = 0; i < maxLen - 1; i++)
    5de2:	19 82       	std	Y+1, r1	; 0x01
    5de4:	25 c0       	rjmp	.+74     	; 0x5e30 <EEPROM_readString+0x6e>
    {
        if (EEPROM_readByte(u16addr++, &data) != SUCCESS)
    5de6:	4b 81       	ldd	r20, Y+3	; 0x03
    5de8:	5c 81       	ldd	r21, Y+4	; 0x04
    5dea:	8b 81       	ldd	r24, Y+3	; 0x03
    5dec:	9c 81       	ldd	r25, Y+4	; 0x04
    5dee:	01 96       	adiw	r24, 0x01	; 1
    5df0:	9c 83       	std	Y+4, r25	; 0x04
    5df2:	8b 83       	std	Y+3, r24	; 0x03
    5df4:	9e 01       	movw	r18, r28
    5df6:	2e 5f       	subi	r18, 0xFE	; 254
    5df8:	3f 4f       	sbci	r19, 0xFF	; 255
    5dfa:	ca 01       	movw	r24, r20
    5dfc:	b9 01       	movw	r22, r18
    5dfe:	0e 94 66 2d 	call	0x5acc	; 0x5acc <EEPROM_readByte>
    5e02:	81 30       	cpi	r24, 0x01	; 1
    5e04:	11 f0       	breq	.+4      	; 0x5e0a <EEPROM_readString+0x48>
        {
            return ERROR;  // Return error if read operation fails
    5e06:	18 86       	std	Y+8, r1	; 0x08
    5e08:	28 c0       	rjmp	.+80     	; 0x5e5a <EEPROM_readString+0x98>
        }
        str[i] = data;
    5e0a:	89 81       	ldd	r24, Y+1	; 0x01
    5e0c:	28 2f       	mov	r18, r24
    5e0e:	30 e0       	ldi	r19, 0x00	; 0
    5e10:	8d 81       	ldd	r24, Y+5	; 0x05
    5e12:	9e 81       	ldd	r25, Y+6	; 0x06
    5e14:	fc 01       	movw	r30, r24
    5e16:	e2 0f       	add	r30, r18
    5e18:	f3 1f       	adc	r31, r19
    5e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e1c:	80 83       	st	Z, r24
        if (data == '\0')
    5e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5e20:	88 23       	and	r24, r24
    5e22:	19 f4       	brne	.+6      	; 0x5e2a <EEPROM_readString+0x68>
        {
            return SUCCESS;  // Stop if null terminator is found
    5e24:	81 e0       	ldi	r24, 0x01	; 1
    5e26:	88 87       	std	Y+8, r24	; 0x08
    5e28:	18 c0       	rjmp	.+48     	; 0x5e5a <EEPROM_readString+0x98>
{
    u8 i = 0;
    u8 data;

    /* Read each character from EEPROM until null terminator or maxLen */
    for (i = 0; i < maxLen - 1; i++)
    5e2a:	89 81       	ldd	r24, Y+1	; 0x01
    5e2c:	8f 5f       	subi	r24, 0xFF	; 255
    5e2e:	89 83       	std	Y+1, r24	; 0x01
    5e30:	89 81       	ldd	r24, Y+1	; 0x01
    5e32:	28 2f       	mov	r18, r24
    5e34:	30 e0       	ldi	r19, 0x00	; 0
    5e36:	8f 81       	ldd	r24, Y+7	; 0x07
    5e38:	88 2f       	mov	r24, r24
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	01 97       	sbiw	r24, 0x01	; 1
    5e3e:	28 17       	cp	r18, r24
    5e40:	39 07       	cpc	r19, r25
    5e42:	8c f2       	brlt	.-94     	; 0x5de6 <EEPROM_readString+0x24>
        if (data == '\0')
        {
            return SUCCESS;  // Stop if null terminator is found
        }
    }
    str[i] = '\0';  // Ensure null termination if maxLen limit is reached
    5e44:	89 81       	ldd	r24, Y+1	; 0x01
    5e46:	28 2f       	mov	r18, r24
    5e48:	30 e0       	ldi	r19, 0x00	; 0
    5e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5e4e:	fc 01       	movw	r30, r24
    5e50:	e2 0f       	add	r30, r18
    5e52:	f3 1f       	adc	r31, r19
    5e54:	10 82       	st	Z, r1
    return SUCCESS;
    5e56:	81 e0       	ldi	r24, 0x01	; 1
    5e58:	88 87       	std	Y+8, r24	; 0x08
    5e5a:	88 85       	ldd	r24, Y+8	; 0x08
}
    5e5c:	28 96       	adiw	r28, 0x08	; 8
    5e5e:	0f b6       	in	r0, 0x3f	; 63
    5e60:	f8 94       	cli
    5e62:	de bf       	out	0x3e, r29	; 62
    5e64:	0f be       	out	0x3f, r0	; 63
    5e66:	cd bf       	out	0x3d, r28	; 61
    5e68:	cf 91       	pop	r28
    5e6a:	df 91       	pop	r29
    5e6c:	08 95       	ret

00005e6e <main>:
void change_pass(void);
void timer_handler(void);
void lock_system(void);

/* Main Function */
void main() {
    5e6e:	df 93       	push	r29
    5e70:	cf 93       	push	r28
    5e72:	00 d0       	rcall	.+0      	; 0x5e74 <main+0x6>
    5e74:	00 d0       	rcall	.+0      	; 0x5e76 <main+0x8>
    5e76:	0f 92       	push	r0
    5e78:	cd b7       	in	r28, 0x3d	; 61
    5e7a:	de b7       	in	r29, 0x3e	; 62
	init();			//Initialization
    5e7c:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <init>

	change_pass();  // Ensure a password is set
    5e80:	0e 94 b9 30 	call	0x6172	; 0x6172 <change_pass>

	// Main control loop
	while (1) {
		u8 operation = recieve_Byte();	// Receive operation command from HMI ECU
    5e84:	0e 94 08 30 	call	0x6010	; 0x6010 <recieve_Byte>
    5e88:	8b 83       	std	Y+3, r24	; 0x03

		switch (operation) {
    5e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    5e8c:	28 2f       	mov	r18, r24
    5e8e:	30 e0       	ldi	r19, 0x00	; 0
    5e90:	3d 83       	std	Y+5, r19	; 0x05
    5e92:	2c 83       	std	Y+4, r18	; 0x04
    5e94:	8c 81       	ldd	r24, Y+4	; 0x04
    5e96:	9d 81       	ldd	r25, Y+5	; 0x05
    5e98:	8b 32       	cpi	r24, 0x2B	; 43
    5e9a:	91 05       	cpc	r25, r1
    5e9c:	39 f0       	breq	.+14     	; 0x5eac <main+0x3e>
    5e9e:	2c 81       	ldd	r18, Y+4	; 0x04
    5ea0:	3d 81       	ldd	r19, Y+5	; 0x05
    5ea2:	2d 32       	cpi	r18, 0x2D	; 45
    5ea4:	31 05       	cpc	r19, r1
    5ea6:	09 f4       	brne	.+2      	; 0x5eaa <main+0x3c>
    5ea8:	68 c0       	rjmp	.+208    	; 0x5f7a <main+0x10c>
    5eaa:	ec cf       	rjmp	.-40     	; 0x5e84 <main+0x16>
		case OPEN_DOOR:	// Handle door opening functionality
			for (u8 i = 0; i < 3; i++) {
    5eac:	1a 82       	std	Y+2, r1	; 0x02
    5eae:	60 c0       	rjmp	.+192    	; 0x5f70 <main+0x102>

				receive_Password(PASS);	// Receive password from HMI ECU
    5eb0:	8d ea       	ldi	r24, 0xAD	; 173
    5eb2:	91 e0       	ldi	r25, 0x01	; 1
    5eb4:	0e 94 52 30 	call	0x60a4	; 0x60a4 <receive_Password>

				if (check_pass(SAVED_PASS, PASS) == true) {	// Check if password is correct
    5eb8:	87 eb       	ldi	r24, 0xB7	; 183
    5eba:	91 e0       	ldi	r25, 0x01	; 1
    5ebc:	2d ea       	ldi	r18, 0xAD	; 173
    5ebe:	31 e0       	ldi	r19, 0x01	; 1
    5ec0:	b9 01       	movw	r22, r18
    5ec2:	0e 94 84 30 	call	0x6108	; 0x6108 <check_pass>
    5ec6:	81 30       	cpi	r24, 0x01	; 1
    5ec8:	09 f0       	breq	.+2      	; 0x5ecc <main+0x5e>
    5eca:	41 c0       	rjmp	.+130    	; 0x5f4e <main+0xe0>
					attempts = 0;
    5ecc:	10 92 ec 01 	sts	0x01EC, r1
					send_Byte(OK);	// Send confirmation
    5ed0:	80 e0       	ldi	r24, 0x00	; 0
    5ed2:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
					time = 0;
    5ed6:	10 92 ed 01 	sts	0x01ED, r1
    5eda:	09 c0       	rjmp	.+18     	; 0x5eee <main+0x80>

					// Rotate motor to open door
					while (time < 15) {
						send_Byte(OP_MOTOR);
    5edc:	8a e0       	ldi	r24, 0x0A	; 10
    5ede:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
						DcMotor_Rotate(&motor, MOTOR_CW, 100);
    5ee2:	89 ea       	ldi	r24, 0xA9	; 169
    5ee4:	91 e0       	ldi	r25, 0x01	; 1
    5ee6:	60 e0       	ldi	r22, 0x00	; 0
    5ee8:	44 e6       	ldi	r20, 0x64	; 100
    5eea:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <DcMotor_Rotate>
					attempts = 0;
					send_Byte(OK);	// Send confirmation
					time = 0;

					// Rotate motor to open door
					while (time < 15) {
    5eee:	80 91 ed 01 	lds	r24, 0x01ED
    5ef2:	8f 30       	cpi	r24, 0x0F	; 15
    5ef4:	98 f3       	brcs	.-26     	; 0x5edc <main+0x6e>
						DcMotor_Rotate(&motor, MOTOR_CW, 100);

					}

					// Handle PIR sensor for detecting people
					if (PIR_getState(&Config_Ptr_PIR)) {
    5ef6:	8b ea       	ldi	r24, 0xAB	; 171
    5ef8:	91 e0       	ldi	r25, 0x01	; 1
    5efa:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <PIR_getState>
    5efe:	88 23       	and	r24, r24
    5f00:	71 f0       	breq	.+28     	; 0x5f1e <main+0xb0>
    5f02:	07 c0       	rjmp	.+14     	; 0x5f12 <main+0xa4>

						while (PIR_getState(&Config_Ptr_PIR)) {
							send_Byte(WAITING);
    5f04:	8c ec       	ldi	r24, 0xCC	; 204
    5f06:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
							DcMotor_STOP(&motor);
    5f0a:	89 ea       	ldi	r24, 0xA9	; 169
    5f0c:	91 e0       	ldi	r25, 0x01	; 1
    5f0e:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <DcMotor_STOP>
					}

					// Handle PIR sensor for detecting people
					if (PIR_getState(&Config_Ptr_PIR)) {

						while (PIR_getState(&Config_Ptr_PIR)) {
    5f12:	8b ea       	ldi	r24, 0xAB	; 171
    5f14:	91 e0       	ldi	r25, 0x01	; 1
    5f16:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <PIR_getState>
    5f1a:	88 23       	and	r24, r24
    5f1c:	99 f7       	brne	.-26     	; 0x5f04 <main+0x96>

						}
					}

					// Rotate motor to close door
					time = 0;
    5f1e:	10 92 ed 01 	sts	0x01ED, r1
    5f22:	09 c0       	rjmp	.+18     	; 0x5f36 <main+0xc8>
					while (time < 15) {
						send_Byte(CL_MOTOR);
    5f24:	80 ea       	ldi	r24, 0xA0	; 160
    5f26:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
						DcMotor_Rotate(&motor, MOTOR_ACW, 100);
    5f2a:	89 ea       	ldi	r24, 0xA9	; 169
    5f2c:	91 e0       	ldi	r25, 0x01	; 1
    5f2e:	61 e0       	ldi	r22, 0x01	; 1
    5f30:	44 e6       	ldi	r20, 0x64	; 100
    5f32:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <DcMotor_Rotate>
						}
					}

					// Rotate motor to close door
					time = 0;
					while (time < 15) {
    5f36:	80 91 ed 01 	lds	r24, 0x01ED
    5f3a:	8f 30       	cpi	r24, 0x0F	; 15
    5f3c:	98 f3       	brcs	.-26     	; 0x5f24 <main+0xb6>
						send_Byte(CL_MOTOR);
						DcMotor_Rotate(&motor, MOTOR_ACW, 100);
					}
					DcMotor_STOP(&motor);	// Stop motor after operation
    5f3e:	89 ea       	ldi	r24, 0xA9	; 169
    5f40:	91 e0       	ldi	r25, 0x01	; 1
    5f42:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <DcMotor_STOP>
					send_Byte(0);			// Indicate door operation is complete
    5f46:	80 e0       	ldi	r24, 0x00	; 0
    5f48:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
    5f4c:	9b cf       	rjmp	.-202    	; 0x5e84 <main+0x16>
					break;

				} else {
					send_Byte(NOK);			// Send rejection
    5f4e:	81 e0       	ldi	r24, 0x01	; 1
    5f50:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
					attempts++;
    5f54:	80 91 ec 01 	lds	r24, 0x01EC
    5f58:	8f 5f       	subi	r24, 0xFF	; 255
    5f5a:	80 93 ec 01 	sts	0x01EC, r24
					if (attempts >= 3) {
    5f5e:	80 91 ec 01 	lds	r24, 0x01EC
    5f62:	83 30       	cpi	r24, 0x03	; 3
    5f64:	10 f0       	brcs	.+4      	; 0x5f6a <main+0xfc>
						lock_system();		 // Lock system after 3 failed attempts
    5f66:	0e 94 fd 30 	call	0x61fa	; 0x61fa <lock_system>
	while (1) {
		u8 operation = recieve_Byte();	// Receive operation command from HMI ECU

		switch (operation) {
		case OPEN_DOOR:	// Handle door opening functionality
			for (u8 i = 0; i < 3; i++) {
    5f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    5f6c:	8f 5f       	subi	r24, 0xFF	; 255
    5f6e:	8a 83       	std	Y+2, r24	; 0x02
    5f70:	8a 81       	ldd	r24, Y+2	; 0x02
    5f72:	83 30       	cpi	r24, 0x03	; 3
    5f74:	08 f4       	brcc	.+2      	; 0x5f78 <main+0x10a>
    5f76:	9c cf       	rjmp	.-200    	; 0x5eb0 <main+0x42>
    5f78:	85 cf       	rjmp	.-246    	; 0x5e84 <main+0x16>
				}
			}
			break;

		case CHANGE_PASS:	 // Handle password change functionality
			for (u8 i = 0; i < 3; i++) {
    5f7a:	19 82       	std	Y+1, r1	; 0x01
    5f7c:	27 c0       	rjmp	.+78     	; 0x5fcc <main+0x15e>
				receive_Password(RE_PASS);	// Receive the old password
    5f7e:	82 eb       	ldi	r24, 0xB2	; 178
    5f80:	91 e0       	ldi	r25, 0x01	; 1
    5f82:	0e 94 52 30 	call	0x60a4	; 0x60a4 <receive_Password>

				if (check_pass(SAVED_PASS, RE_PASS) == true) {// Check if old password matches
    5f86:	87 eb       	ldi	r24, 0xB7	; 183
    5f88:	91 e0       	ldi	r25, 0x01	; 1
    5f8a:	22 eb       	ldi	r18, 0xB2	; 178
    5f8c:	31 e0       	ldi	r19, 0x01	; 1
    5f8e:	b9 01       	movw	r22, r18
    5f90:	0e 94 84 30 	call	0x6108	; 0x6108 <check_pass>
    5f94:	81 30       	cpi	r24, 0x01	; 1
    5f96:	41 f4       	brne	.+16     	; 0x5fa8 <main+0x13a>
					send_Byte(OK);
    5f98:	80 e0       	ldi	r24, 0x00	; 0
    5f9a:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
					attempts=0;
    5f9e:	10 92 ec 01 	sts	0x01EC, r1
					change_pass();	// Allow user to change password
    5fa2:	0e 94 b9 30 	call	0x6172	; 0x6172 <change_pass>
    5fa6:	6e cf       	rjmp	.-292    	; 0x5e84 <main+0x16>
					break;
				} else {
					send_Byte(NOK);	// Send rejection
    5fa8:	81 e0       	ldi	r24, 0x01	; 1
    5faa:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
					attempts++;
    5fae:	80 91 ec 01 	lds	r24, 0x01EC
    5fb2:	8f 5f       	subi	r24, 0xFF	; 255
    5fb4:	80 93 ec 01 	sts	0x01EC, r24
					if (attempts >= 3) {
    5fb8:	80 91 ec 01 	lds	r24, 0x01EC
    5fbc:	83 30       	cpi	r24, 0x03	; 3
    5fbe:	18 f0       	brcs	.+6      	; 0x5fc6 <main+0x158>
						lock_system();    // Lock system after 3 failed attempts
    5fc0:	0e 94 fd 30 	call	0x61fa	; 0x61fa <lock_system>
    5fc4:	5f cf       	rjmp	.-322    	; 0x5e84 <main+0x16>
				}
			}
			break;

		case CHANGE_PASS:	 // Handle password change functionality
			for (u8 i = 0; i < 3; i++) {
    5fc6:	89 81       	ldd	r24, Y+1	; 0x01
    5fc8:	8f 5f       	subi	r24, 0xFF	; 255
    5fca:	89 83       	std	Y+1, r24	; 0x01
    5fcc:	89 81       	ldd	r24, Y+1	; 0x01
    5fce:	83 30       	cpi	r24, 0x03	; 3
    5fd0:	b0 f2       	brcs	.-84     	; 0x5f7e <main+0x110>
    5fd2:	58 cf       	rjmp	.-336    	; 0x5e84 <main+0x16>

00005fd4 <init>:
		}

	}
}
// Initialization for the system
void init() {
    5fd4:	df 93       	push	r29
    5fd6:	cf 93       	push	r28
    5fd8:	cd b7       	in	r28, 0x3d	; 61
    5fda:	de b7       	in	r29, 0x3e	; 62
		 //Initialize Buzzer
	USART_voidInit();			 // Initialize UART communication
    5fdc:	0e 94 14 2a 	call	0x5428	; 0x5428 <USART_voidInit>
	TIMER1_voidInit();			 // Initialize Timer
    5fe0:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <TIMER1_voidInit>
	TIMER_u8SetCallBack(timer_handler, TIMER1_CTCA_VECTOR_ID);	// Set timer callback
    5fe4:	81 ef       	ldi	r24, 0xF1	; 241
    5fe6:	90 e3       	ldi	r25, 0x30	; 48
    5fe8:	67 e0       	ldi	r22, 0x07	; 7
    5fea:	0e 94 57 28 	call	0x50ae	; 0x50ae <TIMER_u8SetCallBack>
	PIR_init(&Config_Ptr_PIR);	 // Initialize PIR sensor
    5fee:	8b ea       	ldi	r24, 0xAB	; 171
    5ff0:	91 e0       	ldi	r25, 0x01	; 1
    5ff2:	0e 94 e7 25 	call	0x4bce	; 0x4bce <PIR_init>
	DcMotor_init(&motor);  		 // Initialize DC motor
    5ff6:	89 ea       	ldi	r24, 0xA9	; 169
    5ff8:	91 e0       	ldi	r25, 0x01	; 1
    5ffa:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <DcMotor_init>
	Buzzer_init(&BUZZER);        // Initialize Buzzer
    5ffe:	88 e6       	ldi	r24, 0x68	; 104
    6000:	91 e0       	ldi	r25, 0x01	; 1
    6002:	0e 94 07 13 	call	0x260e	; 0x260e <Buzzer_init>
	GIE_VoidEnable();			 // Enable global interrupts
    6006:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <GIE_VoidEnable>
}
    600a:	cf 91       	pop	r28
    600c:	df 91       	pop	r29
    600e:	08 95       	ret

00006010 <recieve_Byte>:

/* Function to receive a single byte over UART */
u8 recieve_Byte(void) {
    6010:	df 93       	push	r29
    6012:	cf 93       	push	r28
    6014:	00 d0       	rcall	.+0      	; 0x6016 <recieve_Byte+0x6>
    6016:	cd b7       	in	r28, 0x3d	; 61
    6018:	de b7       	in	r29, 0x3e	; 62
	u8 byte;
	u8 k;
	USART_u8RecevieData(&k);
    601a:	ce 01       	movw	r24, r28
    601c:	02 96       	adiw	r24, 0x02	; 2
    601e:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
    6022:	04 c0       	rjmp	.+8      	; 0x602c <recieve_Byte+0x1c>
	while (k != READY) {
		USART_u8RecevieData(&k);
    6024:	ce 01       	movw	r24, r28
    6026:	02 96       	adiw	r24, 0x02	; 2
    6028:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
/* Function to receive a single byte over UART */
u8 recieve_Byte(void) {
	u8 byte;
	u8 k;
	USART_u8RecevieData(&k);
	while (k != READY) {
    602c:	8a 81       	ldd	r24, Y+2	; 0x02
    602e:	8a 3a       	cpi	r24, 0xAA	; 170
    6030:	c9 f7       	brne	.-14     	; 0x6024 <recieve_Byte+0x14>
		USART_u8RecevieData(&k);
	}
	USART_u8SendData(READY);
    6032:	8a ea       	ldi	r24, 0xAA	; 170
    6034:	0e 94 81 2a 	call	0x5502	; 0x5502 <USART_u8SendData>
	USART_u8RecevieData(&byte);
    6038:	ce 01       	movw	r24, r28
    603a:	01 96       	adiw	r24, 0x01	; 1
    603c:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
	USART_u8SendData(DONE);
    6040:	8f ef       	ldi	r24, 0xFF	; 255
    6042:	0e 94 81 2a 	call	0x5502	; 0x5502 <USART_u8SendData>
	return byte;
    6046:	89 81       	ldd	r24, Y+1	; 0x01
}
    6048:	0f 90       	pop	r0
    604a:	0f 90       	pop	r0
    604c:	cf 91       	pop	r28
    604e:	df 91       	pop	r29
    6050:	08 95       	ret

00006052 <send_Byte>:

/* Function to send a single byte over UART */
void send_Byte(u8 byte) {
    6052:	df 93       	push	r29
    6054:	cf 93       	push	r28
    6056:	00 d0       	rcall	.+0      	; 0x6058 <send_Byte+0x6>
    6058:	cd b7       	in	r28, 0x3d	; 61
    605a:	de b7       	in	r29, 0x3e	; 62
    605c:	8a 83       	std	Y+2, r24	; 0x02
	u8 k;
	USART_u8SendData(READY);
    605e:	8a ea       	ldi	r24, 0xAA	; 170
    6060:	0e 94 81 2a 	call	0x5502	; 0x5502 <USART_u8SendData>
	USART_u8RecevieData(&k);
    6064:	ce 01       	movw	r24, r28
    6066:	01 96       	adiw	r24, 0x01	; 1
    6068:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
    606c:	04 c0       	rjmp	.+8      	; 0x6076 <send_Byte+0x24>
	while (k != READY) {
		USART_u8RecevieData(&k);
    606e:	ce 01       	movw	r24, r28
    6070:	01 96       	adiw	r24, 0x01	; 1
    6072:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
/* Function to send a single byte over UART */
void send_Byte(u8 byte) {
	u8 k;
	USART_u8SendData(READY);
	USART_u8RecevieData(&k);
	while (k != READY) {
    6076:	89 81       	ldd	r24, Y+1	; 0x01
    6078:	8a 3a       	cpi	r24, 0xAA	; 170
    607a:	c9 f7       	brne	.-14     	; 0x606e <send_Byte+0x1c>
		USART_u8RecevieData(&k);
	}
	USART_u8SendData(byte);
    607c:	8a 81       	ldd	r24, Y+2	; 0x02
    607e:	0e 94 81 2a 	call	0x5502	; 0x5502 <USART_u8SendData>
	USART_u8RecevieData(&k);
    6082:	ce 01       	movw	r24, r28
    6084:	01 96       	adiw	r24, 0x01	; 1
    6086:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
    608a:	04 c0       	rjmp	.+8      	; 0x6094 <send_Byte+0x42>
	while (k != DONE) {
		USART_u8RecevieData(&k);
    608c:	ce 01       	movw	r24, r28
    608e:	01 96       	adiw	r24, 0x01	; 1
    6090:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
	while (k != READY) {
		USART_u8RecevieData(&k);
	}
	USART_u8SendData(byte);
	USART_u8RecevieData(&k);
	while (k != DONE) {
    6094:	89 81       	ldd	r24, Y+1	; 0x01
    6096:	8f 3f       	cpi	r24, 0xFF	; 255
    6098:	c9 f7       	brne	.-14     	; 0x608c <send_Byte+0x3a>
		USART_u8RecevieData(&k);
	}
}
    609a:	0f 90       	pop	r0
    609c:	0f 90       	pop	r0
    609e:	cf 91       	pop	r28
    60a0:	df 91       	pop	r29
    60a2:	08 95       	ret

000060a4 <receive_Password>:

/* Function to receive a password array over UART */
void receive_Password(u8 *a_PasswordArray) {
    60a4:	df 93       	push	r29
    60a6:	cf 93       	push	r28
    60a8:	00 d0       	rcall	.+0      	; 0x60aa <receive_Password+0x6>
    60aa:	00 d0       	rcall	.+0      	; 0x60ac <receive_Password+0x8>
    60ac:	cd b7       	in	r28, 0x3d	; 61
    60ae:	de b7       	in	r29, 0x3e	; 62
    60b0:	9c 83       	std	Y+4, r25	; 0x04
    60b2:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    60b4:	19 82       	std	Y+1, r1	; 0x01
	u8 k;
	USART_u8RecevieData(&k);
    60b6:	ce 01       	movw	r24, r28
    60b8:	02 96       	adiw	r24, 0x02	; 2
    60ba:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
    60be:	04 c0       	rjmp	.+8      	; 0x60c8 <receive_Password+0x24>
	while (k != READY) {
		USART_u8RecevieData(&k);
    60c0:	ce 01       	movw	r24, r28
    60c2:	02 96       	adiw	r24, 0x02	; 2
    60c4:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
/* Function to receive a password array over UART */
void receive_Password(u8 *a_PasswordArray) {
	u8 i = 0;
	u8 k;
	USART_u8RecevieData(&k);
	while (k != READY) {
    60c8:	8a 81       	ldd	r24, Y+2	; 0x02
    60ca:	8a 3a       	cpi	r24, 0xAA	; 170
    60cc:	c9 f7       	brne	.-14     	; 0x60c0 <receive_Password+0x1c>
		USART_u8RecevieData(&k);

	}
	USART_u8SendData(READY);
    60ce:	8a ea       	ldi	r24, 0xAA	; 170
    60d0:	0e 94 81 2a 	call	0x5502	; 0x5502 <USART_u8SendData>
    60d4:	0c c0       	rjmp	.+24     	; 0x60ee <receive_Password+0x4a>
	while (i < PASS_SIZE) {
		USART_u8RecevieData(&a_PasswordArray[i]);
    60d6:	89 81       	ldd	r24, Y+1	; 0x01
    60d8:	28 2f       	mov	r18, r24
    60da:	30 e0       	ldi	r19, 0x00	; 0
    60dc:	8b 81       	ldd	r24, Y+3	; 0x03
    60de:	9c 81       	ldd	r25, Y+4	; 0x04
    60e0:	82 0f       	add	r24, r18
    60e2:	93 1f       	adc	r25, r19
    60e4:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <USART_u8RecevieData>
		i++;
    60e8:	89 81       	ldd	r24, Y+1	; 0x01
    60ea:	8f 5f       	subi	r24, 0xFF	; 255
    60ec:	89 83       	std	Y+1, r24	; 0x01
	while (k != READY) {
		USART_u8RecevieData(&k);

	}
	USART_u8SendData(READY);
	while (i < PASS_SIZE) {
    60ee:	89 81       	ldd	r24, Y+1	; 0x01
    60f0:	85 30       	cpi	r24, 0x05	; 5
    60f2:	88 f3       	brcs	.-30     	; 0x60d6 <receive_Password+0x32>
		USART_u8RecevieData(&a_PasswordArray[i]);
		i++;
	}
	USART_u8SendData(DONE);
    60f4:	8f ef       	ldi	r24, 0xFF	; 255
    60f6:	0e 94 81 2a 	call	0x5502	; 0x5502 <USART_u8SendData>
}
    60fa:	0f 90       	pop	r0
    60fc:	0f 90       	pop	r0
    60fe:	0f 90       	pop	r0
    6100:	0f 90       	pop	r0
    6102:	cf 91       	pop	r28
    6104:	df 91       	pop	r29
    6106:	08 95       	ret

00006108 <check_pass>:

/* Function to check if two passwords match */
u8 check_pass(u8 *pass1, u8 *pass2) {
    6108:	df 93       	push	r29
    610a:	cf 93       	push	r28
    610c:	00 d0       	rcall	.+0      	; 0x610e <check_pass+0x6>
    610e:	00 d0       	rcall	.+0      	; 0x6110 <check_pass+0x8>
    6110:	00 d0       	rcall	.+0      	; 0x6112 <check_pass+0xa>
    6112:	cd b7       	in	r28, 0x3d	; 61
    6114:	de b7       	in	r29, 0x3e	; 62
    6116:	9b 83       	std	Y+3, r25	; 0x03
    6118:	8a 83       	std	Y+2, r24	; 0x02
    611a:	7d 83       	std	Y+5, r23	; 0x05
    611c:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for (i = 0; i < PASS_SIZE; i++) {
    611e:	19 82       	std	Y+1, r1	; 0x01
    6120:	19 c0       	rjmp	.+50     	; 0x6154 <check_pass+0x4c>
		if (pass1[i] != pass2[i]) {
    6122:	89 81       	ldd	r24, Y+1	; 0x01
    6124:	28 2f       	mov	r18, r24
    6126:	30 e0       	ldi	r19, 0x00	; 0
    6128:	8a 81       	ldd	r24, Y+2	; 0x02
    612a:	9b 81       	ldd	r25, Y+3	; 0x03
    612c:	fc 01       	movw	r30, r24
    612e:	e2 0f       	add	r30, r18
    6130:	f3 1f       	adc	r31, r19
    6132:	40 81       	ld	r20, Z
    6134:	89 81       	ldd	r24, Y+1	; 0x01
    6136:	28 2f       	mov	r18, r24
    6138:	30 e0       	ldi	r19, 0x00	; 0
    613a:	8c 81       	ldd	r24, Y+4	; 0x04
    613c:	9d 81       	ldd	r25, Y+5	; 0x05
    613e:	fc 01       	movw	r30, r24
    6140:	e2 0f       	add	r30, r18
    6142:	f3 1f       	adc	r31, r19
    6144:	80 81       	ld	r24, Z
    6146:	48 17       	cp	r20, r24
    6148:	11 f0       	breq	.+4      	; 0x614e <check_pass+0x46>
			return false;  // Passwords do not match
    614a:	1e 82       	std	Y+6, r1	; 0x06
    614c:	08 c0       	rjmp	.+16     	; 0x615e <check_pass+0x56>
}

/* Function to check if two passwords match */
u8 check_pass(u8 *pass1, u8 *pass2) {
	u8 i;
	for (i = 0; i < PASS_SIZE; i++) {
    614e:	89 81       	ldd	r24, Y+1	; 0x01
    6150:	8f 5f       	subi	r24, 0xFF	; 255
    6152:	89 83       	std	Y+1, r24	; 0x01
    6154:	89 81       	ldd	r24, Y+1	; 0x01
    6156:	85 30       	cpi	r24, 0x05	; 5
    6158:	20 f3       	brcs	.-56     	; 0x6122 <check_pass+0x1a>
		if (pass1[i] != pass2[i]) {
			return false;  // Passwords do not match
		}
	}
	return true;
    615a:	81 e0       	ldi	r24, 0x01	; 1
    615c:	8e 83       	std	Y+6, r24	; 0x06
    615e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    6160:	26 96       	adiw	r28, 0x06	; 6
    6162:	0f b6       	in	r0, 0x3f	; 63
    6164:	f8 94       	cli
    6166:	de bf       	out	0x3e, r29	; 62
    6168:	0f be       	out	0x3f, r0	; 63
    616a:	cd bf       	out	0x3d, r28	; 61
    616c:	cf 91       	pop	r28
    616e:	df 91       	pop	r29
    6170:	08 95       	ret

00006172 <change_pass>:

/* Function to change the password */
void change_pass(void) {
    6172:	df 93       	push	r29
    6174:	cf 93       	push	r28
    6176:	cd b7       	in	r28, 0x3d	; 61
    6178:	de b7       	in	r29, 0x3e	; 62
    617a:	22 c0       	rjmp	.+68     	; 0x61c0 <change_pass+0x4e>
	while (IS_PASS_CREATE == 0) {
		receive_Password(PASS);      // Receive new password
    617c:	8d ea       	ldi	r24, 0xAD	; 173
    617e:	91 e0       	ldi	r25, 0x01	; 1
    6180:	0e 94 52 30 	call	0x60a4	; 0x60a4 <receive_Password>
		receive_Password(RE_PASS);   // Receive re-entered password
    6184:	82 eb       	ldi	r24, 0xB2	; 178
    6186:	91 e0       	ldi	r25, 0x01	; 1
    6188:	0e 94 52 30 	call	0x60a4	; 0x60a4 <receive_Password>
		if (check_pass(PASS, RE_PASS)) {
    618c:	8d ea       	ldi	r24, 0xAD	; 173
    618e:	91 e0       	ldi	r25, 0x01	; 1
    6190:	22 eb       	ldi	r18, 0xB2	; 178
    6192:	31 e0       	ldi	r19, 0x01	; 1
    6194:	b9 01       	movw	r22, r18
    6196:	0e 94 84 30 	call	0x6108	; 0x6108 <check_pass>
    619a:	88 23       	and	r24, r24
    619c:	71 f0       	breq	.+28     	; 0x61ba <change_pass+0x48>
			IS_PASS_CREATE = 1;
    619e:	81 e0       	ldi	r24, 0x01	; 1
    61a0:	80 93 eb 01 	sts	0x01EB, r24
			EEPROM_writeString(EEPROM_ADDRESS_PASSWORD, PASS); // Save password to EEPROM
    61a4:	2d ea       	ldi	r18, 0xAD	; 173
    61a6:	31 e0       	ldi	r19, 0x01	; 1
    61a8:	81 e1       	ldi	r24, 0x11	; 17
    61aa:	93 e0       	ldi	r25, 0x03	; 3
    61ac:	b9 01       	movw	r22, r18
    61ae:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <EEPROM_writeString>
			send_Byte(OK);
    61b2:	80 e0       	ldi	r24, 0x00	; 0
    61b4:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
    61b8:	03 c0       	rjmp	.+6      	; 0x61c0 <change_pass+0x4e>
		} else {
			send_Byte(NOK);
    61ba:	81 e0       	ldi	r24, 0x01	; 1
    61bc:	0e 94 29 30 	call	0x6052	; 0x6052 <send_Byte>
	return true;
}

/* Function to change the password */
void change_pass(void) {
	while (IS_PASS_CREATE == 0) {
    61c0:	80 91 eb 01 	lds	r24, 0x01EB
    61c4:	88 23       	and	r24, r24
    61c6:	d1 f2       	breq	.-76     	; 0x617c <change_pass+0xa>
			send_Byte(OK);
		} else {
			send_Byte(NOK);
		}
	}
	EEPROM_readString(EEPROM_ADDRESS_PASSWORD, SAVED_PASS, PASS_SIZE + 1); // Load saved password
    61c8:	27 eb       	ldi	r18, 0xB7	; 183
    61ca:	31 e0       	ldi	r19, 0x01	; 1
    61cc:	81 e1       	ldi	r24, 0x11	; 17
    61ce:	93 e0       	ldi	r25, 0x03	; 3
    61d0:	b9 01       	movw	r22, r18
    61d2:	46 e0       	ldi	r20, 0x06	; 6
    61d4:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <EEPROM_readString>
	IS_PASS_CREATE = 0;
    61d8:	10 92 eb 01 	sts	0x01EB, r1
}
    61dc:	cf 91       	pop	r28
    61de:	df 91       	pop	r29
    61e0:	08 95       	ret

000061e2 <timer_handler>:

/* Timer handler function */
void timer_handler(void) {
    61e2:	df 93       	push	r29
    61e4:	cf 93       	push	r28
    61e6:	cd b7       	in	r28, 0x3d	; 61
    61e8:	de b7       	in	r29, 0x3e	; 62
	time++;
    61ea:	80 91 ed 01 	lds	r24, 0x01ED
    61ee:	8f 5f       	subi	r24, 0xFF	; 255
    61f0:	80 93 ed 01 	sts	0x01ED, r24
}
    61f4:	cf 91       	pop	r28
    61f6:	df 91       	pop	r29
    61f8:	08 95       	ret

000061fa <lock_system>:

/* Function to lock the system after multiple failed attempts */
void lock_system(void){
    61fa:	df 93       	push	r29
    61fc:	cf 93       	push	r28
    61fe:	cd b7       	in	r28, 0x3d	; 61
    6200:	de b7       	in	r29, 0x3e	; 62
	attempts=0;
    6202:	10 92 ec 01 	sts	0x01EC, r1
	Buzzer_on(&BUZZER);
    6206:	88 e6       	ldi	r24, 0x68	; 104
    6208:	91 e0       	ldi	r25, 0x01	; 1
    620a:	0e 94 28 13 	call	0x2650	; 0x2650 <Buzzer_on>
	time=0;
    620e:	10 92 ed 01 	sts	0x01ED, r1
	while(time<10)
    6212:	80 91 ed 01 	lds	r24, 0x01ED
    6216:	8a 30       	cpi	r24, 0x0A	; 10
    6218:	e0 f3       	brcs	.-8      	; 0x6212 <lock_system+0x18>
		;
	Buzzer_off(&BUZZER);
    621a:	88 e6       	ldi	r24, 0x68	; 104
    621c:	91 e0       	ldi	r25, 0x01	; 1
    621e:	0e 94 50 13 	call	0x26a0	; 0x26a0 <Buzzer_off>

}
    6222:	cf 91       	pop	r28
    6224:	df 91       	pop	r29
    6226:	08 95       	ret

00006228 <TWI_init>:

#include "BIT_MATH.h"
TWI_ConfigType TWI_conf = { .address = 0x01, .bit_rate = 400 };

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    6228:	df 93       	push	r29
    622a:	cf 93       	push	r28
    622c:	00 d0       	rcall	.+0      	; 0x622e <TWI_init+0x6>
    622e:	cd b7       	in	r28, 0x3d	; 61
    6230:	de b7       	in	r29, 0x3e	; 62
    6232:	9a 83       	std	Y+2, r25	; 0x02
    6234:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    6236:	20 e2       	ldi	r18, 0x20	; 32
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	e9 81       	ldd	r30, Y+1	; 0x01
    623c:	fa 81       	ldd	r31, Y+2	; 0x02
    623e:	81 81       	ldd	r24, Z+1	; 0x01
    6240:	92 81       	ldd	r25, Z+2	; 0x02
    6242:	a3 81       	ldd	r26, Z+3	; 0x03
    6244:	b4 81       	ldd	r27, Z+4	; 0x04
    6246:	f9 01       	movw	r30, r18
    6248:	80 83       	st	Z, r24
	TWSR = 0x00;
    624a:	e1 e2       	ldi	r30, 0x21	; 33
    624c:	f0 e0       	ldi	r31, 0x00	; 0
    624e:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address<<1); // my address = 0x01 :)
    6250:	a2 e2       	ldi	r26, 0x22	; 34
    6252:	b0 e0       	ldi	r27, 0x00	; 0
    6254:	e9 81       	ldd	r30, Y+1	; 0x01
    6256:	fa 81       	ldd	r31, Y+2	; 0x02
    6258:	80 81       	ld	r24, Z
    625a:	88 0f       	add	r24, r24
    625c:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    625e:	e6 e5       	ldi	r30, 0x56	; 86
    6260:	f0 e0       	ldi	r31, 0x00	; 0
    6262:	84 e0       	ldi	r24, 0x04	; 4
    6264:	80 83       	st	Z, r24
}
    6266:	0f 90       	pop	r0
    6268:	0f 90       	pop	r0
    626a:	cf 91       	pop	r28
    626c:	df 91       	pop	r29
    626e:	08 95       	ret

00006270 <TWI_start>:

void TWI_start(void)
{
    6270:	df 93       	push	r29
    6272:	cf 93       	push	r28
    6274:	cd b7       	in	r28, 0x3d	; 61
    6276:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    6278:	e6 e5       	ldi	r30, 0x56	; 86
    627a:	f0 e0       	ldi	r31, 0x00	; 0
    627c:	84 ea       	ldi	r24, 0xA4	; 164
    627e:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    6280:	e6 e5       	ldi	r30, 0x56	; 86
    6282:	f0 e0       	ldi	r31, 0x00	; 0
    6284:	80 81       	ld	r24, Z
    6286:	88 23       	and	r24, r24
    6288:	dc f7       	brge	.-10     	; 0x6280 <TWI_start+0x10>
}
    628a:	cf 91       	pop	r28
    628c:	df 91       	pop	r29
    628e:	08 95       	ret

00006290 <TWI_stop>:

void TWI_stop(void)
{
    6290:	df 93       	push	r29
    6292:	cf 93       	push	r28
    6294:	cd b7       	in	r28, 0x3d	; 61
    6296:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    6298:	e6 e5       	ldi	r30, 0x56	; 86
    629a:	f0 e0       	ldi	r31, 0x00	; 0
    629c:	84 e9       	ldi	r24, 0x94	; 148
    629e:	80 83       	st	Z, r24
}
    62a0:	cf 91       	pop	r28
    62a2:	df 91       	pop	r29
    62a4:	08 95       	ret

000062a6 <TWI_writeByte>:

void TWI_writeByte(u8 data)
{
    62a6:	df 93       	push	r29
    62a8:	cf 93       	push	r28
    62aa:	0f 92       	push	r0
    62ac:	cd b7       	in	r28, 0x3d	; 61
    62ae:	de b7       	in	r29, 0x3e	; 62
    62b0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    62b2:	e3 e2       	ldi	r30, 0x23	; 35
    62b4:	f0 e0       	ldi	r31, 0x00	; 0
    62b6:	89 81       	ldd	r24, Y+1	; 0x01
    62b8:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    62ba:	e6 e5       	ldi	r30, 0x56	; 86
    62bc:	f0 e0       	ldi	r31, 0x00	; 0
    62be:	84 e8       	ldi	r24, 0x84	; 132
    62c0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    62c2:	e6 e5       	ldi	r30, 0x56	; 86
    62c4:	f0 e0       	ldi	r31, 0x00	; 0
    62c6:	80 81       	ld	r24, Z
    62c8:	88 23       	and	r24, r24
    62ca:	dc f7       	brge	.-10     	; 0x62c2 <TWI_writeByte+0x1c>
}
    62cc:	0f 90       	pop	r0
    62ce:	cf 91       	pop	r28
    62d0:	df 91       	pop	r29
    62d2:	08 95       	ret

000062d4 <TWI_readByteWithACK>:

u8 TWI_readByteWithACK(void)
{
    62d4:	df 93       	push	r29
    62d6:	cf 93       	push	r28
    62d8:	cd b7       	in	r28, 0x3d	; 61
    62da:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    62dc:	e6 e5       	ldi	r30, 0x56	; 86
    62de:	f0 e0       	ldi	r31, 0x00	; 0
    62e0:	84 ec       	ldi	r24, 0xC4	; 196
    62e2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    62e4:	e6 e5       	ldi	r30, 0x56	; 86
    62e6:	f0 e0       	ldi	r31, 0x00	; 0
    62e8:	80 81       	ld	r24, Z
    62ea:	88 23       	and	r24, r24
    62ec:	dc f7       	brge	.-10     	; 0x62e4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    62ee:	e3 e2       	ldi	r30, 0x23	; 35
    62f0:	f0 e0       	ldi	r31, 0x00	; 0
    62f2:	80 81       	ld	r24, Z
}
    62f4:	cf 91       	pop	r28
    62f6:	df 91       	pop	r29
    62f8:	08 95       	ret

000062fa <TWI_readByteWithNACK>:

u8 TWI_readByteWithNACK(void)
{
    62fa:	df 93       	push	r29
    62fc:	cf 93       	push	r28
    62fe:	cd b7       	in	r28, 0x3d	; 61
    6300:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    6302:	e6 e5       	ldi	r30, 0x56	; 86
    6304:	f0 e0       	ldi	r31, 0x00	; 0
    6306:	84 e8       	ldi	r24, 0x84	; 132
    6308:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    630a:	e6 e5       	ldi	r30, 0x56	; 86
    630c:	f0 e0       	ldi	r31, 0x00	; 0
    630e:	80 81       	ld	r24, Z
    6310:	88 23       	and	r24, r24
    6312:	dc f7       	brge	.-10     	; 0x630a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    6314:	e3 e2       	ldi	r30, 0x23	; 35
    6316:	f0 e0       	ldi	r31, 0x00	; 0
    6318:	80 81       	ld	r24, Z
}
    631a:	cf 91       	pop	r28
    631c:	df 91       	pop	r29
    631e:	08 95       	ret

00006320 <TWI_getStatus>:

u8 TWI_getStatus(void)
{
    6320:	df 93       	push	r29
    6322:	cf 93       	push	r28
    6324:	0f 92       	push	r0
    6326:	cd b7       	in	r28, 0x3d	; 61
    6328:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    632a:	e1 e2       	ldi	r30, 0x21	; 33
    632c:	f0 e0       	ldi	r31, 0x00	; 0
    632e:	80 81       	ld	r24, Z
    6330:	88 7f       	andi	r24, 0xF8	; 248
    6332:	89 83       	std	Y+1, r24	; 0x01
    return status;
    6334:	89 81       	ldd	r24, Y+1	; 0x01
}
    6336:	0f 90       	pop	r0
    6338:	cf 91       	pop	r28
    633a:	df 91       	pop	r29
    633c:	08 95       	ret

0000633e <__udivmodhi4>:
    633e:	aa 1b       	sub	r26, r26
    6340:	bb 1b       	sub	r27, r27
    6342:	51 e1       	ldi	r21, 0x11	; 17
    6344:	07 c0       	rjmp	.+14     	; 0x6354 <__udivmodhi4_ep>

00006346 <__udivmodhi4_loop>:
    6346:	aa 1f       	adc	r26, r26
    6348:	bb 1f       	adc	r27, r27
    634a:	a6 17       	cp	r26, r22
    634c:	b7 07       	cpc	r27, r23
    634e:	10 f0       	brcs	.+4      	; 0x6354 <__udivmodhi4_ep>
    6350:	a6 1b       	sub	r26, r22
    6352:	b7 0b       	sbc	r27, r23

00006354 <__udivmodhi4_ep>:
    6354:	88 1f       	adc	r24, r24
    6356:	99 1f       	adc	r25, r25
    6358:	5a 95       	dec	r21
    635a:	a9 f7       	brne	.-22     	; 0x6346 <__udivmodhi4_loop>
    635c:	80 95       	com	r24
    635e:	90 95       	com	r25
    6360:	bc 01       	movw	r22, r24
    6362:	cd 01       	movw	r24, r26
    6364:	08 95       	ret

00006366 <__mulsi3>:
    6366:	62 9f       	mul	r22, r18
    6368:	d0 01       	movw	r26, r0
    636a:	73 9f       	mul	r23, r19
    636c:	f0 01       	movw	r30, r0
    636e:	82 9f       	mul	r24, r18
    6370:	e0 0d       	add	r30, r0
    6372:	f1 1d       	adc	r31, r1
    6374:	64 9f       	mul	r22, r20
    6376:	e0 0d       	add	r30, r0
    6378:	f1 1d       	adc	r31, r1
    637a:	92 9f       	mul	r25, r18
    637c:	f0 0d       	add	r31, r0
    637e:	83 9f       	mul	r24, r19
    6380:	f0 0d       	add	r31, r0
    6382:	74 9f       	mul	r23, r20
    6384:	f0 0d       	add	r31, r0
    6386:	65 9f       	mul	r22, r21
    6388:	f0 0d       	add	r31, r0
    638a:	99 27       	eor	r25, r25
    638c:	72 9f       	mul	r23, r18
    638e:	b0 0d       	add	r27, r0
    6390:	e1 1d       	adc	r30, r1
    6392:	f9 1f       	adc	r31, r25
    6394:	63 9f       	mul	r22, r19
    6396:	b0 0d       	add	r27, r0
    6398:	e1 1d       	adc	r30, r1
    639a:	f9 1f       	adc	r31, r25
    639c:	bd 01       	movw	r22, r26
    639e:	cf 01       	movw	r24, r30
    63a0:	11 24       	eor	r1, r1
    63a2:	08 95       	ret

000063a4 <__udivmodsi4>:
    63a4:	a1 e2       	ldi	r26, 0x21	; 33
    63a6:	1a 2e       	mov	r1, r26
    63a8:	aa 1b       	sub	r26, r26
    63aa:	bb 1b       	sub	r27, r27
    63ac:	fd 01       	movw	r30, r26
    63ae:	0d c0       	rjmp	.+26     	; 0x63ca <__udivmodsi4_ep>

000063b0 <__udivmodsi4_loop>:
    63b0:	aa 1f       	adc	r26, r26
    63b2:	bb 1f       	adc	r27, r27
    63b4:	ee 1f       	adc	r30, r30
    63b6:	ff 1f       	adc	r31, r31
    63b8:	a2 17       	cp	r26, r18
    63ba:	b3 07       	cpc	r27, r19
    63bc:	e4 07       	cpc	r30, r20
    63be:	f5 07       	cpc	r31, r21
    63c0:	20 f0       	brcs	.+8      	; 0x63ca <__udivmodsi4_ep>
    63c2:	a2 1b       	sub	r26, r18
    63c4:	b3 0b       	sbc	r27, r19
    63c6:	e4 0b       	sbc	r30, r20
    63c8:	f5 0b       	sbc	r31, r21

000063ca <__udivmodsi4_ep>:
    63ca:	66 1f       	adc	r22, r22
    63cc:	77 1f       	adc	r23, r23
    63ce:	88 1f       	adc	r24, r24
    63d0:	99 1f       	adc	r25, r25
    63d2:	1a 94       	dec	r1
    63d4:	69 f7       	brne	.-38     	; 0x63b0 <__udivmodsi4_loop>
    63d6:	60 95       	com	r22
    63d8:	70 95       	com	r23
    63da:	80 95       	com	r24
    63dc:	90 95       	com	r25
    63de:	9b 01       	movw	r18, r22
    63e0:	ac 01       	movw	r20, r24
    63e2:	bd 01       	movw	r22, r26
    63e4:	cf 01       	movw	r24, r30
    63e6:	08 95       	ret

000063e8 <__prologue_saves__>:
    63e8:	2f 92       	push	r2
    63ea:	3f 92       	push	r3
    63ec:	4f 92       	push	r4
    63ee:	5f 92       	push	r5
    63f0:	6f 92       	push	r6
    63f2:	7f 92       	push	r7
    63f4:	8f 92       	push	r8
    63f6:	9f 92       	push	r9
    63f8:	af 92       	push	r10
    63fa:	bf 92       	push	r11
    63fc:	cf 92       	push	r12
    63fe:	df 92       	push	r13
    6400:	ef 92       	push	r14
    6402:	ff 92       	push	r15
    6404:	0f 93       	push	r16
    6406:	1f 93       	push	r17
    6408:	cf 93       	push	r28
    640a:	df 93       	push	r29
    640c:	cd b7       	in	r28, 0x3d	; 61
    640e:	de b7       	in	r29, 0x3e	; 62
    6410:	ca 1b       	sub	r28, r26
    6412:	db 0b       	sbc	r29, r27
    6414:	0f b6       	in	r0, 0x3f	; 63
    6416:	f8 94       	cli
    6418:	de bf       	out	0x3e, r29	; 62
    641a:	0f be       	out	0x3f, r0	; 63
    641c:	cd bf       	out	0x3d, r28	; 61
    641e:	09 94       	ijmp

00006420 <__epilogue_restores__>:
    6420:	2a 88       	ldd	r2, Y+18	; 0x12
    6422:	39 88       	ldd	r3, Y+17	; 0x11
    6424:	48 88       	ldd	r4, Y+16	; 0x10
    6426:	5f 84       	ldd	r5, Y+15	; 0x0f
    6428:	6e 84       	ldd	r6, Y+14	; 0x0e
    642a:	7d 84       	ldd	r7, Y+13	; 0x0d
    642c:	8c 84       	ldd	r8, Y+12	; 0x0c
    642e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6430:	aa 84       	ldd	r10, Y+10	; 0x0a
    6432:	b9 84       	ldd	r11, Y+9	; 0x09
    6434:	c8 84       	ldd	r12, Y+8	; 0x08
    6436:	df 80       	ldd	r13, Y+7	; 0x07
    6438:	ee 80       	ldd	r14, Y+6	; 0x06
    643a:	fd 80       	ldd	r15, Y+5	; 0x05
    643c:	0c 81       	ldd	r16, Y+4	; 0x04
    643e:	1b 81       	ldd	r17, Y+3	; 0x03
    6440:	aa 81       	ldd	r26, Y+2	; 0x02
    6442:	b9 81       	ldd	r27, Y+1	; 0x01
    6444:	ce 0f       	add	r28, r30
    6446:	d1 1d       	adc	r29, r1
    6448:	0f b6       	in	r0, 0x3f	; 63
    644a:	f8 94       	cli
    644c:	de bf       	out	0x3e, r29	; 62
    644e:	0f be       	out	0x3f, r0	; 63
    6450:	cd bf       	out	0x3d, r28	; 61
    6452:	ed 01       	movw	r28, r26
    6454:	08 95       	ret

00006456 <_exit>:
    6456:	f8 94       	cli

00006458 <__stop_program>:
    6458:	ff cf       	rjmp	.-2      	; 0x6458 <__stop_program>
